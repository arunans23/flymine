<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE set PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
          "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">


<set>
  <title>FlyMine User Documentation</title>

<book id="QuickStartGuide">
   <title>Quick Start Guide</title>

    <bookinfo>
     <productname>
      <emphasis>FlyMine</emphasis> - An integrated database for Drosophila and Anopheles genomics
     </productname>
     <pubdate>10 January 2005</pubdate>
     <copyright>
      <year>2002,2003,2004,2005</year>
      <holder>FlyMine</holder>
     </copyright>
     <legalnotice>
      <para>
        [insert copyright notice]
      </para>
     </legalnotice>
     <abstract>
      <para>
        This document describes release 1.1 of the FlyMine Drosophila and Anopheles
        integrated genomics database.
      </para>
     </abstract>
  </bookinfo>


  <chapter>
    <title>Introduction</title>
  
      <para>
        The FlyMine query page provides three routes to the data in
        the FlyMine database: The query Builder, Browse mode and
        predefined template queries. These are described in more
        detail in the following chapters.
      </para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="mainPage1.png" />
        </imageobject>
      </mediaobject>
   
 </chapter>


    <chapter id="manualQuickstartBuilder">
      <title>The FlyMine Query Builder : Building Complex Queries</title>

      <sect1>
	  <title>Introduction</title>
      <para>
        The FlyMine query builder allows you to construct complex
        queries across the multiple integrated data sources in the
        database. The query-builder interface enables you to browse
        through classes and attributes of the object model, selecting
        those that you wish to constrain and those that you wish to
        include in your results.
      </para>

      <para>
        The FlyMine query builder consists of 3 main sections:
      </para>

      <orderedlist numeration="upperalpha">
        <listitem>
          <para>
            The class chooser
          </para>
        </listitem>

        <listitem>
          <para>
            The main query builder
          </para>
        </listitem>

        <listitem>
          <para>
            The results display
          </para>
        </listitem>
      </orderedlist>

      <para>
        Each of these is described in more detail in the next sections.  The
        following list provides a basic overview of the steps involved
        in building a FlyMine query. For a walk-through a simple query see
        the <ulink url="../tutorials/index.xml">tutorials</ulink>.
      </para>
  
    <orderedlist>
      <listitem>
        <para>
          STARTING POINT: Choose the starting point for your query either from the
          classes displayed (which have been divided into biologically
          meaniful categories) or by selecting the 'List all classes' link.
          This will take you to the main query builder page. See
          <xref linkend="manualClasschooser"/> for
          more details.
        </para>
      </listitem>

      <listitem>
        <para>
          BROWSE: In the model browser of the query builder, browse to
          the classes and attributes you are interested in. See
          <xref linkend="manualModelbrowser"/>
          for more details.
        </para>
      </listitem>

      <listitem>
        <para>
          CONSTRAIN: Select the classes and/or attributes you wish to
          constrain using the -&gt; constrain arrows. Specify your
          constraints in the right hand constraints list.  See <xref
          linkend="manualConstraintslist"/> for more details.
        </para>
      </listitem>

      <listitem>
        <para>
          SHOW: Select the classes and/or attributes you wish to show
          in the results output using the "show" buttons. The
          classes/attributes selected will appear in the output fields
          list. See <xref linkend="manualOutputfields"/> for more
          details.
        </para>
      </listitem>

      <listitem>
        <para>
          VIEW: Press 'show results' to view your results in the results page.
          See <xref linkend="manualShowresults"/> for
          more details.
        </para>
      </listitem>
    </orderedlist>
   </sect1>


    <sect1>
      <title>The class chooser page</title>
      <para>
        The screen shot below shows the class
        chooser. This displays only the main starting points for
        a query and these have been divided into biologically
        meaniful categories.
      </para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="classSelection1.png" />
        </imageobject>
      </mediaobject>

      <para>
        In addition to the above classes a full list of classes from which
        you can start your query can be accessed by clicking on the 'List
        all classes' link (see above screenshot). This takes you to the
        class chooser page (see screenshot below). This page contains a
        list of classes for which objects exist in the database
        (i.e. classes for which there is data associated)
      </para>

      <para>
        Selecting the class from which you wish to start your query and
        pressing the 'Select' button will take you to the FlyMine query
        builder page.
      </para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="classSelectionAll1.png" />
        </imageobject>
      </mediaobject>

      <para>
        The browse model button (accessed from the initial class selection
        point)allows you to browse the complete FlyMine object model. This
        shows all the classes in FlyMine, some of which do not yet have
        data associated with them.
      </para>

      <para>
        In browse mode, the number on the right shows the number of
        objects associated with that class.
      </para>

      <para>
        Clicking on a class name within the browser will take you to
        the FlyMine query builder page.
      </para>

     <mediaobject>
        <imageobject>
          <imagedata fileref="browsingModel1.png" />
        </imageobject>
      </mediaobject>
 
    </sect1>

    <sect1>
      <title>The main query builder page</title>
      <para>
        The main FlyMine query builder page is composed
        of 3 sections (shown in the screen shot below):
      </para>

      <orderedlist>
        <listitem>
          <para>
            a model browser (left)
          </para>
        </listitem>

        <listitem>
          <para>
            a constraints list (right)
          </para>
        </listitem>

        <listitem>
          <para>
            an output fields list (bottom)
          </para>
        </listitem>
      </orderedlist>

      <mediaobject>
        <imageobject>
          <imagedata fileref="queryBuilder1.png" />
        </imageobject>
      </mediaobject>

      <sect2>
        <title>
          The model browser
        </title>

        <para>
          The model browser allows you to select the classes that contain the
          objects you require. Depending on the starting class you will be
          able to navigate to other classes as defined by the references
          between the classes (see <xref linkend="manualCOF"/> for an
          explanation of these concepts). In other words, to combine classes
          containing the objects you require, you find a path through the
          classes that link together the information you require. Within the
          model browser classes that can be accessed from a parent class (ie
          are linked to the parent class through a reference) are shown as
          fields within that class.
        </para>

        <para>
          For each class and attribute within the model browser there
          isa 'show' and a 'constrain' (-&gt;) option. These are used
          to either select a field to show in the results output or to
          constrain in the constraints list.
        </para>

        <para>
          See <xref linkend="manualModelbrowser"/>
          for more information about classes and
          attributes.
        </para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="modelBrowser2.png" />
          </imageobject>
        </mediaobject>
      </sect2>

      <sect2>
        <title>
          The constraints list
        </title>

        <para>
          The constraints list is on the right hand side of the
          query builder page. In this section you specify the
          constraints you wish to apply to particular classes and
          attributes.
        </para>

        <para>
          To apply a constraint to a field, navigate to the field
          in the model browser and click on the -&gt; (constrain) next
          to it. This will add the field to the constraints list and
          bring up a box in which you specify your constraint.
        </para>

        <para>
          The type of constraint you can add will vary depending
          on the type of field you selected to constrain.
        </para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="constraintsList1.png" />
          </imageobject>
        </mediaobject>
      </sect2>

      <sect2>
        <title>
          The output fields list
        </title>

        <para>
          The output fields list is located at the bottom of the
          query builder (underneath the Model browser). Initially the
          output fields list will say 'No fields selected for
          output'.
        </para>

        <para>
          The output fields list shows all attributes or classes that
          you have selected to show in the results output. To select a
          field to show in the results output you press 'show' next to
          the attriute or class.
        </para>

        <para>
          The order of attributes and classes in the output fields
          list can be changed using the &lt; and &gt; arrows. Fields can
          be deleted from the output fields list using the x.
        </para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="fieldsSelected1.png" />
          </imageobject>
        </mediaobject>
      </sect2>
  </sect1>

  </chapter>

    <chapter>
      <title>The Results page</title>

    
      <para>
        The results page displays the first 10 objects
        returned by your query.
      </para>

      <para>
        The number of objects displayed can be changed by
        changing the number in the Page size box and pressing
        Change.
      </para>

      <para>
        You can scroll though the objects using Next, or go
        to the last 10 objects using Last.
      </para>

      <para>
        The total number of objects returned by your query
        is estimated. An estimate is given because, for large
        queries, only a subset of the total number of objects is
        initially returned by the query. This is to improve query
        run time for large queries.  Click on last if you want to
        know the actual number of rows returned by your
        query.
      </para>

      <para>
        From the results page you can save your data to a
        bag (see <xref linkend="manualSavingBags"/>)
        and export your data in various formats (see
        <xref linkend="manualExportingdata"/>).
      </para>

      <para>
        If there are any objects in your results (rather
        than attributes) you can click on an object to view it in
        detail.
      </para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="tableResults1.png" />
        </imageobject>
      </mediaobject>

      <sect1>
        <title>
          Attribute List vs Browse Mode: 2 modes of result display
        </title>

        <para>
          There are two modes of result display in FlyMine
          depending on what you select to show in your results
          output. If you look at the model browser you will notice
          that there are 'show' options next to the attributes of
          classes and next to the actual class names (see screenshot below).
        </para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="modelBrowser_browsing1.png" />
          </imageobject>
        </mediaobject>

        <para>
          Selecting 'show' next to attributes results in a
          table-style results output as shown in the results
          displayed in the screenshot above (under C. The Results
          Page).  Selecting 'show' next to a class name means that
          each object required from that class will be returned (i.e
          all it's attributes and the references to other
          classes). It is also possible to show a mix of attributes
          and objects in the result display.
        </para>

        <para>
          When objects are selected, the result display will
          initially show a summary for each object. However, For
          each object in the database there is also a detailed
          results view (accessed by a link from the summary view)
          which shows all the attributes of the objects and the
          classes referenced by that object.  From this detailed
          results view it is possible to browse the information
          contained in the referenced classes (see screenshot below).
        </para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="resultsDetails1.png" />
        </imageobject>
      </mediaobject>
      </sect1>
 
</chapter>

    <chapter id="manualQuickStartBrowsing">
      <title>Browsing : Quick Search</title>

      <para>
        The FlyMine Browse search allows you to quickly and
        directly access the data in FlyMine. Entering any object
        identifier (such as a gene name or identifier) will take you
        straight to the details page for that object.  Wildcards are
        automatically attached to any text entered and so your search
        may match more than one object identifier in the database.
        In such a case a list of all matching objects is shown, from
        where you can access the object details pages.
      </para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="Browsing1.png" />
        </imageobject>
      </mediaobject>

    </chapter>


    <chapter id="manualQuickStartTemplates">
      <title>Template Queries : Predefined Queries</title>

      <para>
        Template queries provide an easier route to
        accessing the data in FlyMine. A template query is like a
        form with various boxes for you to fill in.  A number of
        template queries have been predefined.  These range from
        simple queries to more complex queries covering a wide
        range of data. To run a template query:
      </para>

      <orderedlist>
        <listitem>
          <para>
            Select the query you wish to run either from the
            lists on the main Query page or by selecting 'view all
            template queries'.  Pressing the -&gt; next to the query
            description will take you to the template form.
          </para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="templates1.png" />
            </imageobject>
          </mediaobject>

        </listitem>

        <listitem>
          <para>
            Fill in the boxes with the appropriate values or
            leave them with the default values shown (see screenshot
            below).
          </para>
        </listitem>

        <listitem>
          <para>
            Pressing the 'View results' button will take you
            directly to the results page. Pressing the 'View query'
            button will display the template query in the FlyMine Query
            Builder.  Here you can either use the template as a
            starting point for building a more complex query, edit the
            query or simply run the query as it is.  Press 'Show
            results' to run your query.
          </para>

          <mediaobject>
            <imageobject>
              <imagedata fileref="templates2.png" />
            </imageobject>
          </mediaobject>

        </listitem>
      </orderedlist>
    
  </chapter>

</book>






<book id="flymineManual">
  <title>
    FlyMine Manual
  </title>

  <bookinfo>
    <productname>
      <emphasis>FlyMine</emphasis> - An integrated database for Drosophila and Anopheles genomics
    </productname>
    <pubdate>10 January 2005</pubdate>
    <copyright>
      <year>2002,2003,2004,2005</year>
      <holder>FlyMine</holder>
    </copyright>
    <legalnotice>
      <para>
        [insert copyright notice]
      </para>
    </legalnotice>
    <abstract>
      <para>
        This document describes release 1.1 of the FlyMine Drosophila and Anopheles
        integrated genomics database.
      </para>
    </abstract>
  </bookinfo>

  <chapter>
    <title>Introduction</title>

    <itemizedlist>
      <listitem>
        <para>
          <ulink url="../../introduction.xml">The FlyMine project</ulink>
        </para>
      </listitem>
    </itemizedlist>
  </chapter>


  <chapter id="manualQueryBuilder">
    <title>The FlyMine Query Builder</title>
     <sect1>
         <title>Introduction</title>
    <para>
      The FlyMine query builder allows you to construct queries on the
      data in the FlyMine database.  The query-builder interface
      enables you to browse through classes and attributes of the data
      model, selecting those that you wish to constrain and those that
      you wish to include in your results. The following points provide
      a basic outline of the steps involved in building a query with
      links to where you can find more detailed information:
    </para>
  
    <orderedlist>
      <listitem>
        <para>
          STARTING POINT: Choose the starting point for your query either from the
          classes displayed (which have been divided into biologically
          meaniful categories) or by selecting the 'List all classes' link.
          This will take you to the main query builder page. See
          <xref linkend="manualClasschooser"/> for
          more details.
        </para>
      </listitem>

      <listitem>
        <para>
          BROWSE: In the model browser of the query builder, browse to
          the classes and attributes you are interested in. See
          <xref linkend="manualModelbrowser"/>
          for more details.
        </para>
      </listitem>

      <listitem>
        <para>
          CONSTRAIN: Select the classes and/or attributes you wish to
          constrain using the -&gt; constrain arrows. Specify your
          constraints in the right hand constraints list.  See <xref
          linkend="manualConstraintslist"/> for more details.
        </para>
      </listitem>

      <listitem>
        <para>
          SHOW: Select the classes and/or attributes you wish to show
          in the results output using the "show" buttons. The
          classes/attributes selected will appear in the output fields
          list. See <xref linkend="manualOutputfields"/> for more
          details.
        </para>
      </listitem>

      <listitem>
        <para>
          VIEW: Press 'show results' to view your results in the results page.
          See <xref linkend="manualShowresults"/> for
          more details.
        </para>
      </listitem>
    </orderedlist>
   </sect1>


  <sect1 id="manualClasschooser">
    <title>Choosing a starting point</title>

    <para>
      To build a query using the FlyMine Query Builder you
      must first decide on a starting class for your query.  The
      main classes are displayed on the initial query page and are
      divided into biologically meaniful categories.  This page
      contains a list of classes for which objects exist in the
      database (i.e. classes for which there is data associated).
      Selecting a class will take you to the
      <link linkend="manualQuerybuilder">FlyMine query builder page</link>.
    </para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="classSelection1.png" />
      </imageobject>
    </mediaobject>

    <para>
      In addition to the above classes a full list of classes
      from which you can start your query can be accessed by
      clicking on the 'List all classes' link (see above
      screenshot).  This takes you to the class chooser page (see
      screenshot below).  This page contains a list of classes for
      which objects exist in the database (i.e. classes for which
      there is data associated). Select the class from which you
      wish to start your query and press the Select button. This
      will take you to the
      <link linkend="manualQuerybuilder">FlyMine query builder page</link>.
    </para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="classSelectionAll1.png" />
      </imageobject>
    </mediaobject>

    <sect2>
      <title>Browse the FlyMine model</title>

      <para>
        The 'Browse model' button (see first screenshot above) allows you
        to browse the complete FlyMine object model. This shows all the
        classes in FlyMine, some of which do not yet have data associated
        with them
      </para>

      <para>
        The number on the right shows the number of objects associated
        with that class
      </para>

      <para>
        Click on a class name to begin your query with that class
      </para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="browsingModel1.png" />
        </imageobject>
      </mediaobject>
    </sect2>
  </sect1>


  <sect1 id="manualQuerybuilder">
    <title>The query builder page</title>
    <para>
      The main FlyMine query builder page is composed of 3
      sections:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <link linkend="manualModelbrowser">a model browser (left)</link>
        </para>
      </listitem>

      <listitem>
        <para>
          <link linkend="manualConstraintslist">a constraints list (right)</link>
        </para>
      </listitem>

      <listitem>
        <para>
          <link linkend="manualOutputfields">an output fields list (bottom)</link>.
          The output fields list will initially say 'No fields
          selected for output'.
        </para>
      </listitem>
    </itemizedlist>

    <mediaobject>
      <imageobject>
        <imagedata fileref="queryBuilder1.png" />
      </imageobject>
    </mediaobject>
   </sect1>

    <sect1 id="manualModelbrowser">
      <title>The model browser</title>

      <para>
        The FlyMine model browser allows you to select the classes
        that contain the objects you require. Depending on the
        starting class you will be able to navigate to other classes
        as defined by the references between the classes (see <xref
        linkend="manualCOF"/> for an explanation of these
        concepts). In other words, to combine classes containing the
        objects you require, you find a path through the classes that
        link together the information you require. Within the model
        browser classes that can be accessed from a parent class (ie
        are linked to the parent class through a reference) are shown
        as fields within that class (see <xref
        linkend="manualFields"/> for more explanation on fields.
      </para>

      <para>
        For each class and attribute within the model browser there is
        a 'show' and a 'constrain' (-&gt;) option. These are used to
        either select a class/attribute to show in the results output
        (see <xref linkend="manualOutputfields"/>) or to constrain in
        the constraints list (see <xref
        linkend="manualConstraintslist"/>).
      </para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="modelBrowser1.png" />
        </imageobject>
      </mediaobject>
    

    <sect2 id ="manualFields">
      <title>Fields</title>

      <para>
        The following is an explanation of the classes and attributes
        displayed by the model browser. The Gene class is used as an example,
        but the information is easily transferable to other classes. The
        screen-shot below shows the model browser displaying the Gene
        class.
      </para>

      <para>
        The following fields are 'attributes' of the Gene class:
        identifier, name and organismDbId. Attributes hold just one
        piece of information which can be either text or a number. The
        attributes of a class are always displayed directly below the
        class name and can be distinguished from other fields (see
        below) as they do not a have a + for expanding before them.
      </para>

      <para>
        The field called Organism is a reference (ie a link) to the
        organism class. Fields which are references to other classes have a
        field name (in this case organism) followed by the name of the class
        it is referencing (in this case Organism).
      </para>

      <para>
        The field called Transcript is also a reference to a class - the
        Transcript class. This field, however, also has the type 'collection'.
        This is because a particular gene object in the Gene class will
        reference (link to) one or more transcript objects in the Transcripts
        class. The transcript collection is a list of references to these
        transcript objects.
      </para>

      <para>
        The other fields in the gene class are all of the type class
        collection as described above.
      </para>

      <para>
        An object is a specific member of a class and it's related
        information (eg the Notch gene is a member of the Gene
        class). Therefore if you select 'show' next to the Gene class,
        you are asking for objects of the Gene class which includes
        all the information stored about each object. For example, if
        you query for the Notch gene object, your results will include
        all the attributes and referenced classes associated with the
        Notch gene.  If you select an attribute of a class to 'show',
        you are asking for only a specific piece of information stored
        with the objects of that class.
      </para>

      <para>
        For specific information about each class or attribute click
        on the ? help link next to the class/attribute in the model
        browser.
      </para>



      <mediaobject>
        <imageobject>
          <imagedata fileref="fields1.png" />
        </imageobject>
      </mediaobject>
    </sect2>
  </sect1>

    <sect1 id="manualConstraintslist">
      <title>Applying constraints to your query</title>

      <para>
        The constraints list is on the right hand side of the query
        builder page. In this section you specify the constraints you wish to
        apply to particular classes and attributes.
      </para>

      <para>
        To apply a constraint to a field, navigate to the field in the
        model browser and click on the -&gt; (constrain) next to it. This will
        add the field to the constraints list and bring up a box in which you
        specify your constraint.
      </para>

      <para>
        The type of constraint you can add will vary depending on the
        type of field you selected to constrain.
      </para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="constraintsList1.png" />
        </imageobject>
      </mediaobject>
    </sect1>

    <sect1 id="manualOutputfields">
      <title>Selecting what to show in your results</title>

      <para>
        The output fields list is located at the bottom of the query
        builder (underneath the <link linkend="manualModelbrowser">Model browser</link>).
        Initially the output fields list will say 'No fields
        selected for output'.
      </para>

      <para>
        The output fields list shows all fields that you have selected
        to show in the results output. To select a field to show in the
        results output you press 'show' next to the field.
      </para>

      <para>
        The order of fields in the output fields list can be changed
        using the &lt; and &gt; arrows. Fields can be deleted from the output
        fields list using the x.
      </para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="fieldsSelected1.png" />
        </imageobject>
      </mediaobject>
    </sect1>

    <sect1 id="manualShowresults">
      <title>Viewing results</title>

      <para>
        Pressing 'Show results' will run your query. When your query is
        run an estimate is first made of how long it will take to run the
        query and how many objects should be returned by the query. If your
        query is going to take a very long time to run, it will be stopped and
        a message will appear at the top of the screen.
      </para>

      <para>
        When your query has run, your results will be displayed on the
        <link linkend="manualResults">results page</link>.
      </para>
    </sect1>

    <sect1 id="manualSavingqueries">
      <title>Saving queries</title>

      <para>
        All queries that you run are saved to your
        <link linkend="manualHistory">query history</link>. Your query will be
        named query_x (where x increments for each query run).
      </para>

      <para>
        It is also possible to save a query configuration with a name
        that you choose. Once you have added fields to the
        <link linkend="manualOutputfields">output fields list</link> in the
        <link linkend="manualQuerybuilder">FlyMine query builder</link> a box at
        the bottom will become available for you save your query with a
        specific name.
      </para>

      <para>
        Saved queries can be accessed from your <link linkend="manualHistory">query history</link>.
      </para>
    </sect1>



  <sect1 id="manualExamplequeries">
    <title>Example queries</title>
    <para>
      A number of <ulink url="/examples.do">example queries</ulink>
      are available to help you construct your own queries.
    </para>
    
    <para>
      Click on the query name to display the query in the query
      builder interface. From here you can edit the query or run it
      again.
    </para>
  </sect1>


 </chapter>










  <chapter id="manualBrowsingdata">
    <title>Browsing FlyMine</title>
    <para>
      There are two ways to browse the data in FlyMine:
      1. directly from the main query page or 2. through a query
      you construct yourself.
    </para>

    <sect1>
      <title>Browsing directly</title>

      <para>
        The FlyMine Browse search, accessible from the main
        query page (see screenshot below), allows you to quickly and
        directly access the data in FlyMine.  Entering any object
        identifier (such as a gene name or identifier) will take you
        straight to the details page for that object (see
        <xref linkend="manualObjectDetails"/>).
        Wildcards are automatically attached to any text entered and
        so your search may match more than one object in the
        database.  In such a case a list of all matching objects is
        shown, from where you can access the object details
        page.
      </para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="Browsing1.png" />
        </imageobject>
      </mediaobject>
    </sect1>

    <sect1>
      <title>Browsing from a query</title>
      <para>
        Queries can be constructed using the FlyMine query builder in
        such a way that the results are browsable.  (see <xref
        linkend="manualQueryBuilder"/> for details on using the query
        builder). If you select an entire class to 'show' in the
        output (as opposed to selecting attributes of a class, see
        screenshot below), your result will provide a link to a
        details page for the objects returned from that class. See
        <xref linkend="manualObjectDetails"/> for more.
      </para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="modelBrowser_browsing1.png" />
        </imageobject>
      </mediaobject>
 
   </sect1>
  </chapter>

  <chapter id="manualTemplatequeries">
    <title>Predefined template queries</title>

   <sect1>
      <title>Introduction</title>
    <para>
      To provide a more direct route to the data in FlyMine, a
      number of queries have been predefined as templates.  A
      template query is like a form with various boxes for you to
      fill in. A number of template queries have been
      predefined. These range from simple queries to more complex
      queries covering a wide range of data.
    </para>

    <para>
      Template queries can be accessed from the main FlyMine
      query page.  Templates can be selected either via a link from
      the class categories section, where the templates have also
      been divided into appropriate biological categories (note
      that a template query may belong in more than category) or
      from the 'Predefined template queries' section on the main query
      page, from where there is a link to all template
      queries (see screenshot below).
    </para>

      <mediaobject>
        <imageobject>
          <imagedata fileref="templates1.png" />
        </imageobject>
      </mediaobject>

    </sect1>

  
    <sect1>
      <title>How to run predefined template queries</title>
    <para>
      To run a template query:
    </para>

    <orderedlist>
      <listitem>
        <para>
          Select the query you wish to run either from the
          lists on the main Query page or by selecting 'view all
          template queries'.  Pressing the -&gt; next to the query
          description will take you to the template form.
        </para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="templates1.png" />
          </imageobject>
        </mediaobject>
      </listitem>

      <listitem>
        <para>
          Fill in the boxes with the appropriate values or
          leave them with the default values shown (see screenshot
          below).
        </para>
      </listitem>

      <listitem>
        <para>
          Pressing the 'View results' button will take you directly to the
          results page (see <xref linkend="manualResults"/> for more
          details). Pressing the 'View query' button will display the template
          query in the FlyMine Query Builder.  Here you can either use the
          template as a starting point for building a more complex query, edit
          the query or simply run the query as it is.  Press 'Show results' to
          run your query. See <xref linkend="manualQueryBuilder"/> for more
          details.
        </para>

        <mediaobject>
          <imageobject>
            <imagedata fileref="templates2.png" />
          </imageobject>
        </mediaobject>

      </listitem>
    </orderedlist>
   </sect1>
  </chapter>



  <chapter id="manualResults">
    <title>Results</title>
      <sect1>
        <title>Introduction</title>

      <para>
        There are two types of result display in FlyMine: table-style
        results and object summaries. In addition there are object
        detail pages which provide more information about specific
        objects.  The type of result displayed depends on what items
        have been selected to show in the results - ie. only class
        attributes, only classes or a combination of attributes and
        classes.  See <xref linkend="manualFields"/> for an
        explanation of classes and attributes.  Each of these types of
        result display are described in more detail in the following
        sections . The general features of each result display are
        described below.
      </para>

    <para>
      The results page displays the first 10 items returned by your
      query.
    </para>

    <para>
      The number of items displayed can be changed by changing the
      number in the Page size box and pressing Change.
    </para>

    <para>
      You can scroll through the items using Next, or go to the last
      10 items using Last.
    </para>

    <para>
      The total number of items returned by your query is estimated.
      An estimate is given because, for large queries, only a subset
      of the total number of items is initially returned by the
      query. This is to improve query run time for large queries.
      Clicking on 'last' will give you the exact number of items
      returned by your query.
    </para>

    <para>
      From the results page you can save your data to a bag (see <xref
      linkend="manualSavingBags"/>) and export your data in various
      formats (see <xref linkend="manualExportingdata"/>).
    </para>

    <para>
      If there are any objects in your results (as opposed to
      attributes) you can click on an object to view it in
      detail (see <xref linkend="manualObjectDetails"/>).
    </para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="tableResults1.png" />
      </imageobject>
    </mediaobject>


         
        </sect1>

        <sect1>
          <title>Table-style results</title>
            <para>
               A table-style of result can be created if a query is
               constructed to only show class attributes (as opposed
               to entire objects belonging to a class), as these
               consist of a single value, such as a name or
               number. Such table-style results are useful if you wish
               to download data (to a speadsheet for example).  The
               screenshots below show an example of a query
               constructed to show only class attributes and the
               table-style result it produces.
            </para>


        <mediaobject>
          <imageobject>
            <imagedata fileref="tableResults2.png" />
          </imageobject>
        </mediaobject>

        </sect1>

      <sect1>
          <title>Object summary results</title>
              
            <para>
                If a query is constructed such that only classes are
             selected to 'show' in the results, the results will
             initially be a summary list of the objects returned by
             your query.  The screenshot below shows an example of
             Gene objects returned by a query.  Each object in the
             summary list has a link to a details page which provides
             more information about that object - see <xref
             linkend="manualObjectDetails"/>
             </para>
                


        <mediaobject>
          <imageobject>
            <imagedata fileref="geneDetails1.png" />
          </imageobject>
        </mediaobject>

       </sect1>


  <sect1 id="manualObjectDetails">
    <title>Object details pages</title>

    <para>
      For every object in the FlyMine database there is a details page
      which provides all the attributes, references and collections for
      that object along with additional information such as the GBrowse
      genome viewer for sequence features. (see <xref linkend="manualCOF"/>
      for an explanation of these concepts).
    </para>

    <para>
      The object details page can be accessed from your results
      by clicking on the [details...] links. From this detailed
      results view it is possible to browse the information contained
      in the referenced classes (see screenshot below).
    </para>

    <para>
      If you are using the 'Browse' search from the main query
      page, you may be taken to an object details page directly if
      only one object in the database matches your search.
    </para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="resultsDetails1.png" />
      </imageobject>
    </mediaobject>
   </sect1>

  </chapter>




<chapter id = "Bags">
  <title>Bags</title>

  <sect1>
     <title>Introduction</title>
       
      <para>
        Bags are holders for sets of data.  The data in a bag can be either attributes (eg a list of gene identifiers) or a set of objects (or a combination of attributes and objects). The following sections describe how bags can be created and used in FlyMine.
      </para>

  </sect1>




  <sect1 id="manualSavingBags">
    <title>Saving bags of data from a query</title>

    <para>
      Data can be saved into 'bags' and stored in your query history.
      To save your data to a bag select the required data and either add it
      to an existing bag or save it to a new bag. Selecting the check-boxes
      next to the column headings will select the entire column for export.
      Alternatively, individual items can be saved by selecting check-boxes
      next to the items. Saved bags of data can be viewed from the History
      page (accessible from the menu bar) (see <xref linkend="manualHistory"/>).
    </para>

    <para>
      Saved bags of data can be used to constrain new queries, perform
      logical operations and can be exported (see <xref
      linkend="manualUsingBags"/>. If you have saved bags of data
      these will become available for constraining queries in the
      constraint list of the query builder page.
    </para>


    <mediaobject>
      <imageobject>
        <imagedata fileref="savingBags1.png" />
      </imageobject>
    </mediaobject>
   </sect1>

  <sect1 id="manualCreatingBag">
    <title>Creating a bag of identifiers from an external source</title>

    <para>
      A bag of objects can be created from an external source.
      From the main query page click on the 'Create a bag of
      identifiers' link (see screenshot below).
    </para>


    <mediaobject>
      <imageobject>
        <imagedata fileref="createBag1.png" />
      </imageobject>
    </mediaobject>


    <para>
      To make your bag, either type or cut and paste in a list of
      identifiers, or upload a list from a file. Press 'Make bag' to
      save the bag of identifiers to your <link
      linkend="manualHistory">history</link>.  The bag you create will
      be a bag of attributes (see <link
      linkend="manualFields">Fields</link>). See <xref
      linkend="manualUsingBags"/> for details on how to use a bag of
      identifiers in a query and for performing the logical operations
      union and intersect.
    </para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="createBag2.png" />
      </imageobject>
    </mediaobject>
  </sect1>

  <sect1 id="manualUsingBags">
    <title>Making use of bags</title>

    <para>Bags can be used in three different ways: to constrain a
    query, to perform logical operations and to export.  The following
    sections describe each of these in more detail.
    </para>

    <para>
      Bags of objects or identifiers can be created either from your
      query results (see <xref linkend="manualSavingBags"/>) or from an
      external source (see <xref linkend="manualCreatingBag"/>) These
      bags of data can be used for logical operations (union and
      intersect) or for constraining queries in the query builder -
      details below.
    </para>

    <para>
      The logical operations, union and intersect, can be performed on bags of
      data from your <link linkend="manualHistory">history</link> page. Use the
      checkbuttons next to your saved bags to select two or more bags for
      these operations.  The result of the operation will be saved as a new
      bag with a default name (see screenshot below).
    </para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="logicalOps1.png" />
      </imageobject>
    </mediaobject>

    <para>
      Bags of data can be used to constrain queries in the query
      builder.  If you have bags of data saved in your history you will
      automatically be able to use these from within the query builder
      to constrain a query.  When an attribute or class is selected for
      constraining in the query builder the constraint box in the right
      hand constaint pane will ask you to either add a constraint or
      constrain to a choice of your bags (see screenshot below).
    </para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="constrain2bag1.png" />
      </imageobject>
    </mediaobject>
  </sect1>

</chapter>

  <chapter id="manualExportingdata">
    <title>Exporting data</title>
    <para>
      Data can be exported from the results page in various formats -
        currently Excel format, comma separated values or tab
        separated values.  The entire data set will be exported - you
        do not need to select any check-boxes. If you do not wish to
        export certain columns these can be hidden using the 'hide'
        option in the column header.
    </para>
  </chapter>

  <chapter id="manualHistory">
    <title>History</title>
    <para>
      This page displays your list of saved bags and queries
    </para>

    <para>
      A saved query is a copy of the actual query configuration, while
      a saved bag contains specific data saved from a particular
      query.
    </para>

    <para>
      All queries run are saved in the query history. If you do not give your
      query a particular name (in the 'Save query' box at the bottom of the
      query interface), it will be saved as query_x (where x increments for
      each query run) (see <xref linkend="manualSavingqueries"/>)
    </para>

    <para>
      Saved bags are created by saving specific data from the results
      page, (see <xref linkend="manualSavingBags"/>).
    </para>

    <sect1>
      <title>Using saved queries</title>

      <para>
        Click on the query name to display the query in the query
        builder interface. From here you can edit the query or run it
        again
      </para>
    </sect1>

    <sect1>
      <title>Using saved bags</title>

      <para>
        Click on the bag name to view its items in the results page.
      </para>
    </sect1>

    <sect1>
      <title>Deleting saved bags and queries</title>

      <para>
        Select the check-boxes of the bags or queries you wish to delete and
        press the appropriate Delete button.
      </para>
    </sect1>
  </chapter>


  <chapter id="manualFlyMineIdentifiers">
    <title>Identifiers, Accessions and Synonyms in FlyMine</title>
    <para>
      This page describes the meanings and origins of identifiers of
      biological objects in FlyMine. As FlyMine aggregates data from
      multiple sources there are often many different identifiers for the
      same entity. Available identifiers vary between biological object
      type, organism and data source. FlyMine attempts to choose a standard
      or commonly used unique identifier for each biological type and
      retains all other identifiers as synonyms with a reference to their
      source.
    </para>

    <para>
      BioEntity is the root class of all biological objects in the
      FlyMine model. This has an identifier field that all subclasses (e.g.
      Chromosome, Gene, Exon) inherit. The identifier field is almost always
      populated with a value unique in the context of a particular organism.
      The only time when 'identifier' can be empty is when another primay
      identifier field exists (e.g. Gene, Protein) and a data source has
      only provided the alternative.
    </para>

    <para>
      In some cases this is a standard identifier (e.g. Protein -
      UNIPROT id), for biological types that are not so widely referenced
      this will be the identifier for the primary data source used (e.g.
      Exon - Ensembl stable id). For some types the identifier is more akin
      to a name than a universal identifier (e.g. Chromsome - 'X'). All
      widely used identifiers that FlyMine has loaded are also stored as
      Synonyms of the BioEntity linked to the source.
    </para>

    <para>
      Gene - for some organisms there are two commonly used
      identification schemes, for example Drosophila has FlyBase FBgn*** and
      Celera CG***. Gene has an additional identifier field, 'organismDbId',
      which contains the id used in the main annotation database for each
      organism. So for Drosophila 'organismDbId' is a FlyBase id and
      'identifier' is CG*** id. When there is only one main identifier for
      an organism the same id is used in both fields. In addition Gene has
      'name' and 'description' fields. All gene names are stored as
      Synonyms, only one should have the 'isPrimary' flag set to
      true.
    </para>

    <para>
      Protein - current situation (July 2004) The 'identifier' and
      'primaryAccession' fields of Protein are set to the accession with
      which it was labelled in the source it came from. In many cases this
      will be the UNIPROT primary accession but no verification is performed
      against UNIPROT.
    </para>

    <para>
      Protein - future plan (~September 2004) - proteins will be
      classified where possible according to UNIPROT. The 'identifier' field
      will be the UNIPROT identifer when available (e.g. 18C_DROME). Protein
      has an additional 'primaryAccession' field which will be the UNIPROT
      primary accession where available (e.g. P16909). All accession numbers
      available in UNIPROT are stored as synonyms with type 'accession'
      (i.e. P16909, Q9VPA8). Only the primary accession will have the
      'isPrimary' flag set to true.
    </para>

    <para>
      It is conceivable that a data source could provide a Protein
      with a TREMBL identifier/accession which has been superceeded as the
      primary UNIPROT identifier/accesssion by the inclusion of that protein
      in SWISSPROT. This could result in two Protein objects existing in the
      FlyMine database representing the same actual protein - one with the
      current UNIPROT ids, on with TREMBl ids. We aim to run a
      post-processing step to find and correct these situations once we have
      integrated UNIPROT data. The two Proteins would then be merged.
    </para>

    <para>
      Synonyms represent alternative names and accessions for a
      BioEntity. The 'source' reference points at an InfoSource object (i.e.
      Database, Publication) from which the synonym was loaded. Synonym has
      a 'type' field which defines it as an 'accession' or a 'name'. An
      'isPrimary' flag is set to true if the synonym is the main name or
      accession for that source - e.g. UNIPROT primary accession or main
      FlyBase gene name.
    </para>
  </chapter>

  <chapter id="manualDataModel">
    <title>The FlyMine Data Model</title>
    <para>
      The FlyMine database is built using
      <ulink url="http://www.intermine.org"> InterMine</ulink>, an open-source data
      warehouse system for integrating the data from many sources into one
      object-based database. The FlyMine data model is generated by merging
      existing and emerging ontologies and standards (e.g. MAGE, SO, PSI),
      thus enabling data to be loaded from a variety of sources and
      providing the flexibility to easily incorporate new data sources as
      they appear. Additional FlyMine specific classes help link the
      ontologies and provide classes relating to the evidence and source for
      a particular piece of data. To get the most out of querying FlyMine it
      is useful to understand a bit about the underlying data model. First
      of all it is useful to understand the concepts of
      <link linkend="manualCOF">classes, objects and fields</link>.
    </para>
  </chapter>

  <chapter id="manualCOF">
    <title>Classes, Objects and Fields - the basics</title>
    <para>
      Classes can be thought of as templates to describe information
      about a specific type of thing. Things which have similar properties
      belong to the same class. For example in FlyMine there is a 'Gene'
      class. The Gene class describes properties of genes. The actual
      properties are known as fields. The class is a holder for a set of
      fields that provide information about the 'thing'. For example the
      Gene class has the fields name, residues etc. An object is an actual
      member of a class (known as an 'instance' of that class). For example,
      the Notch gene is a member of the gene class. Every object of a class
      has the set of properties (fields) that describe that class, although
      some of these fields may be empty (ie. there may not be any data
      available for some fields). The classes in the FlyMine data model form
      a hierarchy with classes lower down the hierarchy being
      specialisations of classes higher up. For example, the transcript
      class forms more specialised subclasses such as primary transcript,
      processed transcript, tRNA etc. The top class in the model is called
      the InterMine object class. Every class in FlyMine is therefore a
      specialisation of the InterMine object class.
    </para>

    <para>
      Classes in the hierarchy are linked together by references. A
      reference is a pointer from one class to another class. For example,
      The Transcript class has a reference to the exon class as exons are
      part of a transcript. A specific object of a class has a reference to
      a specific object or objects in another class. For example, there is a
      reference between the Gene class and the Transcript class. In practise
      this actually means that individual objects of the Gene class have a
      reference to specific objects of the transcripts class. ie. a
      particular gene object has particular transcripts. When a class has a
      reference to another class, the referenced class will appear as field
      within the class.
    </para>

    <para>
      Fields can be one of several different data types. For example
      some fields simply contain one piece of information, such as a
      name.  In this case the field is the type 'String' (a String is
      basically a piece of text that can include letters and
      numbers). Similarly, fields that contain just a number will be of
      the type, integer. A field that is a reference to another class
      will be of type 'class'. Fields that contain a list of objects (or
      references to objects of a different class) are known as
      collections. See <xref linkend="manualModelbrowser"/> for more
      information.
    </para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="classDiag3.gif" />
      </imageobject>
    </mediaobject>

    <mediaobject>
      <imageobject>
        <imagedata fileref="objectDiag1.gif" />
      </imageobject>
    </mediaobject>
  </chapter>

  <chapter id="manualSelectingData">
    <title>Selecting data from classes</title>

    <para>
      You can think of the classes as boxes containing lots of individual
      items (objects). To create a query you want certain items from certain
      boxes. You therefore have to select the boxes that require the items you
      want and constrain the boxes so that you only select the subset of items
      in the boxes that you require. To query FlyMine you therefore select the
      classes that hold the objects you require. Constraints can be applied to
      the objects contained in a class, so that only a certain subset of those
      objects which have the required characteristics are selected. For example
      the gene class contains a large number of genes (gene objects) from all
      the organisms represented in FlyMine. However you may only be interested
      in data related to one specific gene. You would therefore constrain the
      gene name field of the gene class to that of the required gene.
    </para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="constrainDiag2.gif" />
      </imageobject>
    </mediaobject>
  </chapter>

  <chapter id="manualCombiningData">
    <title>Combining data from different classes</title>
    <para>
      Because of the relationships between the objects in the classes you
      may only need to constrain one class to retrieve a subset of items from
      another class. eg if you want all the genes from Drosophila, you only need
      to constrain the organism class to Drosophila to retrieve that subset of
      genes from the gene class. If you wish to know about the transcripts of a
      particular gene you would combine information from the Gene class and the
      Transcript class. By constraining the 'name' field of the gene class to a
      particular gene, you will only retrieve information from the transcripts
      class that relates to that gene (ie you do not need to apply the
      constraint to the transcripts class as well). This is because that
      particular gene object has a relationship to particular objects
      (instances) of the transcript class (ie those transcripts that are
      produced from that particular gene).
    </para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="constrainDiag1.gif" />
      </imageobject>
    </mediaobject>
  </chapter>

  <chapter id="manualConstrainingData">
    <title>Constraining to subclasses</title>

    <para>
      Some classes are subdivided in to more specialised subclasses. For
      some queries you may only be interested in data relating to a particular
      subclass of a class. For example, you may only be interested in the tRNA
      transcripts. In these cases you need to constrain the class to the
      subclass that you require. The difference between this and the examples
      above is that you are constraining the actual class, rather than a field
      of a class.
    </para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="constrainDiag3.gif" />
      </imageobject>
    </mediaobject>
  </chapter>

</book>


</set>
