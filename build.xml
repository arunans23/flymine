<project name="flymine" default="help" basedir=".">
  <description>FlyMine build file</description>

  <!-- SETUP TARGETS -->

  <!-- Property setup targets -->
  <!-- buildtime and runtime settings -->
  <property name="build.properties.local" value="${user.home}/build.properties.${ant.project.name}" />

  <property file="${build.properties.local}"/>
  <property file="build.properties"/>

  <property name="runtime.properties.local" value="${user.home}/intermine.properties" />

  <!-- used by build-model.xml -->
  <property name="namespace" value="http://www.flymine.org/model"/>

  <!-- used by build-model.xml -->
  <property name="packagename" value="org.flymine.model"/>

  <property name="intermine.dist.path" location="../intermine/dist"/>
  <property name="intermine.jar.path" location="${intermine.dist.path}/intermine-all.jar"/>
  <property name="intermine.war.path" location="${intermine.dist.path}/webapp/intermine.war"/>

  <!-- libraries and binaries -->
  <property name="lib" location="lib"/>
  <property name="bin" location="bin"/>

  <!-- source directories -->
  <property name="src" location="src"/>
  <property name="src.java" location="${src}/java"/>
  <property name="src.test" location="${src}/test"/>

  <!-- resources directory -->
  <property name="resources" location="resources"/>

  <!-- model directory -->
  <property name="model" location="model"/>

  <!-- build directories -->
  <property name="build" location="build"/>
  <property name="build.java" location="${build}/java"/>
  <property name="build.resources" location="${build}/resources"/>
  <property name="build.resources.test" location="${build.resources}/test"/>
  <property name="build.model" location="${build}/model" />
  <property name="build.src.java" location="${build}/javasrc"/>
  <property name="build.src.test" location="${build}/testsrc"/>
  <property name="build.javadoc" location="${build}/api"/>
  <property name="build.webapp" location="${build}/webapp"/>
  <property name="build.tmp" location="${build}/tmp"/>
  <property name="build.webapp.lib" location="${build.webapp}/intermine/WEB-INF/lib"/>

  <!-- results directories -->
  <property name="results"  location="results"/>
  <property name="results.junit"  location="${results}/junit"/>
  <property name="results.checkstyle"  location="${results}/checkstyle"/>
  <property name="results.antdoc" location="${results}/antdoc"/>

  <!-- distributable directories -->
  <property name="dist"  location="dist"/>
  <property name="dist.www"  location="${dist}/www"/>
  <property name="dist.webapp"  location="${dist}/webapp"/>
  <property name="dist.javadoc"  location="${dist.www}/api"/>

  <!-- set up library filesets -->

  <!-- Ant tasks and unit testing stuff -->
  <patternset id="lib.build">
    <include name="AntDoc*.jar"/>
    <include name="junit*.jar"/>
    <include name="catalina-ant.jar"/>
    <include name="biojava*.jar"/>
  </patternset>

  <!-- Checkstyle library -->
  <patternset id="lib.checkstyle">
    <include name="checkstyle*.jar"/>
  </patternset>

  <!-- Webapp libraries -->
  <patternset id="lib.webapp">
    <include name="biojava*.jar"/>
  </patternset>

  <!-- The FlyMine jar file -->
  <patternset id="lib.flymine">
    <include name="flymine.jar"/>
  </patternset>

  <patternset id="flymine.jar.patternset">
    <include name="flymine.jar"/>
  </patternset>


  <!-- set the classpath for the build - basically everything in lib -->
  <path id="base.class.path">
    <pathelement path="${build.java}"/>
    <pathelement path="${build.resources}"/>
    <fileset dir="${lib}">
      <patternset refid="lib.build"/>
    </fileset>
    <fileset dir="${intermine.dist.path}">
      <include name="intermine*.jar" />
    </fileset>
  </path>

  <path id="webapp.class.path">
    <path refid="base.class.path"/>
    <fileset dir="${build.webapp.lib}">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${dist}">
      <include name="intermine*.jar" />
    </fileset>
  </path>

  <path id="checkstyle.class.path">
    <fileset dir="${lib}">
      <patternset refid="lib.checkstyle"/>
    </fileset>
  </path>

  <path id="models.class.path">
    <path refid="base.class.path"/>
    <fileset dir="${dist}">
      <include name="intermine*.jar" />
    </fileset>
    <pathelement path="${build.resources.test}"/>
    <pathelement location="${build.model}/acedb"/>
    <pathelement location="${build.model}/mage"/>
    <pathelement location="${build.model}/chado"/>
    <pathelement location="${build.model}/so"/>
    <pathelement location="${build.model}/genomic"/>
    <pathelement location="${build.model}/ensembl"/>
    <pathelement location="${build.model}/rnai"/>
    <pathelement location="${build.model}/orthologue"/>
    <pathelement location="${build.model}/phenotype"/>
    <pathelement location="${build.model}/fulldata"/>
    <pathelement location="${build.model}/psi"/>
    <pathelement location="${build.model}/go"/>
    <pathelement location="${build.model}/taxonomy"/>
  </path>

  <path id="project.class.path">
    <path refid="base.class.path"/>
    <fileset dir="${dist}">
      <include name="intermine*.jar" />
    </fileset>
  </path>


  <!-- Initialisation targets -->
  <target name="prepare">
    <tstamp>
      <format property="YEAR" pattern="yyyy"/>
      <format property="DTSTAMP" pattern="yyyyMMddHHmm"/>
    </tstamp>

    <mkdir dir="${dist}"/>
    <mkdir dir="${dist.webapp}"/>
    <mkdir dir="${dist.javadoc}"/>

    <mkdir dir="${build}"/>
    <mkdir dir="${build.java}"/>
    <mkdir dir="${build.resources}"/>
    <mkdir dir="${build.model}" />
    <mkdir dir="${build.model}/fulldata" />
    <mkdir dir="${build.src.java}"/>
    <mkdir dir="${build.src.test}"/>
    <mkdir dir="${build.javadoc}"/>
    <mkdir dir="${build.tmp}"/>
    <mkdir dir="${build.webapp}/intermine"/>

    <mkdir dir="${results}"/>
    <mkdir dir="${results.junit}"/>
    <mkdir dir="${results.checkstyle}"/>
    <mkdir dir="${results.antdoc}"/>

    <!-- overwrite default.intermine.properties -->
    <copy todir="${build.resources}" file="${resources}/runtime/default.intermine.properties" overwrite="true"/>
    <copy file="${runtime.properties.local}" tofile="${build.resources}/intermine.properties"/>
    <copy todir="${build.resources}">
      <fileset dir="${resources}/runtime" />
    </copy>
  </target>

  <target name="prepare-compile-java" depends="prepare">
    <copy todir="${build.src.java}">
      <fileset dir="${src.java}">
        <include name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="prepare-test" depends="prepare">
    <mkdir dir="${build.resources.test}" />

    <copy todir="${build.resources}" flatten="true" includeEmptyDirs="false">
      <fileset dir="${resources}/test/">
        <include name="**/*"/>
        <exclude name="default.intermine.properties"/>
      </fileset>
    </copy>

    <!-- overwrite default.intermine.properties with test properties -->
    <copy todir="${build.resources}" file="${resources}/test/default.intermine.properties" overwrite="true"/>
  </target>

  <target name="prepare-dist">
    <mkdir dir="${dist}"/>
    <mkdir dir="${dist.webapp}"/>
    <mkdir dir="${dist.javadoc}"/>
  </target>

  <!-- Help -->
  <target name="help" description="Displays user targets">
    <echo message=""/>
    <echo message="FlyMine build file - available targets are:"/>
    <echo message=""/>
    <echo message="clean                  --> cleans up the directory"/>
    <echo message=""/>
    <echo message="See 'ant -projecthelp' for full target list"/>
  </target>

  <target name="new-intermine-jar" depends="prepare">
    <uptodate property="old.intermine.jar.build-model" srcfile="${intermine.jar.path}" targetfile="${build}/build-model.xml"/>
    <uptodate property="old.intermine.jar.build-webapp" srcfile="${intermine.jar.path}" targetfile="${build}/build-webapp.xml"/>
    <condition property="old.intermine.jar">
      <and>
        <isset property="old.intermine.jar.build-model"/>
        <isset property="old.intermine.jar.build-webapp"/>
      </and>
    </condition>
  </target>

  <target name="prepare-build-model" depends="new-intermine-jar" unless="old.intermine.jar">
    <unzip src="${intermine.jar.path}" dest="${build}">
      <patternset>
        <include name="build-model.xml"/>
        <include name="build-webapp.xml"/>
      </patternset>
    </unzip>
    <touch file="${build}/build-model.xml"/>
    <touch file="${build}/build-webapp.xml"/>
  </target>

  <!-- set the copy.intermine.war property if the flymine.war file is older
       than the intermine.war or if the JARs from intermine.war haven't been
       expanded into ${build.webapp}/intermine -->
  <target name="new-intermine-war" depends="prepare">
    <uptodate property="new.intermine.war"
              targetfile="${intermine.war.path}">
      <srcfiles dir="${dist.webapp}" includes="flymine.war"/>
    </uptodate>
    <available property="intermine.libs.available"
               file="${build.webapp}/intermine/WEB-INF/lib/intermine-all.jar"/>
    <condition property="copy.intermine.war">
      <or>
        <isset property="new.intermine.war"/>
        <not>
          <isset property="intermine.libs.available"/>
        </not>
      </or>
    </condition>
  </target>

  <target name="prepare-build-webapp" depends="new-intermine-war" if="copy.intermine.war"
          description="Prepare the build environment for building the production webapp">
    <copy file="${intermine.war.path}" tofile="${dist.webapp}/flymine.war" verbose="true"/>
    <unwar src="${intermine.war.path}" dest="${build.webapp}/intermine">
      <patternset>
        <include name="WEB-INF/lib/*.jar"/>
        <include name="WEB-INF/struts-config.xml"/>
      </patternset>
    </unwar>
  </target>



  <!-- ============================================================================== -->


  <!-- ========== MODEL GENERATION/MERGING TARGETS - ORGANISED BY SOURCE ========== -->

  <!-- ENSEMBL MODEL GENERATION -->

  <!-- convert ensembl zargo to InterMine model -->
  <target name="convert-ensembl" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-zargo" inheritRefs="true">
      <property name="model.src" value="${model}/ensembl"/>
      <property name="model.name" value="ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- convert ensembl model to OWL -->
  <target name="ensembl-to-owl" depends="convert-ensembl">
    <java classname="org.intermine.ontology.InterMine2Owl" fork="true" failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/ensembl/ensembl_model.xml" />
      <arg value="${build.model}/ensembl/ensembl.n3" />
      <arg value="N3" />
    </java>
  </target>

  <!-- merge the ensembl owl model with the current genomic model owl -->
  <target name="merge-ensembl-model" depends="prepare-genomic-model, ensembl-to-owl">
    <copy file="${model}/ensembl/ensembl_merge_spec.n3" todir="${build.model}/ensembl/"/>

    <!-- combine the ensembl_merge_spec with current genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
       maxmemory="800m" failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/ensembl/ensembl_merge_spec.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="N3" />
      <arg value="n" />
    </java>

    <!-- merge ensembl model with target genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m" failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/ensembl/ensembl.n3" />
      <arg value="http://www.flymine.org/model/ensembl#" />
      <arg value="N3" />
      <arg value="y" />
    </java>
  </target>


  <!-- CHADO MODEL GENERATION -->

  <!-- convert chado zargo to InterMine model -->
  <target name="convert-chado" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-zargo" inheritRefs="true">
      <property name="model.src" value="${model}/chado"/>
      <property name="model.name" value="chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

   <!-- convert chado model to OWL -->
   <target name="chado-to-owl" depends="convert-chado">
    <java classname="org.intermine.ontology.InterMine2Owl" fork="true" failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/chado/chado_model.xml" />
      <arg value="${build.model}/chado/chado.n3" />
      <arg value="N3" />
    </java>
  </target>

  <!-- merge the chado owl model with the current genomic model owl -->
  <target name="merge-chado-model" depends="prepare-genomic-model, chado-to-owl">
    <copy file="${model}/chado/chado_merge_spec.n3" todir="${build.model}/chado/"/>

    <!-- combine the chado merge_spec with current genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m"  failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/chado/chado_merge_spec.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="N3" />
      <arg value="n" />
    </java>

    <!-- merge chado model with target genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m"  failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/chado/chado.n3" />
      <arg value="http://www.flymine.org/model/chado#" />
      <arg value="N3" />
      <arg value="y" />
    </java>
  </target>


  <!-- MAGE MODEL GENERATION -->

  <!-- convert MAGE-OM xmi to InterMine model -->
  <target name="convert-mage" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-xmi" inheritRefs="true">
      <property name="model.src" value="${model}/mage"/>
      <property name="model.name" value="mage"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

   <!-- convert MAGE-OM to OWL -->
   <target name="mage-to-owl" depends="convert-mage">
    <java classname="org.intermine.ontology.InterMine2Owl" fork="true" failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/mage/mage_model.xml" />
      <arg value="${build.model}/mage/mage.n3" />
      <arg value="N3" />
    </java>
  </target>


  <!-- RNAi MODEL GENERATION -->

  <!-- convert RNAi OWL to InterMine model -->
  <target name="convert-rnai" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-owl" inheritRefs="true">
      <property name="model.name" value="rnai"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- merge rnai model with current genomic model owl -->
  <target name="merge-rnai-model" depends="prepare-genomic-model">
    <copy file="${model}/rnai/rnai_merge_spec.n3" todir="${build.model}/rnai/"/>
    <copy file="${model}/rnai/rnai.n3" todir="${build.model}/rnai/"/>

    <!-- combine the rnai merge_spec with current genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m"  failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/rnai/rnai_merge_spec.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="N3" />
      <arg value="n" />
    </java>

    <!-- merge rnai model with target genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m"  failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/rnai/rnai.n3" />
      <arg value="http://www.flymine.org/model/rnai#" />
      <arg value="N3" />
      <arg value="n" />
    </java>
  </target>

  <!-- SEQUENCE ONTOLOGY MODEL GENERATION -->

  <!-- convert Sequence Ontology (SO) to OWL -->
  <target name="so-to-owl" depends="prepare-build-model">
    <mkdir dir="${build.model}/so" />
    <copy file="${model}/so/sofa.ontology" todir="${build.model}/so/"/>
    <java classname="org.intermine.ontology.Dag2Owl" fork="true" failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/so/sofa.ontology" />
      <arg value="${build.model}/so/sofa.n3" />
      <arg value="http://www.flymine.org/model/so#" />
    </java>
  </target>

  <!-- merge so model with current genomic model owl -->
  <target name="merge-so-model" depends="prepare-genomic-model, so-to-owl">
    <copy file="${model}/so/so_merge_spec.n3" todir="${build.model}/so/"/>

    <!-- combine the so merge_spec with current genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m"  failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/so/so_merge_spec.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="N3" />
      <arg value="n" />
    </java>

    <!-- merge so model with target genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m"  failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/so/sofa.n3" />
      <arg value="http://www.flymine.org/model/so#" />
      <arg value="N3" />
      <arg value="n" />
    </java>

  </target>


  <!-- GENE ONTOLOGY MODEL GENERATION -->

  <!-- merge go model with current genomic model owl -->
  <target name="merge-go-model" depends="prepare-genomic-model">
    <copy file="${model}/go/go_merge_spec.n3" todir="${build.model}/go/"/>

    <!-- combine the go merge_spec with current genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m"  failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/go/go_merge_spec.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="N3" />
      <arg value="n" />
    </java>

  </target>


  <!-- ORTHOLOGUE MODEL GENERATION -->

  <!-- merge orthologue model with current genomic model owl -->
  <target name="merge-orthologue-model" depends="prepare-genomic-model">
    <copy file="${model}/orthologue/orthologue.n3" todir="${build.model}/orthologue/"/>

    <!-- merge orthologue model with target genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m"  failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/orthologue/orthologue.n3" />
      <arg value="http://www.flymine.org/model/orthologue#" />
      <arg value="N3" />
      <arg value="y" />
    </java>

  </target>


  <!-- PSI MODEL GENERATION -->

  <!-- convert PSI-DEV XML-Schema to OWL -->
  <target name="psi-to-owl" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-model-from-xmlschema" inheritRefs="true">
      <property name="model.name" value="psi"/>
      <property name="pkg" value="org.flymine.model.psi"/>
      <property name="model.src" value="${model}/psi"/>
      <property name="build.model.dir" value="${build.model}/psi"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>    

     <java classname="org.intermine.ontology.InterMine2Owl" fork="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/psi/psi_model.xml" />
      <arg value="${build.model}/psi/psi.n3" />
      <arg value="N3" />
    </java>
  </target>

  <!-- merge psi model with current genomic model owl -->
  <target name="merge-psi-model" depends="prepare-genomic-model, psi-to-owl">
    <copy file="${model}/psi/psi_merge_spec.n3" todir="${build.model}/psi/"/>

    <!-- combine the psi merge_spec with current genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m" >
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/psi/psi_merge_spec.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="N3" />
      <arg value="n" />
    </java>

    <!-- merge psi model with target genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m" >
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/psi/psi.n3" />
      <arg value="http://www.flymine.org/model/psi#" />
      <arg value="N3" />
      <arg value="y" />
    </java>
  </target>
 

  <!-- PHENOTYPE MODEL GENERATION -->
  <target name="merge-phenotype-model" depends="prepare-genomic-model">
    <copy file="${model}/phenotype/phenotype_merge_spec.n3" todir="${build.model}/phenotype"/>
    <java classname="org.intermine.ontology.MergeOwl" fork="true" maxmemory="800m" failonerror="true">
      <classpath refid="models.class.path"/>
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#"/>
      <arg value="${build.model}/phenotype/phenotype_merge_spec.n3" />
      <arg value="http://www.flymine.org/model/genomic#"/>
      <arg value="N3"/>
      <arg value="n" />
    </java>
  </target>

  <!-- create merged model from all source OWL ontologies -->
  <target name="create-production-model" depends="remove-genomic, prepare-build-model,
       merge-orthologue-model, merge-psi-model, merge-rnai-model, merge-ensembl-model, 
       merge-phenotype-model, merge-go-model, merge-so-model">
    <antcall target="create-genomic-model"/>
  </target>

  <!-- create genomic InterMine model from currently merged OWL ontologies -->
  <target name="create-genomic-model" depends="prepare-genomic-model, prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-owl" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- create java objects for the genomic model -->
  <target name="compile-genomic-model" depends="create-production-model">
  <!--<target name="compile-genomic-model">-->
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="model.src" value="${model}/genomic"/>
    </ant>
  </target>

  <target name="jar-genomic" depends="prepare, create-genomic-model"
          description="create a jar of the genomic model">
    <ant antfile="${build}/build-model.xml" target="jar" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="model.src" value="${model}/genomic"/>
    </ant>
  </target>

  <!-- if genomic.n3 not copied into build directory then copy it -->
  <target name="prepare-genomic-model" depends="prepare">
    <copy file="${model}/genomic/genomic.n3" todir="${build.model}/genomic/"/>
  </target>

  <!-- remove build/model/genomic/genomic.n3 -->
  <target name="remove-genomic">
    <delete file="${build.model}/genomic/genomic.n3"/>
  </target>


  <!-- ========== DATA LOADING PIPELINE - ORGANISED BY SOURCE ========== -->


  <!-- ENSEMBL DROSOPHILA PIPELINE -->

  <!-- build ensembl drosophila src items database -->
    <target name="build-db-ensembl-dros-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-src-items"/>
      <property name="objectstore.name" value="os.ensembl-dros-src-items-std"/>
    </ant>
  </target>

  <!-- retrieve ensembl drosophila data -->
  <target name="retrieve-ensembl-drosophila" depends="convert-ensembl, build-db-ensembl-dros-src-items">
    <taskdef name="retrieve-ensembl" classname="org.intermine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-ensembl database="db.ensembl-drosophila" model="ensembl" osName="osw.ensembl-dros-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-src-items"/>
    </ant>
  </target>

  <!-- build ensembl drosophila tgt items database -->
  <target name="build-db-ensembl-dros-tgt-items" depends="convert-ensembl">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-dros-tgt-items-std"/>
    </ant>
  </target>

 <!-- translate ensembl drosophila -->
 <target name="translate-ensembl-drosophila" depends="compile-ensembl-java, build-db-ensembl-dros-tgt-items">
    <java classname="org.flymine.dataconversion.EnsemblDataTranslator" fork="true"
      maxmemory="800m"  failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="os.ensembl-dros-src-items" />
      <arg value="osw.ensembl-dros-tgt-items" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="N3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="DM" />
    </java>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-tgt-items"/>
    </ant>

    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
       <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.ensembl-dros-tgt-items"/>
  </target>

  <!-- Load data from ensembl-dros-tgt-items into production -->
  <target name="load-ensembl-drosophila" depends="prepare-build-model">
    <taskdef name="load-dros" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-dros integrationWriter="integration.production" source="os.ensembl-dros-translated" sourceName="ensembl-dros"/>
  </target>


  <!-- ENSEMBL ANOPHELES PIPELINE -->

  <!-- build ensembl anopheles src items database -->
    <target name="build-db-ensembl-anoph-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-src-items"/>
      <property name="objectstore.name" value="os.ensembl-anoph-src-items-std"/>
    </ant>
  </target>

  <!-- retrieve ensembl anopheles data -->
  <target name="retrieve-ensembl-anopheles" depends="convert-ensembl, build-db-ensembl-anoph-src-items">
    <taskdef name="retrieve-ensembl" classname="org.intermine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-ensembl database="db.ensembl-anopheles" model="ensembl" osName="osw.ensembl-anoph-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-src-items"/>
    </ant>
  </target>

  <!-- build ensembl anopheles tgt items database -->
  <target name="build-db-ensembl-anoph-tgt-items" depends="convert-ensembl">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-anoph-tgt-items-std"/>
    </ant>
  </target>

  <!-- translate ensembl anopheles -->
  <target name="translate-ensembl-anopheles" depends="compile-ensembl-java, build-db-ensembl-anoph-tgt-items">
    <java classname="org.flymine.dataconversion.EnsemblDataTranslator" fork="true"
      maxmemory="800m"  failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="os.ensembl-anoph-src-items" />
      <arg value="osw.ensembl-anoph-tgt-items" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="N3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="AG" />
    </java>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-tgt-items"/>
    </ant>

    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
       <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.ensembl-anoph-tgt-items"/>
  </target>

  <!-- Load data from ensembl anopheles tgt items into production -->
  <target name="load-ensembl-anopheles" depends="prepare-build-model">
    <taskdef name="load-anoph" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-anoph integrationWriter="integration.production" source="os.ensembl-anoph-translated" sourceName="ensembl-anoph"/>
  </target>


  <!-- CHADO PIPELINE -->

  <!-- Build Chado src items database -->
  <target name="build-db-chado-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.chado-src-items"/>
      <property name="objectstore.name" value="os.chado-src-items-std"/>
    </ant>
  </target>

  <!-- Retrieve Chado data -->
  <target name="retrieve-chado" depends="convert-chado, build-db-chado-src-items">
    <taskdef name="retrieve-chado" classname="org.intermine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-chado database="db.chado" model="chado" osName="osw.chado-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.chado-src-items"/>
    </ant>
  </target>

  <!-- Build Chado target items database -->
  <target name="build-db-chado-target-items" depends="convert-chado">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.chado-tgt-items"/>
      <property name="objectstore.name" value="os.chado-tgt-items-std"/>
    </ant>
  </target>

  <!-- Translate Chado data -->
  <target name="translate-chado" depends="compile-chado-java, build-db-chado-target-items">
    <java classname="org.flymine.dataconversion.ChadoDataTranslator" fork="true"
      maxmemory="800m"  failonerror="true">
      <!-- <jvmarg value="-Xrunjmp" /> -->
      <classpath refid="models.class.path" />
      <arg value="os.chado-src-items" />
      <arg value="osw.chado-tgt-items" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="N3" />
      <arg value="http://www.flymine.org/model/genomic#" />
    </java>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.chado-tgt-items"/>
    </ant>

    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
       <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.chado-tgt-items"/>
  </target>

  <!-- Load data from chado tgt items into production -->
  <target name="load-chado" depends="prepare-build-model">
    <taskdef name="load-chado" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-chado integrationWriter="integration.production" source="os.chado-translated" sourceName="chado"/>
  </target>


  <!-- ENSEMBL ORTHOLOGUES PIPELINE -->

  <!-- retrieve ensembl orthologue/paralogue data into common tgt items database-->
  <target name="retrieve-orthologues-ensembl" depends="prepare-build-model, compile-orthologue-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-orthologue-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.OrthologueConverter"
                  osName="osw.ensembl-orthologue-tgt-items"
                  param1="AG"
                  param2="DM">
       <fileset dir="/shared/data/orthologues/ensembl" includes="/orthologues.AG-DM"/>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
    </ant>

    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
       <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.common-tgt-items"/>
  </target>

  <!-- Load data from ensembl orthologues into production -->
  <target name="load-orthologues-ensembl">
    <taskdef name="load-orthologue" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-orthologue integrationWriter="integration.production" source="os.ensembl-orthologue-translated" sourceName="orthologue-ensembl"/>
  </target>


  <!-- INPARANOID ORTHOLOGUES PIPELINE -->

  <!-- retrieve inparanoid orthologue data into common tgt items database -->
  <target name="retrieve-orthologues-inparanoid" depends="prepare-build-model, compile-orthologue-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.inparanoid-orthologue-tgt-items-std"/>
    </ant>
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.InparanoidConverter"
                  osName="osw.inparanoid-orthologue-tgt-items">
      <fileset dir="/shared/data/orthologues/inparanoid" includes="orthologues.*"/>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
    </ant>

    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
       <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.common-tgt-items"/>
  </target>

  <!-- Load data from inparanoid orthologues into production -->
  <target name="load-orthologues-inparanoid">
    <taskdef name="load-orthologue" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-orthologue integrationWriter="integration.production" source="os.inparanoid-orthologue-translated" sourceName="orthologue-inparanoid"/>
  </target>


  <!-- RNAi PIPELINE -->

  <!-- Build RNAi src items database -->

  <!-- retrieve rnai data into src items database -->
  <target name="retrieve-rnai" depends="compile-rnai-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.rnai-src-items-std"/>
    </ant>
    
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.RNAiConverter"
                  osName="osw.rnai-src-items">
      <fileset dir="/shared/data/RNAi" includes="*Set.txt"/>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
    </ant>
  </target>

 <target name="translate-rnai" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.rnai-tgt-items-std"/>
    </ant>
    <java classname="org.intermine.dataconversion.DataTranslator" fork="true"
      maxmemory="800m"  failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="os.rnai-src-items" />
      <arg value="osw.rnai-tgt-items" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="N3" />
      <arg value="http://www.flymine.org/model/genomic#" />
    </java>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
    </ant>

    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
       <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.common-tgt-items"/>
  </target>

  <!-- Load data from rnai-tgt-items into production -->
  <target name="load-rnai">
    <taskdef name="load-rnai" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-rnai integrationWriter="integration.production" source="os.rnai-translated" sourceName="rnai"/>
  </target>

  <!-- load RNAI into production -->
  <target name="build-rnai-production" depends="retrieve-rnai, translate-rnai, load-rnai"/>


  <!-- PHENOTYPE PIPELINE -->

  <!-- load phenotype data -->
  <target name="retrieve-phenotype" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.phenotype-tgt-items-std"/>
    </ant>
    <taskdef name="retrieve-phenotype" classname="org.intermine.task.DagConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-phenotype file="${model}/phenotype/phenotype.ontology" osName="osw.phenotype-tgt-items" termClass="http://www.flymine.org/model/genomic#Phenotype" relationClass="http://www.flymine.org/model/genomic#DagRelation"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
    </ant>

    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
       <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.common-tgt-items"/>
  </target>


  <target name="load-phenotype">
    <taskdef name="load-phenotype" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-phenotype integrationWriter="integration.production" source="os.phenotype-translated" sourceName="phenotype"/>
  </target>

  <target name="build-phenotype-production" depends="retrieve-phenotype, load-phenotype"/>

  <!-- PSI PIPELINE -->

  <!-- load psi dag data -->
  <target name="retrieve-psi-dag" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.psi-dag-tgt-items-std"/>
    </ant>
    <taskdef name="retrieve-psi-dag" classname="org.intermine.task.DagConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-psi-dag file="${model}/psi/psi-mi.dag" osName="osw.psi-dag-tgt-items" termClass="http://www.flymine.org/model/genomic#ProteinInteractionTerm" relationClass="http://www.flymine.org/model/genomic#DagRelation"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
    </ant>

    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
       <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.common-tgt-items"/>
  </target>

  <target name="load-psi-dag">
    <taskdef name="load-psi-dag" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-psi-dag integrationWriter="integration.production" source="os.psi-dag-translated" sourceName="psi-dag"/>
  </target>

  <target name="retrieve-psi" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.psi-src-items-std"/>
    </ant>

    <taskdef name="convert-xml" classname="org.intermine.task.XmlConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    
    <convert-xml schema="${model}/psi/psi.xsd"
                  model="psi"
                  osName="osw.psi-src-items">
      <fileset dir="/shared/data/ProteinInteractions">
        <include name="caeel*.xml"/>
        <include name="drome*.xml"/>
        <include name="droso*.xml"/>
      </fileset>
    </convert-xml>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
    </ant>

    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
       <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.common-src-items"/>
  </target>

 <target name="translate-psi" depends="prepare-build-model, compile-psi-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.psi-tgt-items-std"/>
    </ant>
    <java classname="org.flymine.dataconversion.PsiDataTranslator" fork="true"
      maxmemory="800m"  failonerror="true">
      <classpath refid="models.class.path" />
      <arg value="os.psi-src-items" />
      <arg value="osw.psi-tgt-items" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="N3" />
      <arg value="http://www.flymine.org/model/genomic#" />
    </java>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
    </ant>

    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
       <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.common-tgt-items"/>
  </target>

  <target name="load-psi">
    <taskdef name="load-psi" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-psi integrationWriter="integration.production" source="os.psi-translated" sourceName="psi" ignoreDuplicates="true"/>
  </target>

  <target name="build-psi-production" depends="retrieve-psi-dag, load-psi-dag, retrieve-psi, translate-psi, load-psi"/>

  <!-- TAXONOMY PIPELINE -->

  <target name="retrieve-taxonomy" depends="prepare-build-model, compile-taxonomy-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="taxonomy"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.taxonomy-tgt-items-std"/>
    </ant>
    
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.TaxonomyConverter"
                  osName="osw.taxonomy-tgt-items">
      <fileset dir="/shared/data/taxonomy" includes="taxonomy.dat"/>
    </convert-file>
    
    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.common-tgt-items"/>
  </target>

  <target name="load-taxonomy">
    <taskdef name="load-taxonomy" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-taxonomy integrationWriter="integration.production" source="os.taxonomy-translated" sourceName="taxonomy"/>
  </target>

  <target name="build-taxonomy-production" depends="retrieve-taxonomy, load-taxonomy"/>

  <!-- GO PIPELINE -->

  <!-- load go dag data -->
  <target name="retrieve-go-dag" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.go-dag-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-go-dag" classname="org.intermine.task.DagConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-go-dag file="${model}/go/go-combined.ontology" osName="osw.go-dag-tgt-items" termClass="http://www.flymine.org/model/genomic#GOTerm" relationClass="http://www.flymine.org/model/genomic#DagRelation"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
    </ant>

    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
       <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.common-tgt-items"/>
  </target>

  <target name="load-go-dag">
    <taskdef name="load-go-dag" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-go-dag integrationWriter="integration.production" source="os.go-dag-translated" sourceName="go"/>
  </target>

  <target name="retrieve-go-annotation" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.go-dag-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file osName="osw.go-annotation-tgt-items"
                  clsName="org.flymine.dataconversion.GoConverter">
      <fileset dir="/shared/data/go-annotation">
        <include name="gene_association.*"/>
      </fileset>
    </convert-file>
    
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
    </ant>

    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
       <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.common-tgt-items"/>
  </target>

  <target name="load-go-annotation">
    <taskdef name="load-go-annotation" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-go-annotation integrationWriter="integration.production"
                        source="os.go-annotation-translated" 
                        sourceName="goa"
                        ignoreDuplicates="true"/>
  </target>

  <target name="build-go-production" depends="retrieve-go-dag, load-go-dag, retrieve-go-annotation, load-go-annotation"/>

  <!-- LOAD STATIC DATA -->

  <!-- Load organism XML data into production database -->
  <target name="load-static" depends="prepare-build-model">
    <taskdef
      name="load-xml-data"
      classname="org.intermine.dataloader.XmlDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-xml-data integrationWriter="integration.production" xmlFile="/shared/data/static/databases.xml" sourceName="static">
      <classpath refid="models.class.path"/>
    </load-xml-data>
    <load-xml-data integrationWriter="integration.production" xmlFile="/shared/data/static/organisms.xml" sourceName="static">
      <classpath refid="models.class.path"/>
    </load-xml-data>
    <load-xml-data integrationWriter="integration.production" xmlFile="/shared/data/static/publications.xml" sourceName="static">
      <classpath refid="models.class.path"/>
    </load-xml-data>
    <load-xml-data integrationWriter="integration.production" xmlFile="/shared/data/static/rnai-codes.xml" sourceName="static">
      <classpath refid="models.class.path"/>
    </load-xml-data>
  </target>


  <!-- BUILD PRODUCTION DATABASE -->

  <!-- Build genomic model database to hold production data -->
  <target name="build-db-production" depends="create-genomic-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.production"/>
      <property name="objectstore.name" value="os.production"/>
    </ant>
  </target>

  <target name="create-indexes-production" depends="build-db-production">
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <property name="model.src" value="${model}/genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.production"/>
      <property name="objectstore.name" value="os.production"/>
    </ant>
  </target>


  <!-- LOAD PRODUCTION DATA -->

  <!-- Translates and loads ensembl drosophila data -->
  <target name="build-ensembl-drosophila-production" depends="retrieve-ensembl-drosophila,translate-ensembl-drosophila,load-ensembl-drosophila"/>

  <!-- Translates and loads ensembl anopheles data -->
  <target name="build-ensembl-anopheles-production" depends="retrieve-ensembl-anopheles,translate-ensembl-anopheles,load-ensembl-anopheles"/>

  <!-- Retrieve and load orthologue data -->
  <target name="build-orthologues-production" depends="retrieve-orthologues-inparanoid,load-orthologues-inparanoid,retrieve-orthologues-ensembl,load-orthologues-ensembl"/>

  <!-- build production database - assumes that ensembl databases already retrieved -->
  <target name="production-build" depends="create-production-model, compile-genomic-model, jar-genomic,
                                           build-db-production,create-indexes-production,
                                           load-static,
                                           build-psi-production,
                                           build-orthologues-production,
                                           build-rnai-production,
                                           build-phenotype-production,
                                           build-go-production,
                                           build-ensembl-drosophila-production,
                                           build-ensembl-anopheles-production">

    <!-- analyse database -->
    <taskdef name="analyse-db" classname="org.intermine.task.AnalyseDbTask">
       <classpath refid="models.class.path"/>
    </taskdef>

    <analyse-db database="db.production" full="true"/>

    <!-- grant 'flymine' user select permission on db -->
    <taskdef name="grant" classname="org.intermine.task.GrantTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <grant database="db.production" user="PUBLIC" perm="SELECT"/>

  </target>


  <target name="grant-temp" depends="prepare">
    <taskdef name="grant" classname="org.intermine.task.GrantTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <grant database="db.production" user="PUBLIC" perm="SELECT"/>
  </target>


  <!-- ========== POST PROCESSING TARGETS ========== -->

  <target name="compute-mappings" depends="prepare, compile-genomic-java">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <mappings alias="osw.production" type="mappings"/>
  </target>


  <!-- ========== COMPILATION AND TESTING TARGETS ========== -->

  <!-- build genomic test database -->
    <target name="build-db-genomic-test" depends="prepare-build-model, prepare-test">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.genomic-test"/>
      <property name="objectstore.name" value="os.genomic-test"/>
    </ant>
  </target>

    <target name="build-db-fulldatatest" depends="prepare-build-model, prepare-test">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.fulldatatest"/>
      <property name="objectstore.name" value="os.fulldatatest"/>
    </ant>
  </target>

  <target name="compile-ensembl-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <property name="model.src" value="${model}/ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="ensembl-test" depends="prepare-test, convert-ensembl, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <property name="model.src" value="${model}/ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-chado-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <property name="model.src" value="${model}/chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="chado-test" depends="prepare-build-model, convert-chado">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <property name="model.src" value="${model}/chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-rnai-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="rnai"/>
      <property name="model.src" value="${model}/rnai"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="rnai-test" depends="prepare-build-model, prepare-test, convert-rnai">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="rnai"/>
      <property name="model.src" value="${model}/rnai"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-orthologue-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="orthologue"/>
      <property name="model.src" value="${model}/orthologue"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="orthologue-test" depends ="prepare-build-model, prepare-test, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="orthologue"/>
      <property name="model.src" value="${model}/orthologue"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-go-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="go"/>
      <property name="model.src" value="${model}/go"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="go-test" depends ="prepare-build-model, prepare-test, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="go"/>
      <property name="model.src" value="${model}/go"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-mage-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <property name="model.src" value="${model}/mage"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="mage-test" depends="prepare-build-model, prepare-test, convert-mage">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <property name="model.src" value="${model}/mage"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-psi-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="psi"/>
      <property name="model.src" value="${model}/psi"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="psi-test" depends="prepare-test, prepare-build-model, build-db-fulldatatest">
    <copy file="${model}/psi/psi.xsd" toDir="${build.model}/psi"/>
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="psi"/>
      <property name="model.src" value="${model}/psi"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-taxonomy-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="taxonomy"/>
      <property name="model.src" value="${model}/taxonomy"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="taxonomy-test" depends="prepare-build-model, compile-taxonomy-java, prepare-test, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="taxonomy"/>
      <property name="model.src" value="${model}/taxonomy"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <property name="model.src" value="${model}/genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-genomic-web-java" depends="jar-flymine-java, prepare-build-webapp">
    <ant antfile="${build}/build-model.xml" target="compile-webapp-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <property name="model.src" value="${model}/genomic"/>
      <reference torefid="class.path" refid="webapp.class.path"/>
    </ant>
  </target>

  <target name="compile-flymine-java" 
          depends="prepare-compile-java, prepare-build-model, jar-genomic">
    <javac destdir="${build.java}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="project.class.path"/>
      <src path="${build.src.java}"/>
      <include name="org/flymine/**"/>
    </javac>
  </target>

  <target name="jar-flymine-java" depends="compile-flymine-java">
    <jar destfile="${dist}/flymine.jar">
      <fileset dir="${build.java}"/>
    </jar>
  </target>

  <target name="genomic-test" depends ="prepare-build-model, prepare-test">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <property name="model.src" value="${model}/genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
    <antcall target="test-report"/>
  </target>

  <target name="test-models-inc"
          depends="mage-test, ensembl-test, rnai-test, psi-test, orthologue-test, go-test, taxonomy-test">
    <antcall target="test-report"/>
  </target>

  <target name="test-models-full"
          depends="create-production-model, compile-genomic-model, test-models-inc">
    <antcall target="test-report"/>
  </target>

  <target name="fulltest" depends="clean, test-models-full"
          description="do an incremental test and fail if there are any errors">
    <fail message="Some unit tests have failed" if="junit.failure"/>
    <fail message="Some files violate FlyMine coding standards" if="checkstyle.failure"/>
  </target>


  <target name="test-report" depends="prepare"
          description="generate a test report for all the unit tests" >
    <junitreport todir="${results.junit}">
      <fileset dir="${results.junit}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${results.junit}"/>
    </junitreport>
  </target>

  <!-- Java checkstyle targets -->
  <target name="checkstyle" depends="prepare"
          description="checks the coding style of all the java files in the project">
    <taskdef resource="checkstyletask.properties">
      <classpath refid="checkstyle.class.path"/>
    </taskdef>
    <checkstyle config="${resources}/checkstyle-config.xml"
                failureProperty="checkstyle.failure"
                failOnViolation="false">
      <classpath refid="base.class.path"/>
      <formatter type="xml" tofile="${results.checkstyle}/checkstyle_report.xml" />
      <fileset dir="${model}">
        <include name="**/src/java/**/*.java" />
        <include name="**/web/java/**/*.java" />
      </fileset>
      <fileset dir=".">
        <include name="src/java/**/*.java" />
      </fileset>
      <property key="checkstyle.header.file" value="${resources}/copyright_header.txt"/>
    </checkstyle>

    <style in="${results.checkstyle}/checkstyle_report.xml"
           out="${results.checkstyle}/checkstyle_report.html"
           style="${resources}/checkstyle-frames.xsl" />
  </target>



  <!-- WEBAPP TARGETS -->

  <target name="build-production-webapp"
          depends="create-genomic-model, prepare-build-webapp,
                   jar-flymine-java, compile-genomic-web-java"> 
    <ant antfile="${build}/build-webapp.xml" target="add-model-to-webapp" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/> 
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="model.src" value="${model}/genomic"/>
    </ant>

    <copy todir="${build.tmp}"
          file="${resources}/webapp/default.intermine.properties" 
          overwrite="true" verbose="true"/>
    <patternset id="default-intermine-properties">
      <include name="default.intermine.properties"/>
    </patternset>
    <ant antfile="${build}/build-webapp.xml" target="add-to-war-classes" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="file.dir" value="${build.tmp}"/>
      <reference torefid="file.names" refid="default-intermine-properties"/>
    </ant>

    <ant antfile="${build}/build-webapp.xml" target="add-to-war-lib" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="file.dir" value="${lib}"/>
      <reference torefid="file.names" refid="lib.webapp"/>
    </ant>

    <ant antfile="${build}/build-webapp.xml" target="add-to-war-lib" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="file.dir" value="${dist}"/>
      <reference torefid="file.names" refid="lib.flymine"/>
    </ant>

    <ant antfile="${build}/build-webapp.xml" target="add-to-war-lib" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="file.dir" value="${dist}"/>
      <reference torefid="file.names" refid="flymine.jar.patternset"/>
    </ant>

    <copy todir="${build.tmp}"
          file="${resources}/webapp/flymine/global.web.properties" 
          overwrite="true" verbose="true"/>
    <patternset id="flymine-global-web-properties-patternset">
      <include name="global.web.properties"/>
    </patternset>
    <ant antfile="${build}/build-webapp.xml" target="add-to-war-webinf" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="file.dir" value="${build.tmp}"/>
      <reference torefid="file.names" refid="flymine-global-web-properties-patternset"/>
    </ant>
  </target>

  <target name="release-webapp">
    <taskdef name="tomcat-deploy" classname="org.apache.catalina.ant.DeployTask">
      <classpath refid="base.class.path"/>
    </taskdef>
    <tomcat-deploy url="${webapp.baseurl}/manager"
                   username="${webapp.manager}"
                   password="${webapp.password}"
                   path="${webapp.path}"
                   war="file://${dist.webapp}/flymine.war"/>
  </target>

  <target name="remove-webapp">
    <taskdef name="tomcat-undeploy"
      classname="org.apache.catalina.ant.UndeployTask">
      <classpath refid="base.class.path"/>
    </taskdef>
    <tomcat-undeploy url="${webapp.baseurl}/manager"
                     username="${webapp.manager}"
                     password="${webapp.password}"
                     path="${webapp.path}"/>
  </target>


  <target name="build-db-userprofile" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="userprofile"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.userprofile"/>
      <property name="objectstore.name" value="os.userprofile"/>
    </ant>
  </target>

  <!-- MODEL COMPILATION TARGETS -->

  <target name="compile-acedb-model" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-model-from-ace" inheritRefs="true">
      <property name="model.name" value="acedb"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="model.src" value="${model}/acedb"/>
    </ant>
  </target>

  <target name="compile-chado-model" depends="convert-chado">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="model.src" value="${model}/chado"/>
    </ant>
  </target>

  <target name="compile-ensembl-model" depends="convert-ensembl">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="model.src" value="${model}/ensembl"/>
    </ant>
  </target>

  <target name="compile-mage-model" depends="convert-mage">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="model.src" value="${model}/mage"/>
    </ant>
  </target>


  <!-- ============================================================================== -->

  <!-- JAVADOC TARGETS -->

  <target name="javadoc" depends="prepare"
          description="generate the javadoc">
    <javadoc destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="FlyMine API" additionalparam="-breakiterator">
      <classpath refid="base.class.path"/>
      <fileset dir="${src.java}" defaultexcludes="yes" />
      <doctitle><![CDATA[<h1>FlyMine</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; ${YEAR} FlyMine. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>


  <!-- DOT TASKS -->

  <target name="dot" depends="dot-acedb,dot-chado,dot-ensembl,dot-genomic,dot-mage"/>

  <taskdef name="dot" classname="org.intermine.task.InheritanceDotTask">
    <classpath refid="models.class.path"/>
  </taskdef>

  <target name="dot-acedb" depends="compile-acedb-model">
    <dot directory="${build.model}/acedb" packagename="org.intermine.model.acedb" file="acedb.dot" omit="org.intermine.model.InterMineObject,java.lang.Object" boring=""/>
  </target>

  <target name="dot-chado" depends="compile-chado-model">
    <dot directory="${build.model}/chado" packagename="org.flymine.model.chado" file="chado.dot" omit="org.intermine.model.InterMineObject,java.lang.Object" boring=""/>
  </target>

  <target name="dot-ensembl" depends="compile-ensembl-model">
    <dot directory="${build.model}/ensembl" packagename="org.flymine.model.ensembl" file="ensembl.dot" omit="org.intermine.model.InterMineObject,java.lang.Object" boring=""/>
  </target>

<!--  <target name="dot-genomic" depends="compile-genomic-model">
  -->
  <target name="dot-genomic">
    <dot directory="${build.model}/genomic" packagename="org.flymine.model.genomic" file="genomic.dot" omit="org.intermine.model.InterMineObject,java.lang.Object" boring=""/>
  </target>

  <target name="dot-mage" depends="compile-mage-model">
    <dot directory="${build.model}/mage" packagename="MAGEOM" file="mage.dot" omit="org.intermine.model.InterMineObject,java.lang.Object" boring=""/>
  </target>


  <!-- PACKAGING/DISTRIBUTION TARGETS -->

  <target name="dist-javadoc" depends="prepare,javadoc"
          description="makes the javadoc available for distribution">
     <copy todir="${dist.javadoc}">
      <fileset dir="${build.javadoc}">
      </fileset>
    </copy>
  </target>


  <!-- CLEAN TARGETS -->

  <target name="clean"
          description="clean up generated files">
    <delete dir="${build}"/>
    <delete dir="${results}"/>
    <delete>
      <fileset dir=".">
        <include name="junit*.properties"/>
        <include name="velocity.log*"/>
        <include name="flymine.log*"/>
      </fileset>
    </delete>
  </target>

  <target name="clean-code"
          description="clean up all generated and compiled code">
    <delete dir="${build.resources}"/>
    <delete>
    <fileset dir=".">
      <include name="velocity.log*"/>
      <include name="flymine.log*"/>
    </fileset>
    </delete>
    <antcall target="prepare" />
  </target>

  <target name="distclean" depends="clean"
          description="clean up all distribution files">
    <delete dir="${dist}"/>
  </target>

  <target name="junit-clean" depends="prepare">
    <delete>
      <fileset dir="${results.junit}" includes="TEST-*.xml"/>
    </delete>
  </target>

  <!-- ANTDOC TARGET -->
  <target name="ant-doc">
    <taskdef name="AntDoc" classname="org.ed.pack.ant.AntDoc">
      <classpath refid="base.class.path"/>
    </taskdef>
    <AntDoc destination="${results.antdoc}" buildfile="${ant.file}"/>
  </target>
</project>
