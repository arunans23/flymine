<project name="FlyMine" default="all" basedir=".">
  <description>FlyMine build file</description>

  <!-- Property setup targets -->
  <!-- buildtime and runtime settings -->
  <property name="build.properties.local" value="${user.home}/build.properties.flymine" />
  <property file="${build.properties.local}"/>
  <property file="build.properties"/>

  <property name="runtime.properties.local" value="${user.home}/flymine.properties" />

  <!-- libraries and binaries -->
  <property name="lib" location="lib"/>
  <property name="buildlib" location="buildlib"/>
  <property name="weblib" location="weblib"/>
  <property name="bin" location="bin"/>

  <!-- source directories -->
  <property name="src" location="src"/>
  <property name="src.java" location="${src}/java"/>
  <property name="src.test" location="${src}/test"/>
  <property name="src.schema" location="${src}/schema" />
  <property name="src.www" location="doc"/>
  <property name="src.www-internal" location="../flymine-private/doc"/>
  <property name="src.webapp" location="webapp"/>

  <!-- resources directory -->
  <property name="resources" location="resources"/>

  <!-- build directories -->
  <property name="build" location="build"/>
  <property name="build.java" location="${build}/java"/>
  <property name="build.resources" location="${build}/resources"/>
  <property name="build.resources.testxml" location="${build}/resources/test"/>
  <property name="build.test" location="${build}/test"/>
  <property name="build.model" location="${build}/model" />
  <property name="build.schema" location="${build}/schema" />
  <property name="build.src.java" location="${build}/javasrc"/>
  <property name="build.src.test" location="${build}/testsrc"/>
  <property name="build.javadoc" location="${build}/api"/>
  <property name="build.www" location="${build}/www"/>
  <property name="build.www-internal" location="${build}/www/internal"/>
  <property name="build.webapp" location="${build}/webapp"/>
  <property name="build.tmp" location="${build}/tmp"/>

  <!-- results directories -->
  <property name="results"  location="results"/>
  <property name="results.junit"  location="${results}/junit"/>
  <property name="results.checkstyle"  location="${results}/checkstyle"/>
  <property name="results.antdoc" location="${results}/antdoc"/>

  <!-- distributable directories -->
  <property name="dist"  location="dist"/>
  <property name="dist.www"  location="${dist}/www"/>
  <property name="dist.webapp"  location="${dist}/webapp"/>
  <property name="dist.javadoc"  location="${dist.www}/api"/>

  <!-- set the classpath for the build - basically everything in lib -->
  <path id="base.class.path">
    <pathelement path="${build.java}"/>
    <pathelement path="${build.resources}"/>
    <pathelement location="${build.model}/acedb"/>
    <fileset dir="${lib}">
      <include name="**/*.jar"/>
      <exclude name="antlr.jar"/>
    </fileset>
    <fileset dir="${buildlib}">
      <include name="**/*.jar"/>
      <exclude name="checkstyle-all-3.0b1.jar"/>
    </fileset>
  </path>

  <path id="project.class.path">
    <path refid="base.class.path"/>
    <pathelement location="${lib}/antlr.jar"/>
  </path>

  <path id="checkstyle.class.path">
    <pathelement location="${buildlib}/checkstyle-all-3.0b1.jar"/>
  </path>

  <path id="test.class.path">
    <path refid="project.class.path"/>
    <pathelement location="${build.test}"/>
    <pathelement location="${build.model}/testmodel"/>
    <pathelement location="${build.model}/acedbtest"/>
  </path>

  <path id="acedbtest.class.path">
    <path refid="project.class.path"/>
    <pathelement location="${build.model}/acedbtest"/>
  </path>

  <path id="acedb.class.path">
    <path refid="project.class.path"/>
    <pathelement location="${build.model}/acedb"/>
  </path>

  <path id="webapptest.class.path">
    <path refid="test.class.path"/>
    <fileset dir="${weblib}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement location="${build.webapp}"/>
  </path>


  <!-- Initialisation targets -->

  <target name="prepare">
    <tstamp>
      <format property="YEAR" pattern="yyyy"/>
      <format property="DTSTAMP" pattern="yyyyMMddHHmm"/>
    </tstamp>
    
    <mkdir dir="${build}"/>
    <mkdir dir="${build.java}"/>
    <mkdir dir="${build.resources}"/>
    <mkdir dir="${build.resources.testxml}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${build.model}" />
    <mkdir dir="${build.schema}" />
    <mkdir dir="${build.src.java}"/>
    <mkdir dir="${build.src.test}"/>
    <mkdir dir="${build.javadoc}"/>
    <mkdir dir="${build.www}"/>
    <mkdir dir="${build.www-internal}"/>
    <mkdir dir="${build.webapp}"/>
    <mkdir dir="${build.tmp}"/>

    <mkdir dir="${results}"/>
    <mkdir dir="${results.junit}"/>
    <mkdir dir="${results.checkstyle}"/>
    <mkdir dir="${results.antdoc}"/>

    <copy file="${runtime.properties.local}" tofile="${build.resources}/flymine.properties"/>
    <copy todir="${build.resources}">
      <fileset dir="${resources}/runtime" />
    </copy>
    <copy todir="${build.resources.testxml}">
      <fileset dir="${resources}/test/xml" />
    </copy>
    <copy todir="${build.resources.testxml}">
      <fileset dir="${resources}/test/">
        <include name="*.xml"/>
      </fileset>
    </copy>

  </target>

  <target name="prepare-dist">
    <mkdir dir="${dist}"/>
    <mkdir dir="${dist.www}"/>
    <mkdir dir="${dist.webapp}"/>
    <mkdir dir="${dist.javadoc}"/>
  </target>
    
  <target name="prepare-testmodel">
    <ant antfile="build-model.xml" target="prepare">
      <property name="model.name" value="testmodel"/>
    </ant>
  </target>

  <target name="prepare-acedbtest">
    <ant antfile="build-model.xml" target="prepare">
      <property name="model.name" value="acedbtest"/>
    </ant>
  </target>

  <target name="prepare-acedb">
    <ant antfile="build-model.xml" target="prepare">
      <property name="model.name" value="acedb"/>
    </ant>
  </target>

  <!-- Compilation targets -->

  <!-- main java source -->
  <target name="compile-main" depends="prepare"
          description="compile the java source" >
    <copy todir="${build.src.java}">
      <fileset dir="${src.java}">
        <include name="**/*.java"/>
      </fileset>
    </copy>
    <antlr target="${src.java}/org/flymine/sql/query/flymine_sql.g"
        outputdirectory="${build.src.java}/org/flymine/sql/query">
      <classpath refid="project.class.path"/>
    </antlr>
    <antlr target="${src.java}/org/flymine/objectstore/query/flymine_fql.g"
        outputdirectory="${build.src.java}/org/flymine/objectstore/query">
      <classpath refid="project.class.path"/>
    </antlr>
    <javac destdir="${build.java}" listfiles="yes">
      <classpath refid="project.class.path"/>
      <src path="${build.src.java}" />
    </javac>
  </target>




  <!-- Build flymine with testmodel -->

  <!-- unzip testmodel -->
  <target name="unpack-testmodel">
    <ant antfile="build-model.xml" target="unpack-xmi-model">
      <property name="model.name" value="testmodel"/>
      <property name="model.src" value="${src.java}/org/flymine/model/testmodel"/>
    </ant>
  </target>

  <!-- generate testmodel from xmi -->
  <target name="prepare-generate-model-testmodel" depends="compile-main" >
     <taskdef
       name="model-generation"
       classname="org.flymine.task.ModelGenerationTask">
       <classpath refid="test.class.path"/>
     </taskdef>
  </target>

  <target name="generate-model-testmodel" depends="prepare-generate-model-testmodel, unpack-testmodel, prepare-testmodel">
    <model-generation
      type="xmi"
      modelname="testmodel"      
      source="${build.tmp}/testmodel_.xmi"
      destdir="${build.model}/testmodel"
    />     
  </target>

  <!-- define task for model output, make sure application compiled -->
  <target name="prepare-model-output-testmodel" depends="compile-main, prepare-testmodel">
    <taskdef name="model-output-testmodel" classname="org.flymine.task.ModelOutputTask">
      <classpath refid="test.class.path" />
    </taskdef>
  </target>

  <!-- is our java source older than the model? -->
  <target name="testmodel-java.check" depends="unpack-testmodel">
    <uptodate property="testmodel-java.outofdate" targetfile="${build.tmp}/testmodel_.xmi">
      <srcfiles dir="${build.model}/testmodel" includes="**/*.java"/>
    </uptodate>
  </target>

  <!-- generate java source for testmodel -->
  <target name="generate-java-testmodel" depends="testmodel-java.check, prepare-model-output-testmodel, generate-model-testmodel"
          if="testmodel-java.outofdate">
    <model-output-testmodel type="java" model="testmodel" destdir="${build.model}/testmodel"/>
  </target>

  <!-- compile java source for testmodel -->
  <target name="compile-java-testmodel" depends="generate-java-testmodel">
    <javac destdir="${build.model}/testmodel" listfiles="yes">
      <classpath refid="test.class.path"/>
      <src path="${build.model}/testmodel" />
    </javac>
  </target>

  <!-- is our repository descriptor older than the model? -->
  <target name="repository-testmodel.check" depends="unpack-testmodel">
    <uptodate property="testmodel-repository.outofdate" targetfile="${build.tmp}/testmodel_.xmi">
      <srcfiles dir="${build.model}/testmodel" 
          includes="**/*.xml"
          excludes="testmodel_model.xml" />
    </uptodate>
  </target>

  <!-- generate repository descriptor for testmodel -->
  <target name="generate-repository-testmodel" depends="repository-testmodel.check, prepare-model-output-testmodel, generate-model-testmodel"
          if="testmodel-repository.outofdate">
    <model-output-testmodel type="ojb" model="testmodel" destdir="${build.model}/testmodel"/>

    <!-- Copy the default repository files across -->
    <copy todir="${build.model}/testmodel" flatten="true">
      <fileset dir="${resources}">
        <include name="**/repository*"/>
      </fileset>
    </copy>
  </target>

  <!-- generate mapping file for castor xml binding for testmodel -->
  <target name="generate-xmlmapping-testmodel" depends="unpack-testmodel, prepare-model-output-testmodel, generate-model-testmodel"
          if="testmodel-repository.outofdate">
    <model-output-testmodel type="castor" model="testmodel" destdir="${build.model}/testmodel"/>

    <copy todir="${build.model}/testmodel" flatten="true">
      <fileset dir="${resources}">
        <include name="**/castor*.xml"/>
      </fileset>
    </copy>
  </target>

  <!-- generate schema from repository descriptor and use to create testmodel database tables -->
  <target name="build-db-testmodel" depends="generate-repository-testmodel"
          if="testmodel-repository.outofdate">
    <java classname="org.flymine.codegen.SchemaOutput" fork="true" dir="${build}">
      <classpath refid="base.class.path" />
      <arg value="${build.model}/testmodel/repository_testmodel.xml" />
      <arg value="${build.model}/testmodel/testmodel-schema.xml" />
    </java>
    <copy todir="${build.model}/testmodel">
      <fileset dir="${src.schema}">
        <include name="**/*-schema.xml"/>
      </fileset>
    </copy>

    <taskdef
          name="build-db"
          classname="org.flymine.task.BuildDbTask">
      <classpath refid="project.class.path"/>
    </taskdef>
    
    <build-db
          database="db.unittest"
          destdir="${build.model}/testmodel">
      <fileset dir="${build.model}/testmodel">
        <include name="*-schema.xml" />
        </fileset>
    </build-db>
  </target>

  <!-- insert the testmodel data into the database -->
  <target name="insert-data-testmodel" depends="build-db-testmodel, generate-xmlmapping-testmodel">
    <taskdef
          name="insert-xml-data"
          classname="org.flymine.task.InsertXmlDataTask">
      <classpath refid="project.class.path"/>
    </taskdef>

    <insert-xml-data integrationWriter="integration.unittest" file="${build.resources.testxml}/testmodel_data.xml">
      <classpath refid="test.class.path"/>
    </insert-xml-data>
  </target>




  <!-- Acedb test build targets -->
  
  <!-- generate acedb model from acemodel file -->
  <target name="prepare-generate-model-acedbtest" depends="compile-main" >
    <taskdef
      name="model-generation"
      classname="org.flymine.task.ModelGenerationTask">
      <classpath refid="acedbtest.class.path"/>
    </taskdef>
  </target>
  
  <target name="generate-model-acedbtest" depends="prepare-generate-model-acedbtest, prepare-acedbtest">
    <model-generation
      type="acedb"
      modelname="acedbtest"
      source="${build.resources.testxml}/acedbtest.wrm"
      destdir="${build.model}/acedbtest"/>     
  </target>

  <!-- define task for model output -->
  <target name="prepare-model-output-acedbtest" depends="compile-main, prepare-acedbtest">
    <taskdef name="model-output" classname="org.flymine.task.ModelOutputTask">
      <classpath refid="acedbtest.class.path"/>
    </taskdef>
  </target>

  <!-- generate java source for acedb model -->
  <target name="generate-java-acedbtest" depends="prepare-model-output-acedbtest, generate-model-acedbtest">
    <model-output type="java" model="acedbtest" destdir="${build.model}/acedbtest"/>
  </target>
  
  <!-- compile java source for acedb model -->
  <target name="compile-java-acedbtest" depends="generate-java-acedbtest">
    <javac destdir="${build.model}/acedbtest" listfiles="yes">
      <classpath refid="acedbtest.class.path"/>
      <src path="${build.model}/acedbtest"/>
    </javac>
  </target>




  <!-- Production build targets (currently uses ace model) -->
  
  <!-- generate acedb model from acemodel file -->
  <target name="prepare-generate-model-acedb" depends="compile-main" >
     <taskdef
       name="model-generation"
       classname="org.flymine.task.ModelGenerationTask">
       <classpath refid="acedb.class.path"/>
     </taskdef>
  </target>

  <target name="generate-model-acedb" depends="prepare-generate-model-acedb, prepare-acedb">
    <model-generation
      type="acedb"
      modelname="acedb"
      source="${src.java}/org/flymine/model/acedb/acemodel.wrm"
      destdir="${build.model}/acedb"
   />     
  </target> 

  <!-- define task for model output, make sure application compiled -->
  <target name="prepare-model-output-acedb" depends="compile-main, prepare-acedb">
    <taskdef name="model-output" classname="org.flymine.task.ModelOutputTask">
      <classpath refid="acedb.class.path" />
    </taskdef>
  </target>

  <!-- generate java source for acedb model -->
  <target name="generate-java-acedb" depends="prepare-model-output-acedb, generate-model-acedb">
    <model-output type="java" model="acedb" destdir="${build.model}/acedb"/>
  </target>

  <!-- compile java source for acedb model -->
  <target name="compile-java-acedb" depends="generate-java-acedb">
    <javac destdir="${build.model}/acedb" listfiles="yes">
      <classpath refid="acedb.class.path"/>
      <src path="${build.model}/acedb" />
    </javac>
  </target>

  <!-- generate repository descriptor for acedb model -->
  <target name="generate-repository-acedb" depends="prepare-model-output-acedb, generate-model-acedb">
    <model-output type="ojb" model="acedb" destdir="${build.model}/acedb"/>

    <!-- Copy the default repository files across -->
    <copy todir="${build.model}/acedb" flatten="true">
      <fileset dir="${resources}">
        <include name="**/repository*"/>
      </fileset>
    </copy>
  </target>

  <!-- generate mapping file for castor xml binding of acedb model -->
  <target name="generate-xmlmapping-acedb" depends="generate-model-acedb, prepare-model-output-acedb" >
    <model-output type="castor" model="acedb" destdir="${build.model}/acedb"/>

    <!-- copy acrosss castor include file(s) -->
    <copy todir="${build.model}/acedb" flatten="true">
      <fileset dir="${resources}">
        <include name="**/castor*.xml"/>
      </fileset>
    </copy>
  </target>

  <!-- generate schema from repository descriptor and use to create acedb database tables -->
  <target name="build-db-acedb" depends="generate-repository-acedb">
    <java classname="org.flymine.codegen.SchemaOutput" fork="true" dir="${build}">
      <classpath refid="base.class.path" />
      <arg value="${build.model}/acedb/repository_acedb.xml" />
      <arg value="${build.model}/acedb/acedb-schema.xml" />
    </java>
    <copy todir="${build.model}/acedb">
      <fileset dir="${src.schema}">
        <include name="**/*-schema.xml"/>
      </fileset>
    </copy>

    <taskdef
          name="build-db"
          classname="org.flymine.task.BuildDbTask">
      <classpath refid="acedb.class.path"/>
    </taskdef>
    
    <build-db
          database="db.acedb"
          destdir="${build.model}/acedb">
      <fileset dir="${build.model}/acedb">
        <include name="*-schema.xml" />
      </fileset>
    </build-db>
  </target>

  <!-- insert the ace data into the database -->
   <target name="insert-data-acedb" depends="build-db-acedb, compile-java-acedb">
    <taskdef
          name="insert-ace-data"
          classname="org.flymine.task.InsertAceDataTask">
      <classpath refid="acedb.class.path"/>
    </taskdef>

    <insert-ace-data integrationWriter="integration.acedb" user="${acedb.user}" password="${acedb.password}" host="${acedb.host}" port="${acedb.port}">
      <classpath refid="acedb.class.path"/>
    </insert-ace-data>
  </target>

  <target name="insert-only-acedb-data">
    <taskdef
          name="insert-ace-data"
          classname="org.flymine.task.InsertAceDataTask">
      <classpath refid="acedb.class.path"/>
    </taskdef>

    <insert-ace-data integrationWriter="integration.acedb" user="${acedb.user}" password="${acedb.password}" host="${acedb.host}" port="${acedb.port}">
      <classpath refid="acedb.class.path"/>
    </insert-ace-data>
  </target>

  <target name="build-production" depends ="insert-data-acedb"
          description="build the production FlyMine system with acedb model" >
  </target>


  <!-- Unit test targets -->

  <!-- compile the tests -->
  <target name="compile-test" depends="compile-java-testmodel, compile-java-acedbtest"
          description="compile the java test source" >
    <copy todir="${build.src.test}">
      <fileset dir="${src.test}">
        <include name="**/*.java"/>
      </fileset>
    </copy>
    <javac destdir="${build.test}" listfiles="yes">
      <classpath refid="test.class.path"/>
      <src path="${build.src.test}" />
    </javac>
  </target>

  <!-- run the tests -->
  <target name="test-main" depends="compile-test, build-db-testmodel, generate-xmlmapping-testmodel"
          description="perform JUnit tests on main source code" >

    <!-- this will cause every test to be re-run if any java file changes -->
    <dependset>
      <srcfileset dir="${build.java}" includes="**/*.class" />
      <targetfileset dir="${results.junit}" includes="TEST-*.xml" />
    </dependset>

    <junit printsummary="yes" haltonfailure="no" failureproperty="junit.failure">
      <classpath refid="test.class.path"/>
      <formatter type="xml" />
      <batchtest fork="no" todir="${results.junit}">
        <fileset dir="${build.test}" includes="**/*Test.class">
          <depend targetdir="${results.junit}">
            <mapper type="package" from="*.class" to="TEST-*.xml" />
          </depend>
          <exclude name="org/flymine/web/*" />
        </fileset>
      </batchtest>
    </junit>

    <antcall target="test-report"/>
  </target>

  <target name="test-webapp" depends="compile-test, build-db-testmodel, build-testable-webapp, release-webapp"
          description="perform JUnit tests on web application" >
   <junit printsummary="yes" haltonfailure="no" failureproperty="junit.failure">
      <classpath refid="webapptest.class.path"/>
      <formatter type="xml" />
      <batchtest fork="no" todir="${results.junit}">
        <fileset dir="${build.test}">
         <include name="org/flymine/web/**/*Test.class" />
        </fileset>
      </batchtest>
    </junit>

    <antcall target="test-report"/>
    <antcall target="remove-webapp"/>

  </target>

  <!-- force all the unit tests to be redone -->
  <target name="junit-clean" depends="prepare">
    <delete>
      <fileset dir="${results.junit}" includes="TEST-*.xml"/>
    </delete>
  </target>

  <target name="fulltest" depends="prepare,junit-clean,clean-code,test-main,test-webapp,checkstyle"
          description="do a full test and fail if there are any errors">
    <fail message="Some unit tests have failed" if="junit.failure"/>
    <fail message="Some files violate FlyMine coding standards" if="checkstyle.failure"/>
  </target>

  <target name="test-report" depends="prepare"
          description="generate a test report for all the unit tests" >
    <junitreport todir="${results.junit}">
      <fileset dir="${results.junit}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${results.junit}"/>
    </junitreport>
  </target>


  <!-- Functional tests -->

  <!-- System tests -->

  <!-- Java checkstyle targets -->

  <target name="checkstyle" depends="prepare"
          description="checks the coding style of all the java files in the project">
    <taskdef resource="checkstyletask.properties">
      <classpath refid="checkstyle.class.path"/>
    </taskdef>
    <checkstyle config="${resources}/checkstyle-config.xml"
                failureProperty="checkstyle.failure"
                failOnViolation="false">
      <classpath refid="base.class.path"/>
      <formatter type="xml" tofile="${results.checkstyle}/checkstyle_report.xml" />
      <fileset dir="${src.java}">
        <include name="**/*.java" />
      </fileset>
      <property key="checkstyle.header.file" value="${resources}/copyright_header.txt"/>
    </checkstyle>

    <style in="${results.checkstyle}/checkstyle_report.xml"
           out="${results.checkstyle}/checkstyle_report.html"
           style="${resources}/checkstyle-frames.xsl" />

  </target>

  <!-- Javadoc targets -->

  <target name="javadoc" depends="prepare"
          description="generate the javadoc">
    <javadoc destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="${ant.project.name} API" additionalparam="-breakiterator">
      <classpath refid="project.class.path"/>
      <fileset dir="${src.java}" defaultexcludes="yes" />
      <doctitle><![CDATA[<h1>${ant.project.name}</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; ${YEAR} FlyMine. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>


  <!-- Web targets -->

  <target name="build-www" depends="prepare"
          description="build the static website" >

    <available file="${src.www-internal}" type="dir" property="www-internal.present"/>

    <antcall target="www-external" />
    <antcall target="www-internal" />

  </target>

    <!-- main web site -->
  <target name="www-external" depends="prepare">

    <!-- make sure files dependent on sidebar are handled correctly -->
    <dependset>
      <srcfilelist dir="${src.www}" files="sidebar.xml,flymine.xsl" />
      <targetfileset dir="${build.www}" includes="**/*.html" />
    </dependset>

    <dependset>
      <srcfilelist dir="${bin}" files="diatopng,pstopng,buildpngfromdia,pnmscalealpha" />
      <targetfileset dir="${build.www}" includes="**/*.png" />
    </dependset>

    <dependset>
      <srcfilelist dir="${bin}" files="buildgiffrompng" />
      <targetfileset dir="${build.www}" includes="**/*.gif" />
    </dependset>

    <copy todir="${build.www}">
      <fileset dir="${src.www}">
        <exclude name="**/*.xml" />
        <exclude name="**/*.xsl" />
        <exclude name="**/*.dia" />
      </fileset>
    </copy>

    <style basedir="${src.www}" destdir="${build.www}" extension=".html"
      style="${src.www}/flymine.xsl" includes="**/*.xml">
      <classpath refid="project.class.path"/>
      <param name="basedir" expression="${www.location}" />
    </style>

    <apply executable="bin/buildpngfromdia" parallel="false" dest="${build.www}">
      <fileset dir="${src.www}">
        <include name="**/*.dia" />
      </fileset>
      <mapper type="glob" from="*.dia" to="*.png" />
      <srcfile />
      <targetfile />
    </apply>

    <apply executable="bin/buildgiffrompng" parallel="false" dest="${build.www}">
      <fileset dir="${build.www}">
        <include name="**/*.png" />
      </fileset>
      <mapper type="glob" from="*.png" to="*.gif" />
      <srcfile />
      <targetfile />
    </apply>
  </target>

    <!-- internal web site -->
  <target name="www-internal" depends="prepare"
          if="www-internal.present" >
    <copy todir="${build.www-internal}">
      <fileset dir="${src.www-internal}">
        <exclude name="**/*.xml" />
        <exclude name="**/*.xsl" />
        <exclude name="**/*.dia" />
      </fileset>
    </copy>

    <style basedir="${src.www-internal}" destdir="${build.www-internal}" extension=".html"
      style="${src.www}/flymine.xsl" includes="**/*.xml">
      <classpath refid="project.class.path"/>
      <param name="basedir" expression="${www.location}" />
    </style>

    <apply executable="bin/buildpngfromdia" parallel="false" dest="${build.www-internal}">
      <fileset dir="${src.www-internal}">
        <include name="**/*.dia" />
      </fileset>
      <mapper type="glob" from="*.dia" to="*.png" />
      <srcfile />
      <targetfile />
    </apply>
    <apply executable="bin/buildgiffrompng" parallel="false" dest="${build.www-internal}">
      <fileset dir="${build.www-internal}">
        <include name="**/*.png" />
      </fileset>
      <mapper type="glob" from="*.png" to="*.gif" />
      <srcfile />
      <targetfile />
    </apply>

  </target>


  <!-- Webapp targets -->

  <target name="build-webapp" depends="prepare,jar"
          description="Build the FlyMine web application">
    <!-- Copy all the webapp files that do not need compiling -->
    <copy todir="${build.webapp}">
      <fileset dir="${src.webapp}" />
    </copy>
    <!-- Collect all the necessary jars together in the WEB-INF/lib directory -->
    <copy todir="${build.webapp}/WEB-INF/lib">
      <!-- The FlyMine jars -->
      <fileset dir="${dist}">
        <include name="*.jar"/>
      </fileset>
      <!-- The webapp-specific jars -->
      <fileset dir="${weblib}">
        <include name="**/*.jar"/>
      </fileset>
      <!-- The main runtime jars -->
      <fileset dir="${lib}">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="build-testable-webapp" depends="prepare,compile-test,jar-testmodel,build-webapp"
          description="Build a FlyMine webapp including the test classes and libraries">
    <!-- Copy the test classes -->
    <copy todir="${build.webapp}/WEB-INF/classes">
      <fileset dir="${build.test}"/>
    </copy>
    <!-- Collect all the necessary jars together in the WEB-INF/lib directory -->
    <copy todir="${build.webapp}/WEB-INF/lib">
      <!-- The building/testing jars -->
      <fileset dir="${buildlib}">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
  </target>



  <!-- Packaging/distribution targets -->

  <target name="dist-www" depends="prepare-dist,build-www"
          description="makes the static website available for distribution">
    <copy todir="${dist.www}">
      <fileset dir="${build.www}">
      </fileset>
    </copy>

    <chmod perm="a+r" type="file">
      <fileset dir="${dist.www}">
        <include name="**/**" />
      </fileset>
    </chmod>
    <chmod perm="a+rx" type="dir">
      <fileset dir="${dist.www}">
        <include name="**/**" />
      </fileset>
    </chmod>
  </target>

  <target name="dist-webapp" depends="prepare-dist,build-webapp"
          description="makes the web application available for distribution">
    <copy todir="${dist.webapp}">
      <fileset dir="${build.webapp}">
      </fileset>
    </copy>

    <chmod perm="a+r" type="file">
      <fileset dir="${dist.webapp}">
        <include name="**/**" />
      </fileset>
    </chmod>
    <chmod perm="a+rx" type="dir">
      <fileset dir="${dist.webapp}">
        <include name="**/**" />
      </fileset>
    </chmod>

  </target>

  <target name="dist-javadoc" depends="prepare-dist,javadoc"
          description="makes the javadoc available for distribution">
     <copy todir="${dist.javadoc}">
      <fileset dir="${build.javadoc}">
      </fileset>
    </copy>
  </target>   


  <target name="jar" depends="prepare-dist, compile-main"
    description="Makes a JAR file of all the classes and configuration files">
    <condition property="version" value="${DTSTAMP}">
      <not>
        <isset property="version" />
      </not>
    </condition>

    <echo message="Creating jar file version ${version}" />
    <manifest file="${build}/MANIFEST.MF">
      <attribute name="Built-By" value="${user.name}"/>
      <attribute name="Specification-Title" value="FlyMine"/>
      <attribute name="Specification-Version" value="${version}"/>
      <attribute name="Specification-Vendor" value="FlyMine"/>
      <attribute name="Implementation-Title" value="FlyMine"/>
      <attribute name="Implementation-Version" value="${version}"/> 
      <attribute name="Implementation-Vendor" value="FlyMine"/>
    </manifest>

    <jar destfile="${dist}/flymine.jar" manifest="${build}/MANIFEST.MF">
      <fileset dir="${build.java}" />
      <fileset dir="${build.resources}"/>
    </jar>

  </target>

  <target name="jar-testmodel" depends="prepare-dist, compile-java-testmodel, generate-repository-testmodel, generate-xmlmapping-testmodel"
          description="create a jar of the testmodel">
    <jar destfile="${dist}/flymine-testmodel.jar">
      <fileset dir="${build.model}/testmodel" >
        <exclude name="**/*.java"/>
      </fileset>
    </jar>
  </target>


  <!-- Releasing targets -->

  <target name="release-www" depends="dist-javadoc, dist-www"
    description="releases the static website to the webserver">
    <exec executable="rsync">
      <arg line="-e ssh -Cavz --delete ${dist.www}/ ${www.serverlocation}/" />
    </exec>
  </target>

  <target name="release-webapp" depends="dist-webapp"
    description="releases the web application to the webserver">
    <exec executable="rsync">
      <arg line="-e ssh -Cavz --delete ${dist.webapp}/ ${webapp.serverlocation}/" />
    </exec>
    <taskdef name="tomcat-install"
        classname="org.apache.catalina.ant.InstallTask">
      <classpath refid="project.class.path"/>
    </taskdef>

    <tomcat-install url="${webapp.managerurl}" username="${webapp.manager}" 
                  password="${webapp.password}" path="${webapp.path}" 
                  war="file:${webapp.filelocation}"/> 
  </target>

  <target name="remove-webapp"
          description="remove (undeploy) the web application from the server">
    <taskdef name="tomcat-remove" 
        classname="org.apache.catalina.ant.RemoveTask">
      <classpath refid="project.class.path"/>
    </taskdef>
    <tomcat-remove url="${webapp.managerurl}" username="${webapp.manager}" 
            password="${webapp.password}" path="${webapp.path}"/>
  </target>
  





  <!-- Cleaning-up targets -->

  <target name="clean"
          description="clean up generated files">
    <delete dir="${build}"/>
    <delete dir="${results}"/>
    <delete>
      <fileset dir="." includes="junit*.properties"/>
    </delete>
  </target>

  <target name="clean-code"
          description="clean up all generated and compiled code">
    <delete dir="${build.java}"/>
    <delete dir="${build.src.java}"/>
    <delete dir="${build.test}"/>
    <delete dir="${build.src.test}"/>
    <delete dir="${build.resources}"/>
    <delete dir="${build.schema}"/>
    <delete file="velocity.log" />
    <delete file="${build}/flymine.log" />
    <delete file="${build}/testmodel_.xmi" />
    <antcall target="prepare" />
  </target>
  
  <target name="distclean" depends="clean"
          description="clean up all distribution files">
    <delete dir="${dist}"/>
  </target>

  <!-- AntDoc target -->

  <taskdef
	name="AntDoc"
	classname="org.ed.pack.ant.AntDoc">
        <classpath refid="project.class.path"/>
  </taskdef>

   <target name="ant-doc"> 
     <AntDoc
	destination="${results.antdoc}"
	buildfile="${ant.file}"
      />
    </target>

</project>
