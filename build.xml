<project name="FlyMine" default="all" basedir=".">
  <description>FlyMine build file</description>

  <!-- set up some buildtime and runtime properties -->

  <property name="build.properties.local" value="${user.home}/build.properties.flymine" />
  <property file="${build.properties.local}"/>
  <property file="build.properties"/>

  <!-- Libraries and binaries -->
  <property name="lib" location="lib"/>
  <property name="buildlib" location="buildlib"/>
  <property name="bin" location="bin"/>

  <!-- source directories -->
  <property name="src" location="src"/>
  <property name="src.java" location="${src}/java"/>
  <property name="src.test" location="${src}/test"/>
  <property name="src.www" location="doc"/>
  <property name="src.www-internal" location="../flymine-private/doc"/>

  <!-- resources directory -->
  <property name="resources" location="resources"/>

  <!-- build directories -->
  <property name="build" location="build"/>
  <property name="build.java" location="${build}/java"/>
  <property name="build.resources" location="${build}/resources"/>
  <property name="build.test" location="${build}/test"/>
  <property name="build.src.java" location="${build}/javasrc"/>
  <property name="build.javadoc" location="${build}/api"/>
  <property name="build.www" location="${build}/www"/>
  <property name="build.www-internal" location="${build}/www/internal"/>

  <!-- results directories -->
  <property name="results"  location="results"/>
  <property name="results.junit"  location="${results}/junit"/>
  <property name="results.checkstyle"  location="${results}/checkstyle"/>

  <!-- distributable directories -->
  <property name="dist"  location="dist"/>
  <property name="dist.www"  location="${dist}/www"/>
  <property name="dist.javadoc"  location="${dist.www}/internal/api"/>



  <!-- set the classpath for the build - basically everything in lib -->
  <path id="base.class.path">
    <pathelement path="${build.java}"/>
    <pathelement path="${build.resources}"/>
    <pathelement path="${lib}"/>
    <fileset dir="${lib}">
      <include name="**/*.jar"/>
      <exclude name="antlr.jar"/>
    </fileset>
    <pathelement path="${buildlib}"/>
    <fileset dir="${buildlib}">
      <include name="**/*.jar"/>
      <exclude name="checkstyle-all-3.0b1.jar"/>
    </fileset>
  </path>

  <path id="project.class.path">
    <pathelement location="${lib}/antlr.jar"/>
    <path refid="base.class.path"/>
  </path>

  <path id="test.class.path">
    <path refid="project.class.path"/>
    <pathelement location="${build.test}"/>
  </path>

  <path id="checkstyle.class.path">
    <path refid="base.class.path"/>
    <pathelement location="${buildlib}/checkstyle-all-3.0b1.jar"/>
  </path>

  <!-- Initialisation targets -->

  <target name="prepare">
    <tstamp>
      <format property="YEAR" pattern="yyyy"/>
    </tstamp>
    <mkdir dir="${build}"/>
    <mkdir dir="${build.java}"/>
    <mkdir dir="${build.resources}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${build.src.java}"/>
    <mkdir dir="${build.javadoc}"/>
    <mkdir dir="${build.www}"/>
    <mkdir dir="${build.www-internal}"/>

    <mkdir dir="${results}"/>
    <mkdir dir="${results.junit}"/>
    <mkdir dir="${results.checkstyle}"/>

    <copy file="${build.properties.local}" tofile="${build.resources}/flymine.properties">
    </copy>

  </target>

  <target name="prepare-dist">
    <mkdir dir="${dist}"/>
    <mkdir dir="${dist.www}"/>
    <mkdir dir="${dist.javadoc}"/>
  </target>
    

  <!-- Compilation targets -->

  <target name="compile-main" depends="prepare"
          description="compile the java source" >
    <copy todir="${build.src.java}">
      <fileset dir="${src.java}">
        <include name="**/*.java"/>
      </fileset>
    </copy>
    <antlr target="${src.java}/org/flymine/sql/query/flymine_sql.g"
        outputdirectory="${build.src.java}/org/flymine/sql/query">
      <classpath refid="project.class.path"/>
    </antlr>
    <javac destdir="${build.java}" listfiles="yes">
      <classpath refid="project.class.path"/>
      <src path="${build.src.java}" />
    </javac>
  </target>

  <!-- has model been unzipped? -->
  <target name="unpack-model.check" depends="prepare">
    <uptodate property="unpack-model.uptodate">
      <srcfiles dir="${src.java}/org/flymine/model/testmodel" includes="**/*.zargo"/>
      <mapper type="glob" from="*.zargo" to="${build.src.java}/*_.xmi" />
    </uptodate>
  </target>
  
  <target name="unpack-model" depends="unpack-model.check"
          description="unpacks the model from .zargo file"
          unless="unpack-model.uptodate">
    <unzip src="${src.java}/org/flymine/model/testmodel/TestModel.zargo" dest="${build.src.java}" />
    <touch file="${build.src.java}/TestModel_.xmi" />
  </target>

  <!-- has model been compiled? -->
  <target name="model.check" depends="unpack-model">
    <dependset>
      <srcfileset dir="${src}" includes="org/flymine/model/testmodel/**/*.java" />
      <targetfilelist dir="${build.src.java}" files=".model-created" />
    </dependset>
    <uptodate property="model.uptodate" targetfile="${build.src.java}/.model-created">
      <srcfiles dir="${build.src.java}" includes="TestModel_.xmi"/>
    </uptodate>
  </target>
  
  <target name="model" depends="model.check, compile-main"
          description="generate model classes from xmi"
          unless="model.uptodate">
    <java classname="org.flymine.codegen.JavaModelOutput" fork="true" dir="${build}">
      <classpath refid="project.class.path" />
      <arg value="TestModel" />
      <arg value="${build.src.java}" />
    </java>
    <javac destdir="${build.java}" listfiles="yes">
      <classpath refid="project.class.path"/>
      <src path="${build.src.java}/org/flymine/model" />
    </javac>
    <touch file="${build.src.java}/.model-created"/>
  </target>

  <target name="compile-test" depends="model"
          description="compile the java test source" >
    <javac destdir="${build.test}" listfiles="yes">
      <classpath refid="project.class.path"/>
      <src path="${src.test}" />
    </javac>
  </target>

  <!-- Unit tests -->

  <target name="test-main" depends="compile-test"
          description="perform JUnit tests on main source code" >

    <!-- Specify that the tests depend on the java files in the main directories -->
    <dependset>
      <srcfileset dir="${src.java}" includes="**/*.java" />
      <targetfileset dir="${results.junit}" includes="TEST-*.xml" />
    </dependset>

    <!-- Check if the tests have been run after the Java file last updated -->
    <uptodate property="test-main.uptodate">
      <srcfiles dir="${src.test}" includes="**/*.java"/>
      <mapper type="package" from="*.java" to="${results.junit}/TEST-*.xml" />
    </uptodate>

    <junit printsummary="yes" haltonfailure="no" failureproperty="junit.failure">
      <classpath refid="test.class.path"/>
      <formatter type="xml" />
      <batchtest fork="no" todir="${results.junit}" unless="test-main.uptodate">
        <fileset dir="${build.test}">
         <include name="**/*.class" />
        </fileset>
      </batchtest>
    </junit>

    <antcall target="test-report"/>
  </target>


  <target name="junit-clean" depends="prepare">
    <!-- Force all the unit tests to be redone -->
    <delete>
      <fileset dir="${results.junit}" includes="TEST-*.xml"/>
    </delete>
  </target>

  <target name="fulltest" depends="prepare,junit-clean,test-main,checkstyle"
          description="do a full test and fail if there are any errors">
    <fail message="Some unit tests have failed" if="junit.failure"/>
    <fail message="Some files violate FlyMine coding standards" if="checkstyle.failure"/>
  </target>

  <target name="test-report" depends="prepare"
          description="generate a test report for all the unit tests" >
    <junitreport todir="${results.junit}">
      <fileset dir="${results.junit}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${results.junit}"/>
    </junitreport>
  </target>


  <!-- Functional tests -->

  <!-- System tests -->

  <!-- Check the style of all the java files in the project -->
  <target name="checkstyle" depends="prepare"
          description="checks the coding style of all the java files in the project">
    <taskdef resource="checkstyletask.properties">
      <classpath refid="checkstyle.class.path"/>
    </taskdef>
    <checkstyle config="${resources}/checkstyle-config.xml"
                failureProperty="checkstyle.failure"
                failOnViolation="false">
      <classpath refid="checkstyle.class.path"/>
      <formatter type="xml" tofile="${results.checkstyle}/checkstyle_report.xml" />
      <fileset dir="${src.java}">
        <include name="**/*.java" />
        <exclude name="**/codegen/*.java" />
      </fileset>
    </checkstyle>

    <style in="${results.checkstyle}/checkstyle_report.xml"
           out="${results.checkstyle}/checkstyle_report.html"
           style="${resources}/checkstyle-frames.xsl" />

  </target>

  <!-- Javadoc -->
  <target name="javadoc" depends="prepare"
          description="generate the javadoc">
    <javadoc destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="${ant.project.name} API" additionalparam="-breakiterator">
      <classpath refid="project.class.path"/>
      <fileset dir="${src.java}" defaultexcludes="yes" />
      <doctitle><![CDATA[<h1>${ant.project.name}</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; ${YEAR} University of Cambridge. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>

  <!-- Web targets -->

  <target name="build-www" depends="prepare"
          description="build the static website" >

    <available file="${src.www-internal}" type="dir" property="www-internal.present"/>

    <antcall target="www-external" />
    <antcall target="www-internal" />

  </target>


  <target name="www-external" depends="prepare">

    <!-- Make sure files dependent on sidebar are handled correctly -->
    <dependset>
      <srcfilelist dir="${src.www}" files="sidebar.xml,flymine.xsl" />
      <targetfileset dir="${build.www}" includes="**/*.html" />
    </dependset>

    <dependset>
      <srcfilelist dir="${bin}" files="diatopng,pstopng,buildpngfromdia,pnmscalealpha" />
      <targetfileset dir="${build.www}" includes="**/*.png" />
    </dependset>

    <dependset>
      <srcfilelist dir="${bin}" files="buildgiffrompng" />
      <targetfileset dir="${build.www}" includes="**/*.gif" />
    </dependset>

    <!-- Main web site -->
    <copy todir="${build.www}">
      <fileset dir="${src.www}">
        <exclude name="**/*.xml" />
        <exclude name="**/*.xsl" />
        <exclude name="**/*.dia" />
      </fileset>
    </copy>

    <style basedir="${src.www}" destdir="${build.www}" extension=".html"
      style="${src.www}/flymine.xsl" includes="**/*.xml">
      <classpath refid="project.class.path"/>
      <param name="basedir" expression="${www.location}" />
    </style>

    <apply executable="bin/buildpngfromdia" parallel="false" dest="${build.www}">
      <fileset dir="${src.www}">
        <include name="**/*.dia" />
      </fileset>
      <mapper type="glob" from="*.dia" to="*.png" />
      <srcfile />
      <targetfile />
    </apply>

    <apply executable="bin/buildgiffrompng" parallel="false" dest="${build.www}">
      <fileset dir="${build.www}">
        <include name="**/*.png" />
      </fileset>
      <mapper type="glob" from="*.png" to="*.gif" />
      <srcfile />
      <targetfile />
    </apply>

  </target>

  <target name="www-internal" depends="prepare"
          if="www-internal.present" >
    <!-- Internal web site -->
    <copy todir="${build.www-internal}">
      <fileset dir="${src.www-internal}">
        <exclude name="**/*.xml" />
        <exclude name="**/*.xsl" />
        <exclude name="**/*.dia" />
      </fileset>
    </copy>

    <style basedir="${src.www-internal}" destdir="${build.www-internal}" extension=".html"
      style="${src.www}/flymine.xsl" includes="**/*.xml">
      <classpath refid="project.class.path"/>
      <param name="basedir" expression="${www.location}" />
    </style>

    <apply executable="bin/buildpngfromdia" parallel="false" dest="${build.www-internal}">
      <fileset dir="${src.www-internal}">
        <include name="**/*.dia" />
      </fileset>
      <mapper type="glob" from="*.dia" to="*.png" />
      <srcfile />
      <targetfile />
    </apply>
    <apply executable="bin/buildgiffrompng" parallel="false" dest="${build.www-internal}">
      <fileset dir="${build.www-internal}">
        <include name="**/*.png" />
      </fileset>
      <mapper type="glob" from="*.png" to="*.gif" />
      <srcfile />
      <targetfile />
    </apply>

  </target>


  <!-- Packaging/distribution targets -->

  <target name="dist-www" depends="prepare-dist,build-www"
          description="makes the static website available for distribution">
    <copy todir="${dist.www}">
      <fileset dir="${build.www}">
      </fileset>
    </copy>

    <chmod perm="a+r" type="file">
      <fileset dir="${dist.www}">
        <include name="**/**" />
      </fileset>
    </chmod>
    <chmod perm="a+rx" type="dir">
      <fileset dir="${dist.www}">
        <include name="**/**" />
      </fileset>
    </chmod>
  </target>

  <target name="dist-javadoc" depends="prepare-dist,javadoc"
          description="makes the javadoc available for distribution">
     <copy todir="${dist.javadoc}">
      <fileset dir="${build.javadoc}">
      </fileset>
    </copy>
  </target>   


  <!-- Releasing targets -->

  <target name="release-www" depends="dist-www"
    description="releases the static website to the webserver">
    <exec executable="rsync">
      <arg line="-e ssh -Cavz --delete ${dist.www}/ ${www.serverlocation}/" />
    </exec>
  </target>

  <!-- Cleaning-up targets -->

  <target name="clean"
          description="clean up generated files">
    <delete dir="${build}"/>
    <delete dir="${results}"/>
    <delete>
      <fileset dir="." includes="junit*.properties"/>
    </delete>
  </target>

  <target name="distclean" depends="clean"
          description="clean up all distribution files">
    <delete dir="${dist}"/>
  </target>

</project>
