<project name="flymine" default="help" basedir=".">
  <description>FlyMine build file</description>

  <!-- Property setup targets -->
  <!-- buildtime and runtime settings -->
  <property name="build.properties.local" value="${user.home}/build.properties.${ant.project.name}" />

  <property file="${build.properties.local}"/>
  <property file="build.properties"/>

  <property name="runtime.properties.local" value="${user.home}/intermine.properties" />

  <!-- used by build-model.xml -->
  <property name="namespace" value="http://www.flymine.org/model"/>

  <!-- used by build-model.xml -->
  <property name="packagename" value="org.flymine.model"/>

  <property name="intermine.dist.path" location="../intermine/dist"/>
  <property name="intermine.jar.path" location="${intermine.dist.path}/intermine.jar"/>

  <!-- libraries and binaries -->
  <property name="lib" location="lib"/>
  <property name="bin" location="bin"/>

  <!-- resources directory -->
  <property name="resources" location="resources"/>

  <!-- model directory -->
  <property name="model" location="model"/>

  <!-- build directories -->
  <property name="build" location="build"/>
  <property name="build.resources" location="${build}/resources"/>
  <property name="build.resources.test" location="${build}/resources/test"/>
  <property name="build.model" location="${build}/model" />
  <property name="build.javadoc" location="${build}/api"/>
  <property name="build.webapp" location="${build}/webapp"/>
  <property name="build.tmp" location="${build}/tmp"/>

  <!-- results directories -->
  <property name="results"  location="results"/>
  <property name="results.junit"  location="${results}/junit"/>
  <property name="results.checkstyle"  location="${results}/checkstyle"/>
  <property name="results.antdoc" location="${results}/antdoc"/>

  <!-- distributable directories -->
  <property name="dist"  location="dist"/>
  <property name="dist.www"  location="${dist}/www"/>
  <property name="dist.webapp"  location="${dist}/webapp"/>
  <property name="dist.javadoc"  location="${dist.www}/api"/>

  <!-- set up library filesets -->

  <!-- Libraries that everything needs -->
  <patternset id="lib.common">
    <include name="jasper*.jar"/>
    <include name="ant*.jar"/>
    <include name="cglib*.jar" />
    <include name="commons-collections*.jar" />
    <include name="commons-dbcp*.jar" />
    <include name="commons-lang*.jar" />
    <include name="commons-logging*.jar" />
    <include name="commons-pool*.jar" />
    <include name="commons-digester*.jar" />
    <include name="commons-beanutils*.jar" />
    <include name="libreadline-java*.jar" />
    <include name="log4j*.jar" />
    <include name="postgresql*.jar" />
    <include name="pg*.jar" />
    <include name="mysql*.jar" />
    <include name="torque*.jar" />
    <include name="velocity*.jar" />
    <include name="jena*.jar" />
    <include name="icu4j*.jar"/>
    <include name="MAGE*.jar"/>
    <include name="xerces*.jar"/>
    <include name="xml-apis*.jar"/>
    <include name="p6spy.jar"/>
  </patternset>

  <!-- Ant tasks and unit testing stuff -->
  <patternset id="lib.build">
    <include name="AntDoc*.jar" />
    <include name="catalina-ant*.jar" />
    <include name="junit*.jar" />
    <include name="mockobjects*.jar" />
    <include name="nsuml*.jar" />
    <include name="xmlunit*.jar" />
  </patternset>

  <!-- Libraries relevant to building from UML models -->
  <patternset id="lib.uml">
    <include name="nsuml*.jar" />
  </patternset>

  <!-- Libraries relevant to building from AceDB models and data -->
  <patternset id="lib.acedb">
    <include name="acedb*.jar" />
    <include name="biojava*.jar" />
  </patternset>

  <!-- Antlr library -->
  <patternset id="lib.antlr">
    <include name="antlr*.jar"/>
  </patternset>

  <!-- Checkstyle library -->
  <patternset id="lib.checkstyle">
    <include name="checkstyle*.jar"/>
  </patternset>

  <!-- Jasper libraries -->
  <patternset id="lib.jasper">
    <include name="jasper*.jar"/>
    <include name="ant*.jar"/>
    <include name="cactus*.jar"/>
  </patternset>

  <!-- Libraries that the FlyMine query webapp uses -->
  <patternset id="lib.webapp.flymine">
    <include name="aspect*.jar" />
    <include name="commons*.jar" />
    <include name="jakarta-oro*.jar" />
    <include name="jstl*.jar" />
    <include name="servlet*.jar" />
    <include name="standard*.jar" />
    <include name="struts*.jar" />
  </patternset>

  <!-- set the classpath for the build - basically everything in lib -->
  <path id="base.class.path">
    <pathelement path="${build.java}"/>
    <pathelement path="${build.resources}"/>
    <fileset dir="${lib}">
      <patternset refid="lib.common"/>
      <patternset refid="lib.build"/>
      <patternset refid="lib.webapp.flymine"/>
      <patternset refid="lib.jasper"/>
      <patternset refid="lib.acedb"/>
      <patternset refid="lib.uml"/>
    </fileset>
    <fileset dir="${intermine.dist.path}">
      <include name="intermine*.jar" />
    </fileset>
  </path>

  <path id="project.class.path">
    <path refid="base.class.path"/>
    <fileset dir="${lib}">
      <patternset refid="lib.antlr"/>
    </fileset>
    <pathelement location="${build.model}/datatracking"/>
    <pathelement location="${build.model}/fulldata"/>
  </path>

  <path id="checkstyle.class.path">
    <fileset dir="${lib}">
      <patternset refid="lib.checkstyle"/>
    </fileset>
  </path>

  <path id="models.class.path">
    <path refid="project.class.path"/>
    <pathelement location="${build.model}/mage"/>
    <pathelement location="${build.model}/chado"/>
    <pathelement location="${build.model}/so"/>
    <pathelement location="${build.model}/genomic"/>
    <pathelement location="${build.model}/ensembl"/>
    <pathelement location="${build.model}/rnai"/>
    <pathelement location="${build.model}/orthologue"/>
  </path>

  <path id="acedb.class.path">
    <path refid="project.class.path"/>
    <pathelement location="${build.model}/acedb"/>
  </path>

  <!-- Initialisation targets -->

  <target name="prepare">
    <tstamp>
      <format property="YEAR" pattern="yyyy"/>
      <format property="DTSTAMP" pattern="yyyyMMddHHmm"/>
    </tstamp>

    <mkdir dir="${build}"/>
    <mkdir dir="${build.resources}"/>
    <mkdir dir="${build.resources.test}"/>
    <mkdir dir="${build.model}" />
    <mkdir dir="${build.javadoc}"/>
    <mkdir dir="${build.tmp}"/>

    <mkdir dir="${results}"/>
    <mkdir dir="${results.junit}"/>
    <mkdir dir="${results.checkstyle}"/>
    <mkdir dir="${results.antdoc}"/>

    <copy file="${runtime.properties.local}" tofile="${build.resources}/intermine.properties"/>
    <copy todir="${build.resources}">
      <fileset dir="${resources}/runtime" />
    </copy>
  </target>

  <target name="prepare-dist">
    <mkdir dir="${dist}"/>
    <mkdir dir="${dist.webapp}"/>
    <mkdir dir="${dist.javadoc}"/>
  </target>

  <!-- Help -->
  <target name="help" description="Displays user targets">
    <echo message=""/>
    <echo message="FlyMine build file - available targets are:"/>
    <echo message=""/>
    <echo message="clean                  --> cleans up the directory"/>
    <echo message=""/>
    <echo message="See 'ant -projecthelp' for full target list"/>
  </target>

  <!-- Compilation targets -->

  <!-- Models to build -->

  <target name="prepare-build-model" depends="prepare">
    <unzip src="${intermine.jar.path}" dest="${build}">
      <patternset>
        <include name="build-model.xml"/>
      </patternset>
    </unzip>
  </target>

  <!-- Ensembl anopheles src items -->
    <target name="build-db-ensembl-anoph-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-src-items"/>
    </ant>
  </target>

  <!-- Ensembl drosophila src items -->
    <target name="build-db-ensembl-dros-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-src-items"/>
    </ant>
  </target>

  <!-- Orthologue items -->
  <target name="build-db-orthologue-tgt-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.orthologue-tgt-items"/>
    </ant>
  </target>

  <!-- RNAi items -->
  <target name="build-db-rnai-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.rnai-src-items"/>
    </ant>
  </target>

  <!-- Chado items -->
  <target name="build-db-chado-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.chado-src-items"/>
    </ant>
  </target>

  <!-- Chado main -->
  <target name="build-db-chado-test" depends="prepare-build-model, create-genomic-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.chado-test"/>
    </ant>
  </target>

  <!-- Chado model -->
  <target name="create-indexes-chado-test" depends="build-db-chado-test">
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <property name="model.src" value="${model}/chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.chado-test"/>
    </ant>
  </target>

  <target name="create-indexes-dros-test" depends="build-db-dros-test">
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <property name="model.src" value="${model}/genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-test"/>
    </ant>
  </target>

  <target name="create-indexes-anoph-test" depends="build-db-anoph-test">
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <property name="model.src" value="${model}/genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-test"/>
    </ant>
  </target>

  <!-- Data Translation targets -->

  <!-- Build Chado target items database -->
  <target name="build-db-chado-target-items" depends="convert-chado">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.chado-tgt-items"/>
    </ant>
  </target>

 <target name="translate-chado" depends="build-db-chado-target-items">
    <java classname="org.flymine.dataconversion.ChadoDataTranslator" fork="true"
      maxmemory="800m" >
      <!-- <jvmarg value="-Xrunjmp" /> -->
      <classpath refid="models.class.path" />
      <arg value="os.chado-src-items" />
      <arg value="osw.chado-tgt-items" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="N3" />
      <arg value="http://www.flymine.org/model/genomic#" />
    </java>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.chado-tgt-items"/>
    </ant>

  </target>

  <!-- Build ensembl-anoph-tgt-items database -->
  <target name="build-db-ensembl-anoph-tgt-items" depends="convert-ensembl">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-tgt-items"/>
    </ant>
  </target>


 <target name="translate-ensembl-anopheles" depends="build-db-ensembl-anoph-tgt-items">
    <java classname="org.flymine.dataconversion.EnsemblDataTranslator" fork="true"
      maxmemory="800m" >
      <classpath refid="models.class.path" />
      <arg value="os.ensembl-anoph-src-items" />
      <arg value="osw.ensembl-anoph-tgt-items" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="N3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="Anopheles Gambiae" />
      <arg value="A. gambiae" />
      <arg value="7165" />
    </java>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-tgt-items"/>
    </ant>
  </target>


  <!-- Build ensembl-dros-tgt-items database -->
  <target name="build-db-ensembl-dros-tgt-items" depends="convert-ensembl">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-tgt-items"/>
    </ant>
  </target>

 <target name="translate-ensembl-drosophila" depends="build-db-ensembl-dros-tgt-items">
    <java classname="org.flymine.dataconversion.EnsemblDataTranslator" fork="true"
      maxmemory="800m" >
      <classpath refid="models.class.path" />
      <arg value="os.ensembl-dros-src-items" />
      <arg value="osw.ensembl-dros-tgt-items" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="N3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="Drosophila Melanogaster" />
      <arg value="D. melanogaster" />
      <arg value="7227" />
    </java>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-tgt-items"/>
    </ant>
  </target>

  <!-- model tests -->

  <target name="chado-test" depends="convert-chado">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <property name="model.src" value="${model}/chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

<!--
  <target name="rnai-test" depends="build-rnai">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="rnai"/>
      <property name="model.src" value="${model}/rnai"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="orthologue-test" depends="build-orthologue">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="orthologue"/>
      <property name="model.src" value="${model}/orthologue"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>
-->
  <target name="mage-test" depends="convert-mage">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <property name="model.src" value="${model}/mage"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="ensembl-test" depends="convert-ensembl">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <property name="model.src" value="${model}/ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="test-models-inc"
          depends="chado-test, mage-test, ensembl-test">
    <antcall target="test-report"/>
  </target>

  <target name="test-models-full"
          depends="create-production-model, chado-test, mage-test, ensembl-test">
    <antcall target="test-report"/>
  </target>

  <!-- Stress build targets (currently uses ace model) -->

  <!-- generate acedb model from acemodel file -->
  <target name="build-acedb" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-model-from-ace" inheritRefs="true">
      <property name="model.name" value="acedb"/>
      <property name="model.src" value="${model}/acedb/"/>
      <reference torefid="class.path" refid="acedb.class.path"/>
    </ant>
  </target>


  <target name="build-db-acedb" depends="build-acedb">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="acedb"/>
      <reference torefid="class.path" refid="acedb.class.path"/>
      <property name="db.name" value="db.acedb"/>
    </ant>
  </target>

  <!-- insert the ace data into the database -->
   <target name="insert-data-acedb" depends="build-db-acedb">
    <taskdef
          name="insert-ace-data"
          classname="org.flymine.dataloader.InsertAceDataTask">
      <classpath refid="acedb.class.path"/>
    </taskdef>

    <insert-ace-data integrationWriter="integration.acedb" user="${acedb.user}" password="${acedb.password}" host="${acedb.host}" port="${acedb.port}">
      <classpath refid="acedb.class.path"/>
    </insert-ace-data>
  </target>

  <!-- test target to put the ace data into the database without deleting what's already there-->
  <target name="insert-only-acedb-data">
    <taskdef
          name="insert-ace-data"
          classname="org.flymine.dataloader.InsertAceDataTask">
      <classpath refid="acedb.class.path"/>
    </taskdef>

    <insert-ace-data integrationWriter="integration.acedb" user="${acedb.user}" password="${acedb.password}" host="${acedb.host}" port="${acedb.port}">
      <classpath refid="acedb.class.path"/>
    </insert-ace-data>
  </target>


  <!-- Production build targets (currently uses testmodel) -->

  <!-- convert chado zargo to FlyMine model -->
  <target name="convert-chado" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-zargo" inheritRefs="true">
      <property name="model.src" value="${model}/chado"/>
      <property name="model.name" value="chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- test out creating java objects from chado model -->
  <target name="retrieve-chado" depends="convert-chado, build-db-chado-src-items">
    <taskdef name="retrieve-chado" classname="org.flymine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-chado database="db.chado" model="chado" osName="osw.chado-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.chado-src-items"/>
    </ant>
  </target>

  <!-- Load data from chado-items into chado-test -->
  <target name="load-chado" depends="prepare-build-model, convert-chado">
    <taskdef name="load-chado" classname="org.flymine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-chado integrationWriter="integration.chado-test" source="os.chado-translated" sourceName="chado"/>
  </target>


  <!-- Build temporary flymine database to hold ensembl anopheles data -->
  <target name="build-db-anoph-test">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-test"/>
    </ant>
  </target>

  <!-- Load data from ensembl-anoph-tmp-items into anoph-test -->
  <target name="load-ensembl-anopheles" depends="prepare-build-model, build-db-anoph-test, create-indexes-anoph-test">
    <taskdef name="load-anoph" classname="org.flymine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-anoph integrationWriter="integration.ensembl-anoph-test" source="os.anoph-translated" sourceName="ensembl"/>
  </target>

  <!-- Load data from ensembl-dros-tgt-items into anoph-test -->
  <target name="load-ensembl-drosophila" depends="prepare-build-model, build-db-dros-test, create-indexes-dros-test">
    <taskdef name="load-dros" classname="org.flymine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-dros integrationWriter="integration.ensembl-dros-test" source="os.ensembl-dros-translated" sourceName="ensembl"/>
  </target>

  <!-- Build temporary flymine database to hold ensembl anopheles data -->
  <target name="build-db-dros-test" depends="create-genomic-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-test"/>
    </ant>
  </target>

  <!-- convert ensembl zargo to FlyMine model -->
  <target name="convert-ensembl" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-zargo" inheritRefs="true">
      <property name="model.src" value="${model}/ensembl"/>
      <property name="model.name" value="ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- retrieve ensembl anopheles data -->
  <target name="retrieve-ensembl-anopheles" depends="convert-ensembl, build-db-ensembl-anoph-src-items">
    <taskdef name="retrieve-ensembl" classname="org.flymine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-ensembl database="db.ensembl" model="ensembl" osName="osw.ensembl-anoph-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-src-items"/>
    </ant>
  </target>

  <!-- retrieve ensembl drosophila data -->
  <target name="retrieve-ensembl-drosophila" depends="convert-ensembl, build-db-ensembl-dros-src-items">
    <taskdef name="retrieve-ensembl" classname="org.flymine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-ensembl database="db.ensembl-dros" model="ensembl" osName="osw.ensembl-dros-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-src-items"/>
    </ant>
  </target>

  <!-- load orthologue/paralogue data -->
  <target name="retrieve-orthologue" depends="build-db-orthologue-tgt-items">
    <taskdef name="retrieve-orthologue" classname="org.flymine.dataconversion.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <concat destfile="${build.tmp}/orthologues">
      <path>
        <fileset dir="/shared/data/orthologues" includes="orthologues.*"/>
      </path>
    </concat>

    <retrieve-orthologue file="${build.tmp}/orthologues" source="orthologue" osName="osw.orthologue-tgt-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.orthologue-tgt-items"/>
    </ant>
  </target>

  <!-- load rnai data -->
  <target name="retrieve-rnai" depends="build-db-rnai-src-items">
    <taskdef name="retrieve-rnai" classname="org.flymine.dataconversion.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-rnai file="/shared/data/RNAi/CE_RNAi.txt" source="rnai" osName="osw.rnai-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.rnai-src-items"/>
    </ant>
  </target>

  <!-- convert MAGE-OM xmi to FlyMine model -->
  <target name="convert-mage" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-xmi" inheritRefs="true">
      <property name="model.src" value="${model}/mage"/>
      <property name="model.name" value="mage"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- test out creating java objects from mage model -->
  <target name="compile-mage" depends="convert-mage">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

   <!-- convert MAGE-OM to OWL -->
   <target name="mage-to-owl" depends="convert-mage">
    <java classname="org.intermine.ontology.InterMine2Owl" fork="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/mage/mage_model.xml" />
      <arg value="${build.model}/mage/mage.n3" />
      <arg value="N3" />
    </java>
  </target>


   <!-- convert chado model to OWL -->
   <target name="chado-to-owl" depends="convert-chado">
    <java classname="org.intermine.ontology.InterMine2Owl" fork="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/chado/chado_model.xml" />
      <arg value="${build.model}/chado/chado.n3" />
      <arg value="N3" />
    </java>
  </target>


  <!-- convert Sequence Ontology (SO) to OWL -->
  <target name="so-to-owl" depends="prepare-build-model">
    <mkdir dir="${build.model}/so" />
    <copy file="${model}/so/sofa.ontology" todir="${build.model}/so/"/>
    <java classname="org.intermine.ontology.Dag2Owl" fork="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/so/sofa.ontology" />
      <arg value="${build.model}/so/sofa.n3" />
      <arg value="http://www.flymine.org/model/so#" />
    </java>
  </target>

  <!-- create merged model from currently merged OWL ontologies
       in build/genomic/genomic.n3  -->
  <target name="create-genomic-model" depends="prepare-genomic-model, prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-owl" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- create merged model from all source OWL ontologies -->
  <target name="create-production-model" depends="remove-genomic, prepare-build-model, merge-rnai-model,
       merge-orthologue-model, merge-go-model, merge-ensembl-model, merge-chado-model, merge-so-model" >
    <antcall target="create-genomic-model"/>
  </target>


  <target name="jar-genomic" depends="prepare-dist, create-genomic-model"
          description="create a jar of the genomic model">
    <ant antfile="${build}/build-model.xml" target="jar" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="model.src" value="${model}/genomic"/>
    </ant>
  </target>

  <!-- if genomic.n3 not copied into build directory then copy it -->
  <target name="prepare-genomic-model" depends="prepare">
    <copy file="${model}/genomic/genomic.n3" todir="${build.model}/genomic/"/>
  </target>

  <!-- remove build/model/genomic/genomic.n3 -->
  <target name="remove-genomic">
    <delete file="${build.model}/genomic/genomic.n3"/>
  </target>

  <!-- merge the chado owl model with the current genomic model in build/model/genomic
      this target file may already be the result of previous merges -->
  <target name="merge-chado-model" depends="prepare-genomic-model, chado-to-owl">
    <copy file="${model}/chado/chado_merge_spec.n3" todir="${build.model}/chado/"/>

    <!-- combine the chado merge_spec with current genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m" >
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/chado/chado_merge_spec.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="N3" />
    </java>

    <!-- merge chado model with target genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m" >
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/chado/chado.n3" />
      <arg value="http://www.flymine.org/model/chado#" />
      <arg value="N3" />
    </java>

  </target>

  <!-- merge so model -->

  <target name="merge-so-model" depends="prepare-genomic-model, so-to-owl">
    <copy file="${model}/so/so_merge_spec.n3" todir="${build.model}/so/"/>

    <!-- combine the so merge_spec with current genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m" >
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/so/so_merge_spec.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="N3" />
    </java>

    <!-- merge so model with target genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m" >
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/so/sofa.n3" />
      <arg value="http://www.flymine.org/model/so#" />
      <arg value="N3" />
    </java>

  </target>

  <!-- merge rnai model -->

  <target name="merge-rnai-model" depends="prepare-genomic-model">
    <copy file="${model}/rnai/rnai_merge_spec.n3" todir="${build.model}/rnai/"/>
    <copy file="${model}/rnai/rnai.n3" todir="${build.model}/rnai/"/>

    <!-- combine the rnai merge_spec with current genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m" >
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/rnai/rnai_merge_spec.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="N3" />
    </java>

    <!-- merge rnai model with target genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m" >
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/rnai/rnai.n3" />
      <arg value="http://www.flymine.org/model/rnai#" />
      <arg value="N3" />
    </java>

  </target>


  <target name="merge-go-model" depends="prepare-genomic-model">
    <copy file="${model}/go/go_merge_spec.n3" todir="${build.model}/go/"/>

    <!-- combine the go merge_spec with current genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m" >
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/go/go_merge_spec.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="N3" />
    </java>
  </target>


  <!-- merge ensembl owl -->

   <!-- convert ensembl model to OWL -->
   <target name="ensembl-to-owl" depends="convert-ensembl">
    <java classname="org.intermine.ontology.InterMine2Owl" fork="true">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/ensembl/ensembl_model.xml" />
      <arg value="${build.model}/ensembl/ensembl.n3" />
      <arg value="N3" />
    </java>
  </target>

  <!-- merge the ensembl owl model with the current genomic model in build/model/genomic
      this target file may already be the result of previous merges -->
  <target name="merge-ensembl-model" depends="prepare-genomic-model, ensembl-to-owl">
    <copy file="${model}/ensembl/ensembl_merge_spec.n3" todir="${build.model}/ensembl/"/>

    <!-- combine the ensembl_merge_spec with current genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
       maxmemory="800m">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/ensembl/ensembl_merge_spec.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="N3" />
    </java>

    <!-- merge ensembl model with target genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m">
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/ensembl/ensembl.n3" />
      <arg value="http://www.flymine.org/model/ensembl#" />
      <arg value="N3" />
    </java>
  </target>

  <!-- merge orthologue model -->
  <target name="merge-orthologue-model" depends="prepare-genomic-model">
    <copy file="${model}/orthologue/orthologue.n3" todir="${build.model}/orthologue/"/>

    <!-- merge orthologue model with target genomic model -->
    <java classname="org.intermine.ontology.MergeOwl" fork="true"
      maxmemory="800m" >
      <classpath refid="models.class.path" />
      <arg value="${build.model}/genomic/genomic.n3" />
      <arg value="http://www.flymine.org/model/genomic#" />
      <arg value="${build.model}/orthologue/orthologue.n3" />
      <arg value="http://www.flymine.org/model/orthologue#" />
      <arg value="N3" />
    </java>

  </target>

  <target name="build-db-production" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.production"/>
    </ant>
  </target>

  <target name="junit-clean" depends="prepare">
    <delete>
      <fileset dir="${results.junit}" includes="TEST-*.xml"/>
    </delete>
  </target>

  <target name="test-report" depends="prepare"
          description="generate a test report for all the unit tests" >
    <junitreport todir="${results.junit}">
      <fileset dir="${results.junit}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${results.junit}"/>
    </junitreport>
  </target>

  <!-- Java checkstyle targets -->
  <target name="checkstyle" depends="prepare"
          description="checks the coding style of all the java files in the project">
    <taskdef resource="checkstyletask.properties">
      <classpath refid="checkstyle.class.path"/>
    </taskdef>
    <checkstyle config="${resources}/checkstyle-config.xml"
                failureProperty="checkstyle.failure"
                failOnViolation="false">
      <classpath refid="base.class.path"/>
      <formatter type="xml" tofile="${results.checkstyle}/checkstyle_report.xml" />
      <fileset dir="${src.java}">
        <include name="**/*.java" />
      </fileset>
      <property key="checkstyle.header.file" value="${resources}/copyright_header.txt"/>
    </checkstyle>

    <style in="${results.checkstyle}/checkstyle_report.xml"
           out="${results.checkstyle}/checkstyle_report.html"
           style="${resources}/checkstyle-frames.xsl" />

  </target>

  <!-- Javadoc targets -->

  <target name="javadoc" depends="prepare"
          description="generate the javadoc">
    <javadoc destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="FlyMine API" additionalparam="-breakiterator">
      <classpath refid="project.class.path"/>
      <fileset dir="${src.java}" defaultexcludes="yes" />
      <doctitle><![CDATA[<h1>FlyMine</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; ${YEAR} FlyMine. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>


  <!-- Web targets -->

  <target name="build-www" depends="prepare"
          description="build the static website" >

    <available file="${src.www-internal}" type="dir" property="www-internal.present"/>

    <antcall target="www-external" />
    <antcall target="www-internal" />

  </target>

    <!-- main web site -->
  <target name="www-external" depends="prepare">

    <!-- make sure files dependent on sidebar are handled correctly -->
    <dependset>
      <srcfilelist dir="${src.www}" files="sidebar.xml,flymine.xsl" />
      <targetfileset dir="${build.www}" includes="**/*.html" />
    </dependset>

    <dependset>
      <srcfilelist dir="${bin}" files="diatopng,pstopng,buildpngfromdia,pnmscalealpha" />
      <targetfileset dir="${build.www}" includes="**/*.png" />
    </dependset>

    <dependset>
      <srcfilelist dir="${bin}" files="buildgiffrompng" />
      <targetfileset dir="${build.www}" includes="**/*.gif" />
    </dependset>

    <copy todir="${build.www}">
      <fileset dir="${src.www}">
        <exclude name="**/*.xml" />
        <exclude name="**/*.xsl" />
        <exclude name="**/*.dia" />
      </fileset>
    </copy>

    <style basedir="${src.www}" destdir="${build.www}" extension=".html"
      style="${src.www}/flymine.xsl" includes="**/*.xml">
      <classpath refid="project.class.path"/>
      <param name="basedir" expression="${www.location}" />
    </style>

    <apply executable="bin/buildpngfromdia" parallel="false" dest="${build.www}">
      <fileset dir="${src.www}">
        <include name="**/*.dia" />
      </fileset>
      <mapper type="glob" from="*.dia" to="*.png" />
      <srcfile />
      <targetfile />
    </apply>

    <apply executable="bin/buildgiffrompng" parallel="false" dest="${build.www}">
      <fileset dir="${build.www}">
        <include name="**/*.png" />
      </fileset>
      <mapper type="glob" from="*.png" to="*.gif" />
      <srcfile />
      <targetfile />
    </apply>
  </target>

    <!-- internal web site -->
  <target name="www-internal" depends="prepare"
          if="www-internal.present" >
    <copy todir="${build.www-internal}">
      <fileset dir="${src.www-internal}">
        <exclude name="**/*.xml" />
        <exclude name="**/*.xsl" />
        <exclude name="**/*.dia" />
      </fileset>
    </copy>

    <style basedir="${src.www-internal}" destdir="${build.www-internal}" extension=".html"
      style="${src.www}/flymine.xsl" includes="**/*.xml">
      <classpath refid="project.class.path"/>
      <param name="basedir" expression="${www.location}" />
    </style>

    <apply executable="bin/buildpngfromdia" parallel="false" dest="${build.www-internal}">
      <fileset dir="${src.www-internal}">
        <include name="**/*.dia" />
      </fileset>
      <mapper type="glob" from="*.dia" to="*.png" />
      <srcfile />
      <targetfile />
    </apply>
    <apply executable="bin/buildgiffrompng" parallel="false" dest="${build.www-internal}">
      <fileset dir="${build.www-internal}">
        <include name="**/*.png" />
      </fileset>
      <mapper type="glob" from="*.png" to="*.gif" />
      <srcfile />
      <targetfile />
    </apply>

  </target>


  <!-- Webapp targets -->

  <target name="prepare-webapp" depends="prepare,prepare-dist">
    <mkdir dir="${build.webapp}/flymine"/>
    <mkdir dir="${build.webapp}/flymine/images"/>
    <mkdir dir="${build.webapp}/flymine/model"/>
    <mkdir dir="${build.webapp}/flymine/META-INF"/>
    <mkdir dir="${build.webapp}/flymine/WEB-INF"/>
    <mkdir dir="${build.webapp}/flymine/WEB-INF/classes"/>
    <mkdir dir="${build.webapp}/flymine/WEB-INF/lib"/>
    <mkdir dir="${build.webapp}/flymine/WEB-INF/src"/>

    <copy todir="${build.webapp}/flymine">
      <fileset dir="${src.webapp}"/>
      <fileset dir="${src.www}" includes="flymine.css"/>
    </copy>
    <copy todir="${build.webapp}/flymine/images">
      <fileset dir="${resources}/webapps/flymine/images"/>
      <fileset dir="${src.www}/images"/>
    </copy>
    <copy todir="${build.webapp}/flymine/WEB-INF">
      <fileset dir="${resources}/webapps/flymine" excludes="images/**, *.properties"/>
    </copy>
    <copy todir="${build.webapp}/flymine/WEB-INF/classes">
      <fileset dir="${resources}/webapps/flymine" includes="*.properties"/>
    </copy>
    <copy todir="${build.webapp}/flymine/WEB-INF/lib">
      <fileset dir="${lib}">
        <patternset refid="lib.common"/>
        <patternset refid="lib.antlr"/>
        <patternset refid="lib.webapp.flymine"/>
      </fileset>
      <fileset dir="${dist}" includes="flymine*.jar"/>
    </copy>

    <copy todir="${build.webapp}/flymine/META-INF" file="${resources}/webapps/flymine/context.xml"/>
    <replace file="${build.webapp}/flymine/META-INF/context.xml" token="@@@REPLACE_PATH@@@" value="${webapp.path}"/>
  </target>

  <target name="build-webapp" depends="prepare-webapp"
    description="Build the FlyMine web application">

    <copy todir="${build.tmp}" file="${resources}/webapps/flymine/web.xml"/>


    <!-- this precompilation step is optional -->
    <antcall target="precompile-jsp"/>

    <delete file="${build.webapp}/flymine/WEB-INF/web.xml"/>
    <war destfile="${dist.webapp}/flymine.war" webxml="${build.tmp}/web.xml">
      <fileset dir="${build.webapp}/flymine"/>
    </war>

  </target>

  <target name="precompile-jsp">
    <jspc srcdir="${build.webapp}/flymine"
      destdir="${build.webapp}/flymine/WEB-INF/src"
      package="org.flymine.jsp"
      verbose="9"
      webinc="${build.tmp}/generated-web.xml">
      <include name="**/*.jsp"/>
      <!-- have to exclude index.jsp because listed as a welcome-file in web.xml -->
      <exclude name="index.jsp"/>
      <classpath refid="base.class.path"/>
    </jspc>

    <delete>
      <fileset dir="${build.webapp}/flymine" includes="**/*.jsp" excludes="**/WEB-INF/** index.jsp"/>
    </delete>

    <loadfile property="generated.xml" srcFile="${build.tmp}/generated-web.xml"/>

    <replace file="${build.tmp}/web.xml" value="${generated.xml}">
      <!-- can't use normal token as xml must be parseable before this replacement -->
      <replacetoken><![CDATA[<!--@JSPC_INCLUDE@-->]]></replacetoken>
    </replace>

    <javac
      srcdir="${build.webapp}/flymine/WEB-INF/src"
      destdir="${build.webapp}/flymine/WEB-INF/classes"
      listfiles="yes"
      depend="yes">
      <classpath refid="base.class.path"/>
    </javac>

    <!-- don't need the .java files -->
    <delete dir="${build.webapp}/flymine/WEB-INF/src"/>
  </target>

  <target name="build-production-webapp" depends="prepare-webapp, jar-genomic"
    description="Build a FlyMine webapp including the test classes and libraries">
    <ant antfile="${build}/build-model.xml" target="add-model-to-webapp" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="model.src" value="${model}/genomic"/>
    </ant>

    <antcall target="build-webapp"/>
  </target>

  <!-- Packaging/distribution targets -->

  <target name="dist-www" depends="prepare-dist,build-www"
          description="makes the static website available for distribution">
    <copy todir="${dist.www}">
      <fileset dir="${build.www}">
      </fileset>
    </copy>
  </target>

  <target name="dist-javadoc" depends="prepare-dist,javadoc"
          description="makes the javadoc available for distribution">
     <copy todir="${dist.javadoc}">
      <fileset dir="${build.javadoc}">
      </fileset>
    </copy>
  </target>


  <!-- Cleaning-up targets -->

  <target name="clean"
          description="clean up generated files">
    <delete dir="${build}"/>
    <delete dir="${results}"/>
    <delete>
      <fileset dir=".">
        <include name="junit*.properties"/>
        <include name="velocity.log*"/>
        <include name="flymine.log*"/>
      </fileset>
    </delete>
  </target>

  <target name="clean-code"
          description="clean up all generated and compiled code">
    <delete dir="${build.resources}"/>
    <delete>
    <fileset dir=".">
      <include name="velocity.log*"/>
      <include name="flymine.log*"/>
    </fileset>
    </delete>
    <antcall target="prepare" />
  </target>

  <target name="distclean" depends="clean"
          description="clean up all distribution files">
    <delete dir="${dist}"/>
  </target>

  <!-- AntDoc target -->

  <taskdef name="AntDoc" classname="org.ed.pack.ant.AntDoc">
    <classpath refid="project.class.path"/>
  </taskdef>

   <target name="ant-doc">
     <AntDoc destination="${results.antdoc}" buildfile="${ant.file}"/>
   </target>
</project>
