<project name="flymine" default="help" basedir=".">
  <description>FlyMine build file</description>

  <!-- SETUP TARGETS -->

  <!-- Property setup targets -->
  <!-- buildtime and runtime settings -->
  <property name="build.properties.local" value="${user.home}/build.properties.${ant.project.name}" />

  <property file="${build.properties.local}"/>
  <property file="build.properties"/>

  <property name="runtime.properties.local" value="${user.home}/intermine.properties" />

  <!-- used by build-model.xml -->
  <property name="namespace" value="http://www.flymine.org/model"/>

  <!-- used by build-model.xml -->
  <property name="packagename" value="org.flymine.model"/>

  <property name="intermine.path" location="../intermine"/>
  <property name="intermine.dist.path" location="${intermine.path}/dist"/>
  <property name="intermine.jar.path" location="${intermine.dist.path}/intermine-all.jar"/>
  <property name="intermine.war.path" location="${intermine.dist.path}/webapp/intermine.war"/>
  <property name="webservice.war.path" location="${intermine.dist.path}/webapp/webservice.war"/>
  <property name="webservice-client.jar.path" location="${intermine.dist.path}/webservice-client.jar"/>

  <!-- libraries and binaries -->
  <property name="lib" location="lib"/>
  <property name="bin" location="bin"/>

  <!-- source directories -->
  <property name="src" location="src"/>
  <property name="src.java" location="${src}/java"/>
  <property name="src.test" location="${src}/test"/>

  <!-- resources directory -->
  <property name="resources" location="resources"/>

  <!-- model directory -->
  <property name="model" location="model"/>

  <!-- build directories -->
  <property name="build" location="build"/>
  <property name="build.java" location="${build}/java"/>
  <property name="build.resources" location="${build}/resources"/>
  <property name="build.resources.test" location="${build.resources}/test"/>
  <property name="build.test" location="${build}/test"/>
  <property name="build.model" location="${build}/model" />
  <property name="build.src.java" location="${build}/javasrc"/>
  <property name="build.src.test" location="${build}/testsrc"/>
  <property name="build.javadoc" location="${build}/api"/>
  <property name="build.webapp" location="${build}/webapp"/>
  <property name="build.webapp.model" location="${build.webapp}/model"/>
  <property name="build.tmp" location="${build}/tmp"/>
  <property name="build.gbrowse" location="${build}/gbrowse"/>
  <property name="build.gbrowse.images" location="${build.gbrowse}/images"/>
  <property name="build.gbrowse.data" location="${build.gbrowse}/data"/>
  <property name="build.webapp.intermine.lib" location="${build.webapp}/intermine/WEB-INF/lib"/>
  <property name="build.webservice.lib" location="${build.webapp}/webservice/WEB-INF/lib"/>

  <!-- results directories -->
  <property name="results"  location="results"/>
  <property name="results.junit"  location="${results}/junit"/>
  <property name="results.checkstyle"  location="${results}/checkstyle"/>
  <property name="results.antdoc" location="${results}/antdoc"/>

  <!-- distributable directories -->
  <property name="dist"  location="dist"/>
  <property name="dist.www"  location="${dist}/www"/>
  <property name="dist.webapp"  location="${dist}/webapp"/>
  <property name="dist.javadoc"  location="${dist.www}/api"/>

  <!-- deafult setting for create-indexes in build-model.xml -->
  <property name="create.attribute.indexes" value="false"/>

  <!-- file data sources -->
  <property name="flybase.chado" location="/shared/data/flybase/release_4_0"/>
  <property name="flybase.chado.fasta" location="${flybase.chado}/fasta"/>
  <property name="flybase.chado.gff" location="${flybase.chado}/gff"/>
  <property name="flybase.uniprot.link.file" location="${flybase.chado}/cg2uniprot.txt"/>

  <!-- set up library filesets -->

  <!-- Ant tasks and unit testing stuff -->
  <patternset id="lib.build">
    <include name="AntDoc*.jar"/>
    <include name="junit*.jar"/>
    <include name="catalina-ant.jar"/>
    <include name="biojava*.jar"/>
    <include name="xmlunit*.jar"/>
  </patternset>

  <!-- Checkstyle library -->
  <patternset id="lib.checkstyle">
    <include name="checkstyle*.jar"/>
  </patternset>

  <!-- Webapp libraries -->
  <patternset id="lib.webapp">
    <include name="biojava*.jar"/>
  </patternset>

  <!-- The FlyMine jar file -->
  <patternset id="lib.flymine">
    <include name="flymine.jar"/>
  </patternset>

  <patternset id="lib.models">
    <include name="**/lib/*.jar"/>
  </patternset>



  <!-- set the classpath for the build - basically everything in lib -->
  <path id="base.class.path">
    <pathelement path="${build.java}"/>
    <pathelement path="${build.resources}"/>
    <fileset dir="${lib}">
      <patternset refid="lib.build"/>
    </fileset>
    <fileset dir="${intermine.dist.path}">
      <include name="intermine-all.jar" />
    </fileset>
  </path>

  <path id="genomic.class.path">
    <path refid="base.class.path"/>
    <pathelement location="${build.model}/genomic"/>
  </path>

  <path id="webapp.class.path">
    <path refid="base.class.path"/>
    <path refid="genomic.class.path"/>
    <fileset dir="${build.webapp.intermine.lib}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="webservice.class.path">
    <path refid="base.class.path"/>
    <fileset dir="${build.webservice.lib}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="checkstyle.class.path">
    <fileset dir="${lib}">
      <patternset refid="lib.checkstyle"/>
    </fileset>
  </path>

  <path id="models.class.path">
    <path refid="base.class.path"/>
    <path refid="genomic.class.path"/>
    <pathelement location="${build.model}/userprofile"/>
    <pathelement location="${build.model}/acedb"/>
    <pathelement location="${build.model}/mage"/>
    <pathelement location="${build.model}/chado"/>
    <pathelement location="${build.model}/so"/>
    <pathelement location="${build.model}/ensembl"/>
    <pathelement location="${build.model}/ensembl-human"/>
    <pathelement location="${build.model}/rnai"/>
    <pathelement location="${build.model}/long_oligo"/>
    <pathelement location="${build.model}/tiling_path"/>
    <pathelement location="${build.model}/flyreg"/>
    <pathelement location="${build.model}/drosdel"/>
    <pathelement location="${build.model}/orthologue"/>
    <pathelement location="${build.model}/phenotype"/>
    <pathelement location="${build.model}/fulldata"/>
    <pathelement location="${build.model}/psi"/>
    <pathelement location="${build.model}/go"/>
    <pathelement location="${build.model}/taxonomy"/>
    <pathelement location="${build.model}/uniprot"/>
    <pathelement location="${build.model}/protein_structure"/>
    <pathelement location="${build.model}/ucsc"/>
    <fileset dir="${model}">
      <patternset refid="lib.models"/>
    </fileset>
  </path>

  <path id="project.class.path">
    <path refid="base.class.path"/>
    <fileset dir="${dist}">
      <include name="intermine*.jar" />
    </fileset>
  </path>

  <path id="test.class.path">
    <pathelement path="${build.resources.test}"/>
    <pathelement location="${build.test}"/>
    <path refid="models.class.path"/>
  </path>


  <!-- ============================== GLOBAL TASKDEFS ============================= -->

  <!-- taskdefs -->

  <taskdef name="merge-additions" classname="org.intermine.task.ModelMergerTask">
    <classpath refid="models.class.path"/>
  </taskdef>


  <!-- presetdefs -->

  <presetdef name="merge-genomic-additions">
    <merge-additions inputModelFile="${build.model}/genomic/genomic_model.xml"
                     additionsFile="${additionsFile}"
                     outputFile="${build.model}/genomic/genomic_model.xml"/>
  </presetdef>

  <!-- ========================= INITIALISATION TARGETS =========================== -->

  <target name="prepare">
    <tstamp>
      <format property="YEAR" pattern="yyyy"/>
      <format property="DTSTAMP" pattern="yyyyMMddHHmm"/>
    </tstamp>

    <mkdir dir="${dist}"/>
    <mkdir dir="${dist.webapp}"/>
    <mkdir dir="${dist.javadoc}"/>

    <mkdir dir="${build}"/>
    <mkdir dir="${build.java}"/>
    <mkdir dir="${build.resources}"/>
    <mkdir dir="${build.resources.test}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${build.model}" />
    <mkdir dir="${build.model}/fulldata" />
    <mkdir dir="${build.src.java}"/>
    <mkdir dir="${build.src.test}"/>
    <mkdir dir="${build.javadoc}"/>
    <mkdir dir="${build.tmp}"/>
    <mkdir dir="${build.gbrowse}"/>
    <mkdir dir="${build.gbrowse.images}"/>
    <mkdir dir="${build.gbrowse.data}"/>
    <mkdir dir="${build.webapp}"/>
    <mkdir dir="${build.webapp.model}"/>
    <mkdir dir="${build.webapp}/intermine"/>

    <mkdir dir="${results}"/>
    <mkdir dir="${results.junit}"/>
    <mkdir dir="${results.checkstyle}"/>
    <mkdir dir="${results.antdoc}"/>

    <!-- overwrite default.intermine.properties -->
    <copy todir="${build.resources}" file="${resources}/runtime/default.intermine.properties" overwrite="true"/>
    <copy file="${runtime.properties.local}" tofile="${build.resources}/intermine.properties" overwrite="true"/>
    <copy todir="${build.resources}">
      <fileset dir="${resources}/runtime" />
    </copy>
  </target>

  <target name="prepare-test" depends="prepare">
    <copy todir="${build.resources.test}" flatten="true" includeEmptyDirs="false" overwrite="true">
      <fileset dir="${resources}/test/"/>
    </copy>

    <copy todir="${build.src.test}">
      <fileset dir="${src.test}">
        <include name="**/*.java"/>
      </fileset>
    </copy>
    <depend srcdir="${build.src.test}" destdir="${build.test}" closure="yes" dump="yes">
      <classpath>
        <pathelement path="${build.java}"/>
      </classpath>
    </depend>
  </target>

  <target name="compile-test" depends="prepare-test, compile-flymine-java"
          description="compile the java test source" >
    <javac destdir="${build.test}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="test.class.path"/>
      <src path="${build.src.test}" />
    </javac>
  </target>

  <target name="prepare-dist">
    <mkdir dir="${dist}"/>
    <mkdir dir="${dist.webapp}"/>
    <mkdir dir="${dist.javadoc}"/>
  </target>

  <!-- Help -->
  <target name="help" description="Displays user targets">
    <echo message=""/>
    <echo message="FlyMine build file - available targets are:"/>
    <echo message=""/>
    <echo message="clean                  --> cleans up the directory"/>
    <echo message=""/>
    <echo message="See 'ant -projecthelp' for full target list"/>
  </target>

  <!--<target name="new-intermine-jar" depends="prepare">
    <uptodate property="old.intermine.jar.build-model" srcfile="${intermine.jar.path}" targetfile="${build}/build-model.xml"/>
    <uptodate property="old.intermine.jar.build-webapp" srcfile="${intermine.jar.path}" targetfile="${build}/build-webapp.xml"/>
    <condition property="old.intermine.jar">
      <and>
        <isset property="old.intermine.jar.build-model"/>
        <isset property="old.intermine.jar.build-webapp"/>
      </and>
    </condition>
  </target>-->

  <target name="prepare-build-model" depends = "prepare"> <!-- depends="new-intermine-jar" unless="old.intermine.jar"> -->
    <!--<unzip src="${intermine.jar.path}" dest="${build}">
      <patternset>
        <include name="build-model.xml"/>
        <include name="build-webapp.xml"/>
      </patternset>
    </unzip>
    <touch file="${build}/build-model.xml"/>
    <touch file="${build}/build-webapp.xml"/>-->

    <copy file="${intermine.path}/build-model.xml" todir="${build}"/>
    <copy file="${intermine.path}/build-webapp.xml" todir="${build}"/>
  </target>



  <!-- ========== MODEL GENERATION/MERGING TARGETS - ORGANISED BY SOURCE ========== -->

  <!-- ENSEMBL MODEL GENERATION -->

  <!-- convert ensembl zargo to InterMine model -->
  <target name="convert-ensembl" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-zargo" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- merge the ensembl model additions with the current genomic model -->
  <target name="merge-ensembl-model" depends="convert-ensembl, prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/ensembl/ensembl_additions.xml"/>
  </target>



  <!-- CHADO MODEL GENERATION -->

  <!-- convert chado zargo to InterMine model -->
  <target name="convert-chado" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-zargo" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- merge the chado model additions model with the current genomic model -->
  <target name="merge-chado-model" depends="convert-chado, prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/chado/chado_additions.xml"/>
  </target>


  <!-- MAGE MODEL GENERATION -->

  <!-- convert MAGE-OM xmi to InterMine model -->
  <target name="convert-mage" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-xmi" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <property name="namespace" value="http://www.flymine.org/model/mage#"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- merge the mage model additions with the current genomic model -->
  <target name="merge-mage-model" depends="convert-mage, prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/mage/mage_additions.xml"/>
  </target>


  <!-- RNAi MODEL GENERATION -->

  <!-- merge rnai model additions with current genomic model -->
  <target name="merge-rnai-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/rnai/rnai_additions.xml"/>
  </target>

  <!-- SEQUENCE ONTOLOGY MODEL GENERATION -->

  <!-- merge so model additions with current genomic model -->
  <target name="merge-so-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/so/so_additions.xml"/>
  </target>


  <!-- GENE ONTOLOGY MODEL GENERATION -->

  <!-- merge go model additions with current genomic model -->
  <target name="merge-go-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/go/go_additions.xml"/>
  </target>


  <!-- ORTHOLOGUE MODEL GENERATION -->

  <!-- merge orthologue model additions with current genomic model -->
  <target name="merge-orthologue-model" depends="prepare-genomic-model">
  	<merge-genomic-additions additionsFile="${model}/orthologue/orthologue_additions.xml"/>
  </target>

  <!-- PROTEIN_STRUCTURE MODEL GENERATION -->

  <target name="convert-protein_structure" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-xmlschema" inheritRefs="true">
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="model.name" value="protein_structure"/>
      <property name="namespace" value="http://www.flymine.org/model/protein_structure#"/>
    </ant>
  </target>

  <!-- merge protein_structure model additions with current genomic model -->
  <target name="merge-protein_structure-model" depends="prepare-genomic-model, convert-protein_structure">
    <merge-genomic-additions additionsFile="${model}/protein_structure/protein_structure_additions.xml"/>
  </target>

  <!-- PSI MODEL GENERATION -->

  <!-- convert PSI-DEV XML-Schema to InterMine model XML -->
  <target name="convert-psi" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-xmlschema" inheritRefs="true">
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="model.name" value="psi"/>
      <property name="namespace" value="http://www.flymine.org/model/psi#"/>
    </ant>
  </target>

  <!-- merge psi model additions with current genomic model -->
  <target name="merge-psi-model" depends="prepare-genomic-model, convert-psi">
    <merge-genomic-additions additionsFile="${model}/psi/psi_additions.xml"/>
  </target>

  <!-- SHORTCUTS -->

  <!-- merge additional shortcut fields with genomic model -->
  <target name="merge-shortcuts" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/genomic/shortcuts.xml"/>
  </target>


  <!-- PHENOTYPE MODEL GENERATION -->
  <target name="merge-phenotype-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/phenotype/phenotype_additions.xml"/>
  </target>


  <!-- FlyReg MODEL GENERATION -->

  <!-- merge flyreg model additions with current genomic model -->
  <target name="merge-flyreg-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/flyreg/flyreg_additions.xml"/>
  </target>

  <!-- Long Oligo MODEL GENERATION -->

  <!-- merge long_oligo model additions with current genomic model -->
  <target name="merge-long_oligo-model" depends="prepare-genomic-model">
     <merge-genomic-additions additionsFile="${model}/long_oligo/long_oligo_additions.xml"/>
  </target>

  <!-- Tiling Path MODEL GENERATION -->

  <!-- merge tiling_path model additions with current genomic model -->
  <target name="merge-tiling_path-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/tiling_path/tiling_path_additions.xml"/>
  </target>

  <!-- drosdel MODEL GENERATION -->

  <!-- merge drosdel model additions with current genomic model -->
  <target name="merge-drosdel-model" depends="prepare-genomic-model">
<!--    <merge-genomic-additions additionsFile="${model}/drosdel/drosdel_additions.xml"/>-->
  </target>


  <!-- UNIPROT MODEL GENERATION -->

  <!-- convert UNIPROT XML-Schema to InterMine model XML -->
  <target name="convert-uniprot" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-xmlschema" inheritRefs="true">
      <property name="model.name" value="uniprot"/>
      <property name="pkg" value="org.flymine.model.uniprot"/>
      <property name="build.model.dir" value="${build.model}/uniprot"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- merge uniprot model additions with current genomic model -->
  <target name="merge-uniprot-model" depends="prepare-genomic-model, convert-uniprot">
    <merge-genomic-additions additionsFile="${model}/uniprot/uniprot_additions.xml"/>
  </target>


  <!-- create merged model from core genomic model and all model additions -->
  <target name="create-production-model" depends="remove-genomic, prepare-build-model,
                merge-orthologue-model, merge-psi-model, merge-rnai-model,
                merge-ensembl-model, merge-phenotype-model,
                merge-go-model, merge-uniprot-model,
                merge-protein_structure-model, merge-so-model,
                merge-flyreg-model, merge-tiling_path-model, merge-long_oligo-model,
                merge-chado-model, merge-shortcuts">
  </target>


  <!-- create class files from a model in an ObjectStore -->
  <target name="compile-genomic-model-from-db" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-model-from-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <property name="db.name" value="db.production"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- create java objects for the genomic model -->
  <target name="compile-genomic-model" depends="create-production-model">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="jar-genomic" depends="compile-genomic-model"
          description="create a jar of the genomic model">
    <ant antfile="${build}/build-model.xml" target="jar" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- copy genomic.xml to build/genomic/genomic_model.xml -->
  <target name="prepare-genomic-model" depends="prepare">
    <copy file="${model}/genomic/core.xml" tofile="${build.model}/genomic/genomic_model.xml"/>
  </target>

  <!-- remove build/model/genomic/genomic_model.xml -->
  <target name="remove-genomic">
    <delete file="${build.model}/genomic/genomic_model.xml"/>
  </target>


  <!-- ========== DATA LOADING PIPELINE - ORGANISED BY SOURCE ========== -->


  <!-- ENSEMBL DROSOPHILA PIPELINE -->

  <!-- build ensembl drosophila src items database -->
  <target name="build-db-ensembl-dros-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-src-items"/>
      <property name="objectstore.name" value="os.ensembl-dros-src-items-std"/>
    </ant>
  </target>

  <!-- retrieve ensembl drosophila data -->
  <target name="retrieve-ensembl-drosophila" depends="convert-ensembl, build-db-ensembl-dros-src-items">
    <taskdef name="retrieve-ensembl" classname="org.intermine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-ensembl database="db.ensembl-drosophila" model="ensembl" osName="osw.ensembl-dros-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-dros-src-items-std"/>
    </ant>
  </target>

  <!-- translate ensembl drosophila -->
  <target name="translate-ensembl-drosophila" depends="convert-ensembl, compile-ensembl-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-dros-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-dros-tgt-items-std"/>
    </ant>
    <copy file="${model}/ensembl/ensembl_mappings" toDir="${build.model}/ensembl"/>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.EnsemblDataTranslator"
                    source="os.ensembl-dros-src-items"
                    target="osw.ensembl-dros-tgt-items"
                    srcModel="ensembl"
                    tgtModel="genomic"
                    organism="DM"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-dros-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.ensembl-dros-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- Load data from ensembl-dros-tgt-items into production -->
  <target name="load-ensembl-drosophila" depends="prepare-build-model, copy-genomic-config">
    <taskdef name="load-dros" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-dros integrationWriter="integration.production" source="os.ensembl-dros-translated" sourceName="ensembl-dros"/>
  </target>


  <!-- ENSEMBL ANOPHELES PIPELINE -->

  <!-- build ensembl anopheles src items database -->
  <target name="build-db-ensembl-anoph-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-src-items"/>
      <property name="objectstore.name" value="os.ensembl-anoph-src-items-std"/>
    </ant>
  </target>

  <!-- retrieve ensembl anopheles data -->
  <target name="retrieve-ensembl-anopheles" depends="convert-ensembl, build-db-ensembl-anoph-src-items">
    <taskdef name="retrieve-ensembl" classname="org.intermine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-ensembl database="db.ensembl-anopheles" model="ensembl" osName="osw.ensembl-anoph-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-anoph-src-items-std"/>
    </ant>
  </target>

  <!-- translate ensembl anopheles -->
  <target name="translate-ensembl-anopheles" depends="convert-ensembl, compile-ensembl-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-anoph-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-anoph-tgt-items-std"/>
    </ant>
    <copy file="${model}/ensembl/ensembl_mappings" toDir="${build.model}/ensembl"/>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.EnsemblDataTranslator"
                    source="os.ensembl-anoph-src-items"
                    target="osw.ensembl-anoph-tgt-items"
                    srcModel="ensembl"
                    tgtModel="genomic"
                    organism="AGP"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-anoph-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.ensembl-anoph-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- Load data from ensembl anopheles tgt items into production -->
  <target name="load-ensembl-anopheles" depends="prepare-build-model, copy-genomic-config">
    <taskdef name="load-anoph" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-anoph integrationWriter="integration.production" source="os.ensembl-anoph-translated" sourceName="ensembl-anoph"/>
  </target>


  <!-- CHADO PIPELINE -->

  <!-- Build Chado src items database -->
  <target name="build-db-chado-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.chado-src-items"/>
      <property name="objectstore.name" value="os.chado-src-items-std"/>
    </ant>
  </target>


  <target name="filter-chado" depends="prepare-build-model, compile-chado-java, compile-flymine-java">
    <taskdef
      name="filter-chado"
      classname="org.flymine.dataconversion.FilterChadoTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <filter-chado tgtDir="${build.tmp}">
      <fileset dir="/shared/data/flybase/release_4_0/gff">
        <include name="*.gff"/>
      </fileset>
    </filter-chado>
  </target>

  <!-- filter only chromosome 4 of Chado for creating small databases -->
  <target name="filter-chado-small" depends="prepare-build-model, compile-chado-java, compile-flymine-java">
    <taskdef
      name="filter-chado"
      classname="org.flymine.dataconversion.FilterChadoTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <filter-chado tgtDir="${build.tmp}">
      <fileset dir="/shared/data/flybase/release_4_0/gff">
        <include name="*-4-*.gff"/>
      </fileset>
    </filter-chado>
  </target>

  <!--load retrieve chado GFF3 data-->
  <target name="retrieve-chado" depends="prepare-build-model, compile-genomic-model, compile-chado-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.chado-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file converter="org.flymine.dataconversion.GFF3Converter"
                  target="osw.chado-tgt-items"
                  seqClsName="Chromosome"
                  orgAbbrev="DM"
                  infoSourceTitle="FlyBase"
                  model="genomic"
                  handlerClassName="org.flymine.dataconversion.ChadoGFF3RecordHandler">
      <fileset dir="${build.tmp}">
        <include name="*.gff"/>
      </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.chado-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>


  <!-- Load data from chado tgt items into production -->
  <target name="load-chado" depends="prepare-build-model, copy-genomic-config">
    <taskdef name="load-chado" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-chado integrationWriter="integration.production" source="os.chado-translated" sourceName="chado" ignoreDuplicates="true"/>
  </target>

  <target name="build-flybase-production" 
          depends="compile-genomic-java, filter-chado, retrieve-chado, load-chado"/>

  
  <!-- build a production DB from Chado chromosome 4 - for testing -->
  <target name="build-flybase-production-small" 
          depends="compile-genomic-java, filter-chado-small, retrieve-chado, load-chado"/>


  <!-- ENSEMBL ORTHOLOGUES PIPELINE -->

  <!-- retrieve ensembl orthologue/paralogue data into common tgt items database-->
  <target name="retrieve-orthologues-ensembl" depends="prepare-build-model, compile-orthologue-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-orthologue-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.OrthologueConverter"
                  osName="osw.ensembl-orthologue-tgt-items"
                  model="genomic"
                  param1="AG"
                  param2="DM">
      <fileset dir="/shared/data/orthologues/ensembl" includes="orthologues.AG-DM"/>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-orthologue-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- Load data from ensembl orthologues into production -->
  <target name="load-orthologues-ensembl" depends="copy-genomic-config">
    <taskdef name="load-orthologue" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-orthologue integrationWriter="integration.production" source="os.ensembl-orthologue-translated" sourceName="orthologue-ensembl"/>
  </target>


  <!-- INPARANOID ORTHOLOGUES PIPELINE -->

  <!-- retrieve inparanoid orthologue data into common tgt items database -->
  <target name="retrieve-orthologues-inparanoid" depends="prepare-build-model, compile-orthologue-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.inparanoid-orthologue-tgt-items-std"/>
    </ant>
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.InparanoidConverter"
                  osName="osw.inparanoid-orthologue-tgt-items" model="genomic">
      <fileset dir="/shared/data/orthologues/inparanoid" includes="orthologues.*"/>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.inparanoid-orthologue-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- Load data from inparanoid orthologues into production -->
  <target name="load-orthologues-inparanoid" depends="copy-genomic-config">
    <taskdef name="load-orthologue" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-orthologue integrationWriter="integration.production" source="os.inparanoid-orthologue-translated" 
              sourceName="orthologue-inparanoid" ignoreDuplicates="true"/>
  </target>


  <!-- RNAi PIPELINE -->

  <!-- Build RNAi src items database -->

  <!-- retrieve rnai data into src items database -->
  <path id="rnai.class.path">
    <path refid="models.class.path"/>
    <pathelement location="${model}/rnai/resources"/>
  </path>

  <target name="retrieve-rnai" depends="prepare, compile-rnai-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.rnai-tgt-items-std"/>
    </ant>
    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="rnai.class.path"/>
    </taskdef>
    <convert-file clsName="org.flymine.dataconversion.RNAiConverter"
                  osName="osw.rnai-tgt-items" model="rnai">
      <fileset dir="/shared/data/RNAi" includes="*Set.txt"/>
    </convert-file>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.rnai-tgt-items-std"/>
    </ant>
  </target>

  <target name="load-rnai" depends="copy-genomic-config">
    <taskdef name="load-rnai" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-rnai integrationWriter="integration.production" source="os.rnai-translated" sourceName="rnai"/>
  </target>

  <!-- load RNAI into production -->
  <target name="build-rnai-production" depends="retrieve-rnai, load-rnai"/>


  <!-- PHENOTYPE PIPELINE -->

  <!-- load phenotype data -->
  <target name="retrieve-phenotype" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.phenotype-tgt-items-std"/>
    </ant>
    <taskdef name="retrieve-phenotype" classname="org.intermine.task.DagConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-phenotype file="${model}/phenotype/phenotype.ontology" osName="osw.phenotype-tgt-items" termClass="http://www.flymine.org/model/genomic#Phenotype" dagName="Phenotype"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.phenotype-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>


  <target name="load-phenotype"  depends="copy-genomic-config">
    <taskdef name="load-phenotype" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-phenotype integrationWriter="integration.production" source="os.phenotype-translated" sourceName="phenotype"/>
  </target>

  <target name="build-phenotype-production" depends="retrieve-phenotype, load-phenotype"/>

  <!-- PSI PIPELINE -->

  <!-- load psi dag data -->
  <target name="retrieve-psi-dag" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.psi-dag-tgt-items-std"/>
    </ant>
    <taskdef name="retrieve-psi-dag" classname="org.intermine.task.DagConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <retrieve-psi-dag file="${model}/psi/psi-mi.dag" osName="osw.psi-dag-tgt-items" termClass="http://www.flymine.org/model/genomic#ProteinInteractionTerm" dagName="PSI-MI"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.psi-dag-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-psi-dag"  depends="copy-genomic-config">
    <taskdef name="load-psi-dag" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-psi-dag integrationWriter="integration.production" source="os.psi-dag-translated" sourceName="psi-dag"/>
  </target>

  <target name="retrieve-psi-hybrigenics" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.psi-src-items-std"/>
    </ant>
    <taskdef name="convert-xml" classname="org.intermine.task.XmlConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <convert-xml schema="${model}/psi/psi.xsd" model="psi" osName="osw.psi-src-items">
      <fileset dir="/shared/data/ProteinInteractions">
        <include name="droso*.xml"/>
      </fileset>
    </convert-xml>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.psi-src-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
    </ant>
  </target>

  <target name="retrieve-psi-intact" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.psi-src-items-std"/>
    </ant>
    <taskdef name="convert-xml" classname="org.intermine.task.XmlConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <convert-xml schema="${model}/psi/psi.xsd"
                 model="psi"
                 osName="osw.psi-src-items">
      <fileset dir="/shared/data/ProteinInteractions">
        <include name="caeel*.xml"/>
        <include name="drome*.xml"/>
      </fileset>
    </convert-xml>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.psi-src-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
    </ant>
  </target>

  <target name="translate-psi" depends="compile-psi-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.psi-tgt-items-std"/>
    </ant>
    <copy file="${model}/psi/psi_mappings" toDir="${build.model}/psi"/>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.PsiDataTranslator"
                    source="os.psi-src-items"
                    target="osw.psi-tgt-items"
                    srcModel="psi"
                    tgtModel="genomic"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.psi-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
    </ant>
  </target>

  <target name="load-psi-hybrigenics"  depends="copy-genomic-config">
    <taskdef name="load-psi" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-psi integrationWriter="integration.production" source="os.psi-translated" sourceName="psi-hybrigenics" ignoreDuplicates="true"/>
  </target>

  <target name="load-psi-intact" depends="copy-genomic-config">
    <taskdef name="load-psi" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-psi integrationWriter="integration.production" source="os.psi-translated" sourceName="psi-intact" ignoreDuplicates="true"/>
  </target>

  <!--target name="build-psi-production" depends="retrieve-psi-dag, load-psi-dag, retrieve-psi-hybrigenics, translate-psi, load-psi-hybrigenics, retrieve-psi-intact, translate-psi, load-psi-intact"/-->
  <target name="build-psi-production" depends="retrieve-psi-dag, load-psi-dag, retrieve-psi-intact, translate-psi, load-psi-intact"/>

  <!-- TAXONOMY PIPELINE -->

  <target name="retrieve-taxonomy" depends="prepare-build-model, compile-taxonomy-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="taxonomy"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.taxonomy-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file clsName="org.flymine.dataconversion.TaxonomyConverter"
                  osName="osw.taxonomy-tgt-items" model="genomic">
      <fileset dir="/shared/data/taxonomy" includes="taxonomy.dat"/>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-taxonomy"  depends="copy-genomic-config">
    <taskdef name="load-taxonomy" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-taxonomy integrationWriter="integration.production" source="os.taxonomy-translated" sourceName="taxonomy"/>
  </target>

  <target name="build-taxonomy-production" depends="retrieve-taxonomy, load-taxonomy"/>

  <!-- MAGE PIPELINE -->
  <path id="mage.class.path">
    <path refid="models.class.path"/>
    <pathelement location="${build.tmp}/mage"/>
    <fileset dir="${model}/mage/">
      <include name="lib/*.jar"/>
      <include name="resources/MAGE-ML.dtd"/>
    </fileset>
  </path>


  <target name="retrieve-mage" depends="prepare, prepare-build-model, compile-mage-java, convert-mage">
    <!-- MAGEstk toolkit wants write access to source files (?) -->
    <delete dir="${build}/tmp/mage"/>
    <copy todir="${build.tmp}/mage">
      <fileset dir="/shared/data/mage/"/>
    </copy>

    <copy file="${model}/mage/resources/MAGE-ML.dtd" todir="${build.tmp}/mage"/>

    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.mage-src-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="mage.class.path"/>
    </taskdef>

    <convert-file osName="osw.mage-src-items"
                  clsName="org.flymine.dataconversion.MageConverter" model="mage">
      <fileset dir="${build.tmp}/mage/">
        <include name="*.xml"/>
      </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.mage-src-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-src-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>


  <target name="translate-mage" depends="convert-mage, compile-mage-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.mage-tgt-items-std"/>
    </ant>
    <copy file="${model}/mage/mage_mappings" toDir="${build.model}/mage"/>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.MageDataTranslator"
                    source="os.mage-src-items"
                    target="osw.mage-tgt-items"
                    srcModel="mage"
                    tgtModel="genomic"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.mage-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-mage" depends = "prepare-build-model, copy-genomic-config">
    <taskdef name="load-mage" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-mage integrationWriter="integration.production" source="os.mage-translated" sourceName="mage" ignoreDuplicates="false"/>
  </target>

  <target name="build-mage-production" depends="retrieve-mage, translate-mage, load-mage"/>

  <!-- PROTEIN_STRUCTURE PIPELINE -->

  <target name="retrieve-protein_structure" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.protein_structure-src-items-std"/>
    </ant>
    <taskdef name="convert-xml" classname="org.intermine.task.XmlConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <convert-xml schema="${model}/protein_structure/protein_structure.xsd"
                 model="protein_structure"
                 osName="osw.protein_structure-src-items">
      <fileset dir="/shared/data/kenji" includes="**/*.xml"/>
    </convert-xml>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.protein_structure-src-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-src-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="translate-protein_structure" depends="prepare-build-model, compile-protein_structure-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.protein_structure-tgt-items-std"/>
    </ant>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.ProteinStructureDataTranslator"
                    source="os.protein_structure-src-items"
                    target="osw.protein_structure-tgt-items"
                    srcModel="protein_structure"
                    tgtModel="genomic"
                    dataLocation="/shared/data/kenji/data/pfam-3d/model/"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.protein_structure-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-protein_structure"  depends="copy-genomic-config">
    <taskdef name="load-protein_structure" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>
    <load-protein_structure integrationWriter="integration.production" source="os.protein_structure-translated" sourceName="protein_structure" ignoreDuplicates="true"/>
  </target>

  <target name="build-protein_structure-production" depends="retrieve-protein_structure, translate-protein_structure, load-protein_structure"/>

  <!-- GO PIPELINE -->

  <!-- load go dag data -->
  <target name="retrieve-go-dag" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.go-dag-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-go-dag" classname="org.intermine.task.DagConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-go-dag file="${model}/go/go-combined.ontology" osName="osw.go-dag-tgt-items" termClass="http://www.flymine.org/model/genomic#GOTerm" dagName="GO"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.go-dag-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-go-dag"  depends="copy-genomic-config">
    <taskdef name="load-go-dag" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-go-dag integrationWriter="integration.production" source="os.go-dag-translated" sourceName="go"/>
  </target>

  <target name="retrieve-go-annotation" depends="prepare-build-model, compile-go-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.go-dag-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file osName="osw.go-annotation-tgt-items"
                  clsName="org.flymine.dataconversion.GoConverter" model="genomic">
      <fileset dir="/shared/data/go-annotation">
        <include name="gene_association*"/>
      </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.go-annotation-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-go-annotation"  depends="copy-genomic-config">
    <taskdef name="load-go-annotation" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-go-annotation integrationWriter="integration.production"
                        source="os.go-annotation-translated"
                        sourceName="goa"
                        ignoreDuplicates="true"/>
  </target>

  <target name="build-go-production" depends="retrieve-go-dag, load-go-dag, retrieve-go-annotation, load-go-annotation"/>

  <!--load GFF3 data for flyreg -->
  <target name="retrieve-flyreg"
          depends="prepare-build-model, compile-flyreg-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.flyreg-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.flyreg-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="DM"
                   infoSourceTitle="FlyReg"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.FlyRegGFF3RecordHandler">
      <fileset dir="/shared/data/flyreg">
        <include name="*.gff3"/>
        <include name="*.GFF3"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.flyreg-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-flyreg"
          depends="copy-genomic-config, prepare-build-model, compile-flyreg-java, compile-genomic-java">
    <taskdef name="load-flyreg" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-flyreg integrationWriter="integration.production"
                 source="os.flyreg-translated-std"
                 sourceName="flyreg"
                 ignoreDuplicates="false"/>
  </target>

  <target name="build-flyreg-production" depends="retrieve-flyreg, load-flyreg"/>

  <!--load GFF3 data for long_oligo -->
  <target name="retrieve-long_oligo"
          depends="prepare-build-model, compile-long_oligo-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.long_oligo-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.long_oligo-tgt-items"
                   seqClsName="Transcript"
                   orgAbbrev="DM"
                   infoSourceTitle="INDAC Long Oligo Set"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.LongOligoGFF3RecordHandler">
      <fileset dir="/shared/data/long_oligo">
        <include name="*.gff3"/>
        <include name="*.GFF3"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.long_oligo-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-long_oligo"
          depends="copy-genomic-config, prepare-build-model, compile-long_oligo-java, compile-genomic-java">
    <taskdef name="load-long_oligo" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-long_oligo integrationWriter="integration.production"
                 source="os.long_oligo-translated-std"
                 sourceName="long_oligo"
                 ignoreDuplicates="false"/>
  </target>

  <target name="build-long_oligo-production" depends="retrieve-long_oligo, load-long_oligo"/>

  <!--load GFF3 data for tiling_path -->
  <target name="retrieve-tiling_path"
          depends="prepare-build-model, compile-tiling_path-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.tiling_path-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.tiling_path-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="DM"
                   infoSourceTitle="TilingPath"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.TilingPathGFF3RecordHandler">
      <fileset dir="/shared/data/tiling">
        <include name="*.gff3"/>
        <include name="*.GFF3"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.tiling_path-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-tiling_path"
          depends="copy-genomic-config, prepare-build-model, compile-tiling_path-java, compile-genomic-java">
    <taskdef name="load-tiling_path" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-tiling_path integrationWriter="integration.production"
                 source="os.tiling_path-translated-std"
                 sourceName="tiling_path"
                 ignoreDuplicates="false"/>
  </target>

  <target name="build-tiling_path-production" depends="retrieve-tiling_path, load-tiling_path"/>

 <!-- GFF3 PIPELINE -->
  <!--load GFF3 data-->
  <target name="retrieve-gff3" depends="prepare-build-model, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gff3-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter ="org.flymine.dataconversion.GFF3Converter"
                    target="osw.gff3-tgt-items"
                    seqClsName = "Chromosome"
                    orgAbbrev ="HS"
                    infoSourceTitle = "UCSC"
                    model ="genomic">
      <fileset dir ="/shared/data/human">
        <!--include name ="firstEF/*.gff"/-->
        <include name ="tfbs/*.gff"/>
      </fileset>
      <!--fileset dir ="/shared/data/gff3">
        <include name ="test.gff"/>
      </fileset-->

    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gff3-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

 <!--target name="load-gff3" depends="copy-genomic-config">
    <taskdef name="load-gff3" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gff3 integrationWriter="integration.genomic-test"
               source="os.gff3-translated-std"
               sourceName="ucsc"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-gff3-production" depends="retrieve-gff3, load-gff3"/-->


  <!-- LOAD STATIC DATA -->

  <!-- Load organism XML data into production database -->
  <target name="load-static" depends="prepare-build-model, copy-genomic-config">
    <taskdef name="load-xml-data"
      classname="org.intermine.dataloader.XmlDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-xml-data integrationWriter="integration.production" xmlFile="/shared/data/static/databases.xml" sourceName="static"/>
    <load-xml-data integrationWriter="integration.production" xmlFile="/shared/data/static/organisms.xml" sourceName="static"/>
    <load-xml-data integrationWriter="integration.production" xmlFile="/shared/data/static/rnai-codes.xml" sourceName="static"/>
    <load-xml-data integrationWriter="integration.production" xmlFile="/shared/data/static/ontologies.xml" sourceName="static"/>
  </target>

  <target name="filter-uniprot" depends="prepare-build-model, compile-uniprot-java">
    <taskdef
      name="filter-uniprot"
      classname="org.flymine.dataconversion.UniprotFilterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <filter-uniprot tgtDir="${build.tmp}" organisms="7227 6239 7165 180454">
      <fileset dir="/shared/data/uniprot">
        <include name="uniprot_sprot.xml"/>
        <include name="uniprot_trembl.xml"/>
      </fileset>
    </filter-uniprot>
  </target>

  <target name="retrieve-uniprot" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-src-items"/>
      <property name="objectstore.name" value="os.uniprot-src-items-std"/>
    </ant>

    <taskdef name="convert-xml" classname="org.intermine.task.XmlConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-xml schema="${model}/uniprot/uniprot.xsd"
                 model="uniprot"
                 osName="osw.uniprot-src-items">
      <fileset dir="${build.tmp}">
        <include name="*_filtered.xml"/>
      </fileset>
    </convert-xml>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.uniprot-src-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-src-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="translate-uniprot" depends="prepare-build-model, compile-uniprot-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.uniprot-tgt-items-std"/>
    </ant>

    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.UniprotDataTranslator"
                    source="os.uniprot-src-items"
                    target="osw.uniprot-tgt-items"
                    srcModel="uniprot"
                    tgtModel="genomic"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.uniprot-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="load-uniprot"  depends="copy-genomic-config">
    <taskdef name="load-uniprot" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-uniprot integrationWriter="integration.production" source="os.uniprot-translated" sourceName="uniprot" ignoreDuplicates="true"/>
  </target>

  <target name="build-uniprot-production" depends="filter-uniprot, retrieve-uniprot, translate-uniprot, load-uniprot"/>


  <!-- BUILD PRODUCTION DATABASE -->

  <target name="copy-genomic-config" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="copy-keydefs" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- Build genomic model database to hold production data -->
  <target name="build-db-production" depends="compile-genomic-model, copy-genomic-config">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.production"/>
      <property name="objectstore.name" value="os.production"/>
    </ant>
  </target>

  <target name="create-indexes-production"
          depends="prepare-build-model, compile-genomic-model-from-db">
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.production"/>
      <property name="objectstore.name" value="os.production"/>
    </ant>
  </target>

  <target name="create-indexes-production-attribute"
          depends="prepare-build-model, compile-genomic-model-from-db">
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.production"/>
      <property name="create.attribute.indexes" value="true"/>
    </ant>
  </target>

  <!-- drop all precomputed tables -->
  <target name="drop-precomputed-tables-production"
          depends="prepare, prepare-genomic-model">
    <taskdef name="drop-precomputed-tables"
             classname="org.intermine.task.DropPrecomputedTablesTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <drop-precomputed-tables alias="os.production"/>
  </target>

  <!-- create selected precomputed tables in the production database -->
  <target name="precompute-production-queries" depends="prepare-build-model">
    <ant antfile="build/build-model.xml" target="precompute-model" inheritRefs="true">
      <property name="objectstore.name" value="os.production"/>
      <property name="db.name" value="db.production"/>
      <property name="model.name" value="genomic"/>
      <property name="precompute.minRows" value="0"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- create selected precomputed tables in the production database and test
       the speed of queries -->
  <target name="precompute-production-queries-test" depends="prepare-build-model">
    <ant antfile="build/build-model.xml" target="precompute-model-test" inheritRefs="true">
      <property name="objectstore.name" value="os.production"/>
      <property name="db.name" value="db.production"/>
      <property name="model.name" value="genomic"/>
      <property name="precompute.minRows" value="0"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- create selected precomputed tables in the production database -->
  <target name="precompute-production-templates" depends="prepare-build-model">
    <ant antfile="build/build-model.xml" target="precompute-templates" inheritRefs="true">
      <property name="objectstore.name" value="os.production"/>
      <property name="db.name" value="db.production"/>
      <property name="model.name" value="genomic"/>
      <property name="precompute.minRows" value="0"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>


  <!-- LOAD PRODUCTION DATA -->

  <!-- Translates and loads ensembl drosophila data -->
  <target name="build-ensembl-drosophila-production" depends="retrieve-ensembl-drosophila,translate-ensembl-drosophila,load-ensembl-drosophila"/>

  <!-- Translates and loads ensembl anopheles data -->
  <target name="build-ensembl-anopheles-production" depends="retrieve-ensembl-anopheles,translate-ensembl-anopheles,load-ensembl-anopheles"/>

  <!-- Retrieve and load orthologue data -->
  <target name="build-orthologues-production" depends="retrieve-orthologues-inparanoid,load-orthologues-inparanoid"/>

  <!-- build production database - assumes that ensembl databases already retrieved -->
  <target name="production-build" 
          depends="create-production-model, 
                   compile-genomic-model, 
                   jar-genomic,
                   build-db-production,
                   create-indexes-production,
                   load-static,
                   build-flybase-production,
                   read-flybase-chromosome-fasta,
                   build-ensembl-anopheles-production,
                   build-uniprot-production,
                   build-rnai-production,
                   build-psi-production,
                   build-orthologues-production,
                   build-phenotype-production,
                   build-go-production,
                   build-protein_structure-production,
                   analyse-db-production,
                   grant-db-production"/>
  
  <target name="analyse-db-production" depends="prepare">
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.production"/>
      <property name="full" value="true"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="analyse-protein-production" depends="prepare">
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.production"/>
      <property name="model" value="genomic"/>
      <property name="className" value="org.flymine.model.genomic.Protein"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="grant-db-production" depends="prepare">
    <!-- grant 'public' user select permission on production db -->
    <taskdef name="grant" classname="org.intermine.task.GrantTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <grant database="db.production" user="PUBLIC" perm="SELECT"/>

  </target>


  <!-- ========== POST PROCESSING TARGETS ========== -->

  <target name="calculate-locations" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="calculate-locations" objectStoreWriter="osw.production"/>
  </target>

  <target name="create-chromosome-locations" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="create-chromosome-locations" objectStoreWriter="osw.production"/>
  </target>

  <target name="create-references" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="create-references" objectStoreWriter="osw.production"/>
  </target>

  <target name="make-spanning-locations" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="make-spanning-locations" objectStoreWriter="osw.production"/>
  </target>

  <target name="transfer-sequences" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="transfer-sequences" objectStoreWriter="osw.production"/>
  </target>

  <target name="update-publications" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="update-publications" objectStore="os.production" outputFile="${build.tmp}/publications.xml"/>

    <taskdef name="load-xml-data"
      classname="org.intermine.dataloader.XmlDataLoaderTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <load-xml-data integrationWriter="integration.production" xmlFile="${build.tmp}/publications.xml" sourceName="pubmed" ignoreDuplicates="true"/>
  </target>

 <target name="add-licences" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="add-licences" objectStoreWriter="osw.production"/>
  </target>

  <target name="update-orthologues" depends="compile-genomic-java-from-db">
    <taskdef name="mappings" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <mappings operation="update-orthologues" objectStoreWriter="osw.production"/>
  </target>

  <target name="create-flybase-linkins" depends="compile-genomic-java-from-db">
    <taskdef name="link-ins" classname="org.flymine.util.LinkInTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <link-ins objectStore="os.production" outputFile="FlyBaseToFlyMine" database="flybase"/>
  </target>

  <target name="create-flybase-to-uniprot-refs" depends="compile-genomic-java-from-db">
    <taskdef name="fb-uniprot-refs" classname="org.flymine.postprocess.FlyBaseUniProtRefsTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <fb-uniprot-refs linkFile="${flybase.uniprot.link.file}"
                     objectStoreWriter="osw.production"/>
  </target>

  <target name="post-process">
    <!--    <antcall target="add-licences"/>  -->
    <antcall target="calculate-locations"/>
    <antcall target="create-chromosome-locations"/>
    <antcall target="analyse-db-production"/>
    <antcall target="create-references"/>
    <antcall target="analyse-db-production"/>
    <antcall target="update-orthologues"/>
    <antcall target="analyse-db-production"/>
    <antcall target="make-spanning-locations"/>
    <antcall target="analyse-db-production"/>

    <!-- removed due to running out of memory -->
    <!--antcall target="transfer-sequences"/-->
    <!--antcall target="create-indexes-production-attribute"/-->
    <!--antcall target="analyse-db-production"/-->
  </target>


  <!-- ========== OBJECTSTORE EXPORT TARGETS ========== -->
  <target name="write-gff" depends="compile-genomic-java-from-db">
    <taskdef name="write-gff" classname="org.flymine.gbrowse.WriteGFFTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <write-gff alias="os.production" dest="${build.gbrowse.data}"/>
  </target>

  <!-- ========== COMPILATION AND TESTING TARGETS ========== -->

  <!-- build genomic test database -->
  <target name="build-db-genomic-test" depends="prepare-build-model, prepare-test">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="db.name" value="db.genomic-test"/>
      <property name="objectstore.name" value="os.genomic-test"/>
    </ant>
  </target>

  <target name="create-indexes-genomic-test" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="os.alias" value="os.genomic-test"/>
      <property name="objectstore.name" value="os.genomic-test"/>
    </ant>
  </target>

  <target name="build-db-fulldatatest" depends="prepare-build-model, prepare-test">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="db.name" value="db.fulldatatest"/>
      <property name="objectstore.name" value="os.fulldatatest"/>
    </ant>
  </target>

  <target name="compile-ensembl-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="ensembl-test" depends="prepare-test, convert-ensembl, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-chado-java" depends="compile-flymine-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="chado-test" depends="prepare-build-model, convert-chado">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-rnai-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="rnai"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="rnai-test" depends="prepare-build-model, prepare-test">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="rnai"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-orthologue-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="orthologue"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="orthologue-test" depends="prepare-build-model, prepare-test, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="orthologue"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-go-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="go"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="go-test" depends="prepare-build-model, prepare-test, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="go"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-mage-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="mage-test" depends="prepare-build-model, prepare-test, merge-mage-model">
    <mkdir dir="${build.tmp}/mage"/>
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
    <!-- put model back to how it was -->
    <antcall target="compile-genomic-model"/>

  </target>

  <target name="compile-psi-java" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="psi"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-flyreg-java"
          depends="prepare-build-model, compile-flymine-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="flyreg"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-long_oligo-java"
          depends="prepare-build-model, compile-flymine-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="long_oligo"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-tiling_path-java"
          depends="prepare-build-model, compile-flymine-java, compile-genomic-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="tiling_path"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-protein_structure-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="protein_structure"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="protein_structure-test" depends="prepare-test, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="protein_structure"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="psi-test" depends="prepare-test, prepare-build-model, build-db-fulldatatest">
    <copy file="${model}/psi/psi.xsd" toDir="${build.model}/psi"/>
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="psi"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-taxonomy-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="taxonomy"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="taxonomy-test" depends="prepare-build-model, compile-taxonomy-java, prepare-test, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="taxonomy"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-uniprot-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="uniprot"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="uniprot-test" depends="prepare-test, prepare-build-model, build-db-fulldatatest">
    <copy file="${model}/uniprot/uniprot.xsd" toDir="${build.model}/uniprot"/>
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="uniprot"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="compile-genomic-java" depends="compile-flymine-java, compile-genomic-model">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-genomic-java-from-db"
          depends="compile-genomic-model-from-db, compile-flymine-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="genomic-test-inc" depends="prepare-build-model, prepare-test, compile-flymine-java">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
    <antcall target="test-report"/>
  </target>

  <target name="genomic-test" depends="compile-genomic-model, genomic-test-inc"/>

  <target name="compile-models-java" depends="prepare-build-model">
    <javac destdir="${build.model}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="models.class.path"/>
      <src path="${model}/"/>
      <include name="**/src/java/**"/>
      <exclude name="genomic/**"/>
    </javac>
  </target>

  <target name="compile-models-test" depends="compile-models-java">
    <javac destdir="${build.model}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="models.class.path"/>
      <src path="${model}/"/>
      <include name="**/src/test/**"/>
      <exclude name="genomic/**"/>
    </javac>
  </target>

  <target name="test-models-inc"
          depends="mage-test, ensembl-test, rnai-test, psi-test, orthologue-test, go-test,
                   taxonomy-test, uniprot-test, protein_structure-test">
    <antcall target="test-report"/>
  </target>

  <target name="test-models-full" depends="compile-genomic-model, test-models-inc"/>

  <target name="fulltest" depends="clean, compile-genomic-model, build-db-genomic-test, create-indexes-genomic-test, test-models-inc, genomic-test"
          description="do an incremental test and fail if there are any errors">
    <fail message="Some unit tests have failed" if="junit.failure"/>
    <fail message="Some files violate FlyMine coding standards" if="checkstyle.failure"/>
  </target>

  <target name="test-report" depends="prepare"
          description="generate a test report for all the unit tests" >
    <junitreport todir="${results.junit}">
      <fileset dir="${results.junit}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${results.junit}"/>
    </junitreport>
  </target>

  <!-- create Sequence objects for BioEntitys from a FASTA file -->


  <target name="read-flybase-chromosome-fasta"
          depends="compile-genomic-java, compile-flymine-java">
    <taskdef name="read-fasta" classname="org.flymine.task.FastaReadTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <read-fasta className="Chromosome" organismAbbreviation="DM" alias="osw.production">
      <fileset dir="${flybase.chado.fasta}">
        <include name="dmel-all-chromosome-*.fasta"/>
      </fileset>
    </read-fasta>
  </target>

  <target name="read-flybase-chromosome-4-fasta"
          depends="compile-genomic-java, compile-flymine-java">
    <taskdef name="read-fasta" classname="org.flymine.task.FastaReadTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <read-fasta className="Chromosome" organismAbbreviation="DM" alias="osw.production">
      <fileset dir="${flybase.chado.fasta}">
        <include name="dmel-4-chromosome-*.fasta"/>
      </fileset>
    </read-fasta>
  </target>

  <target name="read-flybase-gene-fasta"
          depends="compile-genomic-java, compile-flymine-java">
    <taskdef name="read-fasta" classname="org.flymine.task.FastaReadTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <read-fasta className="Gene" organismAbbreviation="DM" alias="osw.production">
      <fileset dir="${flybase.chado.fasta}">
        <include name="dmel-all-gene-*.fasta"/>
      </fileset>
    </read-fasta>
  </target>

  <target name="read-flybase-cds-fasta"
          depends="compile-genomic-java, compile-flymine-java">
    <taskdef name="read-fasta" classname="org.flymine.task.FastaReadTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <read-fasta className="CDS" organismAbbreviation="DM" alias="osw.production">
      <fileset dir="${flybase.chado.fasta}">
        <include name="dmel-all-CDS-*.fasta"/>
      </fileset>
    </read-fasta>
  </target>

  <!-- Java checkstyle targets -->
  <target name="checkstyle" depends="prepare"
          description="checks the coding style of all the java files in the project">
    <taskdef resource="checkstyletask.properties">
      <classpath refid="checkstyle.class.path"/>
    </taskdef>
    <checkstyle config="${resources}/checkstyle-config.xml"
                failureProperty="checkstyle.failure"
                failOnViolation="false">
      <classpath refid="base.class.path"/>
      <formatter type="xml" tofile="${results.checkstyle}/checkstyle_report.xml" />
      <fileset dir="${model}">
        <include name="**/src/java/**/*.java" />
        <include name="**/web/java/**/*.java" />
        <exclude name="genomic/src/java/**/biojava*/**/*.java" />
      </fileset>
      <fileset dir=".">
        <include name="src/java/**/*.java" />
      </fileset>
      <property key="checkstyle.header.file" value="${resources}/copyright_header.txt"/>
    </checkstyle>

    <style in="${results.checkstyle}/checkstyle_report.xml"
           out="${results.checkstyle}/checkstyle_report.html"
           style="${resources}/checkstyle-frames.xsl" />
  </target>


  <!-- WEBAPP TARGETS -->

  <target name="build-production-webapp"
          depends="prepare-build-model, compile-flymine-java">
    <unwar src="${intermine.war.path}" dest="${build.webapp}/intermine">
      <patternset>
        <include name="WEB-INF/lib/*.jar"/>
      </patternset>
    </unwar>
    <copy file="${intermine.war.path}" tofile="${dist.webapp}/flymine.war" verbose="true"/>
    <ant antfile="${build}/build-model.xml" target="add-model-to-webapp" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="model.name" value="genomic"/>
      <property name="db.name" value="db.production"/>
      <property name="objectstore.name" value="os.production"/>
      <property name="db.name" value="db.production"/>
      <reference torefid="class.path" refid="webapp.class.path"/>
    </ant>

    <copy todir="${build.tmp}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true" verbose="true"/>
    <patternset id="default-intermine-properties">
      <include name="default.intermine.properties"/>
    </patternset>
    <ant antfile="${build}/build-webapp.xml" target="add-to-war-classes" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="file.dir" value="${build.tmp}"/>
      <reference torefid="file.names" refid="default-intermine-properties"/>
    </ant>

    <ant antfile="${build}/build-webapp.xml" target="add-to-war-lib" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="file.dir" value="${lib}"/>
      <reference torefid="file.names" refid="lib.webapp"/>
    </ant>

    <ant antfile="${build}/build-webapp.xml" target="add-to-war-lib" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="file.dir" value="${dist}"/>
      <reference torefid="file.names" refid="lib.flymine"/>
    </ant>

    <copy todir="${build.tmp}" file="${build.model}/genomic/objectstoresummary.properties"/>

    <filter token="SITE_PREFIX" value="${www.location}"/>
    <filter token="HELP_LOCATION" value="${www.help.location}"/>
    <filter token="SITE_SUPERUSER" value="${webapp.superuser}"/>
    <copy todir="${build.tmp}" filtering="true"
          file="${resources}/webapp/flymine/global.web.properties"
          overwrite="true" verbose="true"/>
    <concat destfile="${build.tmp}/web.properties">
      <fileset file="${model}/genomic/resources/web/web.properties" />
      <fileset file="${build.properties.local}" />
    </concat>
    <patternset id="flymine-global-web-properties-patternset">
      <include name="global.web.properties"/>
      <include name="web.properties"/>
      <include name="objectstoresummary.properties"/>
    </patternset>
    <ant antfile="${build}/build-webapp.xml" target="add-to-war-webinf" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <property name="file.dir" value="${build.tmp}"/>
      <reference torefid="file.names" refid="flymine-global-web-properties-patternset"/>
    </ant>
  </target>

  <target name="release-webapp" depends="prepare-build-model"
          description="release the webapp to the server">
    <ant antfile="${build}/build-webapp.xml" target="release-webapp" inheritRefs="true">
      <property name="war" value="${dist.webapp}/flymine.war"/>
      <reference torefid="class.path" refid="project.class.path"/>
    </ant>
  </target>

  <target name="remove-webapp" depends="prepare-build-model"
          description="remove the webapp from the server">
    <ant antfile="${build}/build-webapp.xml" target="remove-webapp" inheritRefs="true">
      <reference torefid="class.path" refid="project.class.path"/>
    </ant>
  </target>

  <target name="build-db-userprofile" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true" verbose="true"/>
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="userprofile"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.userprofile"/>
      <property name="objectstore.name" value="os.userprofile"/>
    </ant>
    <antcall target="load-default-templates"/>
  </target>
  
  <!-- load default global template queries -->
  <target name="load-default-templates" depends="prepare-build-model">
    <copy todir="${build.resources}"
          file="${resources}/webapp/default.intermine.properties"
          overwrite="true" verbose="true"/>
    <!-- insert default template queries. this will also create the superuser account. -->
    <taskdef name="insert-default-templates" classname="org.intermine.task.LoadDefaultTemplatesTask">
      <classpath refid="webapp.class.path"/>
    </taskdef>
    <insert-default-templates templatesXml="model/genomic/resources/web/template-queries.xml"
                              username="${webapp.superuser}"/>
  </target>
  
  <target name="build-production-webservice-client" depends="compile-genomic-model">
    <jar destfile="${dist}/flymine-webservice-client.jar">
      <zipfileset src="${webservice-client.jar.path}"/>
      <fileset dir="${resources}/webservice-client" includes="default.intermine.properties"/>
      <fileset dir="${build.model}/genomic"/>
    </jar>
  </target>

  <target name="build-production-webservice" depends="jar-genomic">
    <unwar src="${webservice.war.path}" dest="${build.webapp}/webservice">
      <patternset>
        <include name="WEB-INF/lib/*.jar"/>
      </patternset>
    </unwar>
    <copy file="${runtime.properties.local}" toFile="${build.tmp}/WEB-INF/intermine.properties"/>
    <copy file="${webservice.war.path}" todir="${dist.webapp}"/>
    <war destfile="${dist.webapp}/webservice.war" update="true">
      <lib dir="${dist}" includes="intermine-genomic.jar" />
      <classes file="${resources}/webapp/default.intermine.properties"/>
      <classes file="${build.tmp}/WEB-INF/intermine.properties"/>
    </war>
  </target>

  <target name="release-webservice"
          description="release the webservice to the server">
    <ant antfile="${build}/build-webapp.xml" target="release-webservice" inheritRefs="true">
      <property name="war" value="${dist.webapp}/webservice.war"/>
      <reference torefid="class.path" refid="webservice.class.path"/>
    </ant>
  </target>

  <!-- GBROWSE TARGETS -->

  <target name="install-gbrowse-conf"
          description="copy the FlyMine/GBrowse configuration file to the gbrowse.conf directory">
    <filter token="FLYMINE_WEBAPP_VIEW_BY_ID_PREFIX"
            value="${webapp.baseurl}/${webapp.path}/${webapp.viewByID.prefix}"/>
    <filter token="FLYMINE_SITE_PREFIX"
            value="${www.location}"/>
    <filter token="FLYMINE_GBROWSE_DATABASE"
            value="${gbrowse.database}"/>
    <filter token="FLYMINE_GBROWSE_DATABASE_HOST"
            value="${gbrowse.database.host}"/>
    <filter token="FLYMINE_GBROWSE_DATABASE_ADAPTOR"
            value="${gbrowse.database.adaptor}"/>
    <filter token="FLYMINE_GBROWSE_DATABASE_USER"
            value="${gbrowse.database.user}"/>
    <filter token="FLYMINE_GBROWSE_DATABASE_PASSWORD"
            value="${gbrowse.database.password}"/>
    <filter token="FLYMINE_GBROWSE_DATABASE_ADAPTOR"
            value="${gbrowse.database.adaptor}"/>
    <copy file="${model}/genomic/resources/gbrowse/flymine.conf"
          toFile="${build.gbrowse}/${gbrowse.database.source}.conf"
          filtering="true" overwrite="true"/>

    <copy toDir="${build.gbrowse.images}">
      <fileset dir="${model}/genomic/resources/gbrowse/images">
        <include name="*.gif"/>
      </fileset>
    </copy>

    <chmod perm="a+r">
      <fileset dir="${build.gbrowse.images}">
        <include name="*.gif"/>
      </fileset>
    </chmod>

    <chmod perm="a+xr">
      <fileset dir="${build.gbrowse.images}">
        <include name="**"/>
      </fileset>
    </chmod>

    <chmod perm="a+r">
      <fileset dir="${build.gbrowse}">
        <include name="${gbrowse.database.source}.conf"/>
      </fileset>
    </chmod>

    <exec executable="rsync">
      <arg line="-e ssh -Cavz ${build.gbrowse}/${gbrowse.database.source}.conf ${gbrowse.config.directory}/" />
    </exec>

    <exec executable="rsync">
      <arg line="-e ssh -Cavz ${build.gbrowse.images} ${gbrowse.www.directory}/images/buttons/" />
    </exec>
  </target>

  <target name="load-gbrowse-data"
          description="call bp_load_gff.pl to load the FlyMine GFF dump into GBrowse">
    <exec dir="${build.gbrowse.data}" executable="bp_load_gff.pl">
      <arg value="--adaptor"/>
      <arg value="dbi::Pg"/>
      <arg value="--create"/>
      <arg value="--dsn"/>
      <arg value="dbi:Pg:dbname=${gbrowse.database};host=${gbrowse.database.host}"/>
      <arg value="--user"/>
      <arg value="${gbrowse.database.write.user}"/>
      <arg value="--password"/>
      <arg value="${gbrowse.database.write.password}"/>
    </exec>
    <apply dir="${build.gbrowse.data}" executable="bp_load_gff.pl">
      <arg value="--adaptor"/>
      <arg value="dbi::Pg"/>
      <arg value="--dsn"/>
      <arg value="dbi:Pg:dbname=${gbrowse.database};host=${gbrowse.database.host}"/>
      <arg value="--user"/>
      <arg value="${gbrowse.database.write.user}"/>
      <arg value="--password"/>
      <arg value="${gbrowse.database.write.password}"/>
      <fileset dir="${build.gbrowse.data}">
        <patternset>
          <include name="*.fa"/>
          <include name="*.gff"/>
        </patternset>
      </fileset>
    </apply>
  </target>

  <target name="load-gbrowse-data-mysql"
          description="call bp_bulk_load_gff.pl to load the FlyMine GFF dump into GBrowse">
    <exec executable="/bin/sh">
      <arg line="-c 'bp_bulk_load_gff.pl -create --database dbi:mysql:${gbrowse.database}\;host=${gbrowse.database.host} --user ${gbrowse.database.write.user} --password ${gbrowse.database.write.password} ${build.gbrowse.data}/*.{fa,gff}'"/>
    </exec>
  </target>

  <!-- MODEL COMPILATION TARGETS -->

  <target name="compile-acedb-model" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-model-from-ace" inheritRefs="true">
      <property name="model.name" value="acedb"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-chado-model" depends="convert-chado">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-ensembl-model" depends="convert-ensembl">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="compile-mage-model" depends="convert-mage">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- ============================================================================== -->

  <!-- Targets for the non-model Java -->


  <target name="compile-flymine-java" depends="prepare">
    <javac destdir="${build.java}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="base.class.path"/>
      <src path="${build.src.java}"/>
      <src path="${src.java}"/>
    </javac>
  </target>

  <target name="test-flymine-java" depends="compile-flymine-java, compile-test">
    <junit printsummary="yes" haltonfailure="no" failureproperty="junit.failure" reloading="false">
      <classpath refid="test.class.path"/>
      <formatter type="xml" />
      <batchtest fork="no" todir="${results.junit}">
        <fileset dir="${build.test}" includes="**/*Test.class">
          <depend targetdir="${results.junit}">
            <mapper type="package" from="*.class" to="TEST-*.xml" />
          </depend>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- JAVADOC TARGETS -->

  <target name="javadoc" depends="prepare"
          description="generate the javadoc">
    <javadoc destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="FlyMine API" additionalparam="-breakiterator">
      <classpath refid="base.class.path"/>
      <fileset dir="${src.java}" defaultexcludes="yes" />
      <doctitle><![CDATA[<h1>FlyMine</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; ${YEAR} FlyMine. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>


  <!-- DOT TASKS -->

  <target name="dot-acedb" depends="compile-acedb-model">
    <ant antfile="${build}/build-model.xml" target="dot" inheritRefs="true">
      <property name="model.name" value="acedb"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="dot-chado" depends="compile-chado-model">
    <ant antfile="${build}/build-model.xml" target="dot" inheritRefs="true">
      <property name="model.name" value="chado"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="dot-ensembl" depends="compile-ensembl-model">
    <ant antfile="${build}/build-model.xml" target="dot" inheritRefs="true">
      <property name="model.name" value="ensembl"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="dot-mage" depends="compile-mage-model">
    <ant antfile="${build}/build-model.xml" target="dot" inheritRefs="true">
      <property name="model.name" value="mage"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="dot-genomic" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="dot" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- PACKAGING/DISTRIBUTION TARGETS -->

  <target name="dist-javadoc" depends="prepare,javadoc"
          description="makes the javadoc available for distribution">
    <copy todir="${dist.javadoc}">
      <fileset dir="${build.javadoc}">
      </fileset>
    </copy>
  </target>


  <!-- CLEAN TARGETS -->

  <target name="clean"
          description="clean up generated files">
    <delete dir="${build}"/>
    <delete dir="${results}"/>
    <delete>
      <fileset dir=".">
        <include name="junit*.properties"/>
        <include name="velocity.log*"/>
        <include name="flymine.log*"/>
      </fileset>
    </delete>
  </target>

  <target name="clean-code"
          description="clean up all generated and compiled code">
    <delete dir="${build.resources}"/>
    <delete>
      <fileset dir=".">
        <include name="velocity.log*"/>
        <include name="flymine.log*"/>
        <include name="build/**/*.java"/>
        <include name="build/**/*.class"/>
      </fileset>
    </delete>
    <antcall target="prepare" />
  </target>

  <target name="distclean" depends="clean"
          description="clean up all distribution files">
    <delete dir="${dist}"/>
  </target>

  <target name="junit-clean" depends="prepare">
    <delete>
      <fileset dir="${results.junit}" includes="TEST-*.xml"/>
    </delete>
  </target>

  <!-- ANTDOC TARGET -->
  <target name="ant-doc">
    <taskdef name="AntDoc" classname="org.ed.pack.ant.AntDoc">
      <classpath refid="base.class.path"/>
    </taskdef>
    <AntDoc destination="${results.antdoc}" buildfile="${ant.file}"/>
  </target>


  <!-- =============== HUMAN TARGETS ================= -->

 <target name="compile-genomic-human-java" depends="compile-flymine-java, compile-genomic-human-model">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- ENSEMBL HUMAN  MODEL GENERATION -->

  <!-- convert ensembl human zargo to InterMine model -->
  <target name="convert-ensembl-human" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="generate-model-from-zargo" inheritRefs="true">
      <property name="model.name" value="ensembl-human"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- merge the ensembl model additions with the current genomic model -->
  <target name="merge-ensembl-human-model" depends="convert-ensembl-human, prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/ensembl-human/ensembl-human_additions.xml"/>
  </target>

  <!-- MERGED GENOMIC HUMAN MODEL  -->

 <!-- create human genomic model from core and all additions files -->
  <target name="create-human-production-model"
          depends="remove-genomic, prepare-build-model,
                merge-orthologue-model, merge-psi-model, merge-rnai-model,
                merge-ensembl-human-model, merge-phenotype-model, merge-go-model,
                merge-uniprot-model, merge-protein_structure-model, merge-ucsc-model, 
                merge-so-model, merge-tiling_path-model, merge-long_oligo-model,
                merge-chado-model, merge-shortcuts">
  </target>


  <!-- create java objects for the genomic human model-->
  <target name="compile-genomic-human-model" depends="create-human-production-model">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>


  <!-- DATA LOADING PIPELINE -->

  <!-- build ensembl human src items database -->
  <target name="build-db-ensembl-human-src-items" depends="prepare-build-model">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-human-src-items"/>
      <property name="objectstore.name" value="os.ensembl-human-src-items-std"/>
    </ant>
  </target>

  <!-- retrieve ensembl human data -->
  <target name="retrieve-ensembl-human"
          depends="convert-ensembl-human, build-db-ensembl-human-src-items">
    <taskdef name="retrieve-ensembl-human" classname="org.intermine.dataconversion.DBRetrieverTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-ensembl-human database="db.ensembl-human" model="ensembl-human" osName="osw.ensembl-human-src-items"/>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-human-src-items-std"/>
    </ant>
  </target>

  <!-- translate ensembl human data -->
  <target name="translate-ensembl-human" depends="convert-ensembl-human, compile-ensembl-human-java, compile-genomic-human-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.ensembl-human-tgt-items"/>
      <property name="objectstore.name" value="os.ensembl-human-tgt-items-std"/>
    </ant>
    <copy file="${model}/ensembl-human/ensembl-human_mappings" toDir="${build.model}/ensembl-human"/>
    <taskdef name="translate-data" classname="org.flymine.task.DataTranslatorTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <translate-data translator="org.flymine.dataconversion.EnsemblHumanDataTranslator"
                    source="os.ensembl-human-src-items"
                    target="osw.ensembl-human-tgt-items"
                    srcModel="ensembl-human"
                    tgtModel="genomic"
                    organism="HS"/>
    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.ensembl-human-tgt-items-std"/>
    </ant>
    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.ensembl-human-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- Load data from ensembl-human-tgt-items into production -->
  <target name="load-ensembl-human" depends="prepare-build-model, copy-genomic-config">
    <taskdef name="load-human" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-human integrationWriter="integration.production" source="os.ensembl-human-translated" sourceName="ensembl-human" /><!--queryClass="org.flymine.model.genomic.Synonym"/-->
  </target>

  <!--LOAD PRODUCTION DATA  -->
  <target name="build-ensembl-human-production"
          depends="retrieve-ensembl-human,translate-ensembl-human,load-ensembl-human"/>

 <!-- BUILD PRODUCTION DATABASE -->
  
  <!-- Build genomic model database to hold production data -->
  <target name="build-db-production-human" depends="compile-genomic-human-model, copy-genomic-config">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.production"/>
      <property name="objectstore.name" value="os.production"/>
    </ant>
  </target>

   <!-- build production database - assumes that ensembl databases already retrieved -->
  <target name="human-production-build"
          depends="create-human-production-model, compile-genomic-human-model,jar-genomic,
                   build-db-production-human,create-indexes-production, load-static,
                   build-ensembl-human-production, build-go-human-production,
                   build-tfbs-production, build-firstef-production,
                   build-regions-production, build-disease-regions-production,
                   analyse-db-production, grant-db-production"/>


  <!--POST PROCESSING -->
  <target name="fetch-contig-sequences" depends="compile-genomic-java-from-db">
    <taskdef name="fetch-sequences" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <fetch-sequences operation="fetch-contig-sequences-human" objectStoreWriter="osw.production" ensemblDb="db.ensembl-human"/>
  </target>

  <target name="transfer-sequences-chromosome" depends="compile-genomic-java-from-db">
    <taskdef name="transfer-sequences" classname="org.flymine.postprocess.PostProcessTask">
      <classpath refid="models.class.path"/>
    </taskdef>
    <transfer-sequences operation="transfer-sequences-chromosome" objectStoreWriter="osw.production"/>
  </target>

  <target name="post-process-human">
      <antcall target="fetch-contig-sequences"/>
      <antcall target="analyse-db-production"/>
      <antcall target="create-references"/>
      <antcall target="analyse-db-production"/>
      <antcall target="transfer-sequences-chromosome"/>
      <antcall target="analyse-db-production"/>
      <!--antcall target="create-indexes-production-attribute"/-->
      <!--antcall target="analyse-db-production"/-->
  </target>

  <!--COMPILATION AND TESTING TARGETS -->
  <target name="compile-ensembl-human-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="ensembl-human"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="ensembl-human-test"
          depends="prepare-test, convert-ensembl-human, build-db-fulldatatest">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="ensembl-human"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="test-human-models-inc"
          depends="ensembl-human-test, rnai-test, psi-test, orthologue-test, go-test,
                   taxonomy-test, uniprot-test, protein_structure-test, ucsc-test">
    <antcall target="test-report"/>
  </target>

  <target name="test-human-models-full"
          depends="compile-genomic-human-model, test-human-models-inc">
    <antcall target="test-report"/>
  </target>

  <target name="fullhumantest"
          depends="clean, compile-genomic-human-model, build-db-genomic-test,
                   create-indexes-genomic-test, test-human-models-inc, genomic-test"
          description="do an incremental test and fail if there are any errors">
    <fail message="Some unit tests have failed" if="junit.failure"/>
    <fail message="Some files violate FlyMine coding standards" if="checkstyle.failure"/>
  </target>


  <!-- MODEL COMPILATION TARGETS -->
  <target name="compile-ensembl-human-model" depends="convert-ensembl-human">
    <ant antfile="${build}/build-model.xml" target="compile-model-java" inheritRefs="true">
      <property name="model.name" value="ensembl-human"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <!-- GO ANNOTATION -->
  <target name="retrieve-go-annotation-human" depends="prepare-build-model, compile-go-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.go-dag-tgt-items-std"/>
    </ant>

    <taskdef name="convert-file" classname="org.intermine.task.FileConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <convert-file osName="osw.go-annotation-tgt-items"
                  clsName="org.flymine.dataconversion.GoConverter" model="genomic">
      <fileset dir="/shared/data/go-annotation/human">
        <include name="gene_association*"/>
      </fileset>
    </convert-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.go-annotation-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

  <target name="build-go-human-production"
          depends="retrieve-go-dag, load-go-dag, retrieve-go-annotation-human, load-go-annotation"/>

<!-- UCSC MODEL GENERATION -->

  <!-- merge ucsc model additions with current genomic model -->
  <!-- ucsc data including tfbs, firstEF, encodeRegions from ucsc database -->
  <target name="merge-ucsc-model" depends="prepare-genomic-model">
    <merge-genomic-additions additionsFile="${model}/ucsc/ucsc_additions.xml"/>
  </target>

  <target name="ucsc-test"
          depends="prepare-test, build-db-fulldatatest, compile-genomic-human-java">
    <ant antfile="${build}/build-model.xml" target="test-java" inheritRefs="true">
      <property name="model.name" value="ucsc"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>
  
  <target name="compile-ucsc-java" 
          depends="prepare-build-model, compile-flymine-java, compile-genomic-human-java">
    <ant antfile="${build}/build-model.xml" target="compile-java" inheritRefs="true">
      <property name="model.name" value="ucsc"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

 <!--load TFBS GFF3 data from UCSC-->

  <target name="retrieve-tfbs" depends="prepare-build-model, compile-ucsc-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gff3-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.gff3-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="HS"
                   infoSourceTitle="UCSC"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.TfbsGFF3RecordHandler">
      <fileset dir ="/shared/data/human/tfbs">        
        <include name ="tfbsConsSites_withFactors.gff"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gff3-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

 <target name="load-tfbs" depends="copy-genomic-config">
    <taskdef name="load-gff3" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gff3 integrationWriter="integration.production"
               source="os.gff3-translated-std"
               sourceName="ucsc"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-tfbs-production" depends="retrieve-tfbs, load-tfbs"/>


<!--load firstEF GFF3 data from UCSC-->

  <target name="retrieve-firstef" depends="prepare-build-model, compile-ucsc-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gff3-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.gff3-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="HS"
                   infoSourceTitle="UCSC"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.GFF3RecordHandler">
      <fileset dir ="/shared/data/human/firstEF">        
        <include name ="*.gff"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gff3-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

 <target name="load-firstef" depends="copy-genomic-config">
    <taskdef name="load-gff3" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gff3 integrationWriter="integration.production"
               source="os.gff3-translated-std"
               sourceName="ucsc"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-firstef-production" depends="retrieve-firstef, load-firstef"/>


<!--load encodeRegions GFF3 data from UCSC-->

  <target name="retrieve-regions" depends="prepare-build-model, compile-ucsc-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gff3-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.gff3-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="HS"
                   infoSourceTitle="UCSC"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.GFF3RecordHandler">
      <fileset dir ="/shared/data/human/encodeRegions/">        
        <include name ="*.gff"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gff3-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

 <target name="load-regions" depends="copy-genomic-config">
    <taskdef name="load-gff3" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gff3 integrationWriter="integration.production"
               source="os.gff3-translated-std"
               sourceName="ucsc"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-regions-production" depends="retrieve-regions, load-regions"/>

<!--load diseaseRegions GFF3 data from T1DBase-->

  <target name="retrieve-disease-regions" depends="prepare-build-model, compile-ucsc-java">
    <ant antfile="${build}/build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="db.name" value="db.common-tgt-items"/>
      <property name="objectstore.name" value="os.gff3-tgt-items-std"/>
    </ant>

    <taskdef name="retrieve-file" classname="org.flymine.task.GFF3ConverterTask">
      <classpath refid="models.class.path"/>
    </taskdef>

    <retrieve-file converter="org.flymine.dataconversion.GFF3Converter"
                   target="osw.gff3-tgt-items"
                   seqClsName="Chromosome"
                   orgAbbrev="HS"
                   infoSourceTitle="T1DBase"
                   model="genomic"
                   handlerClassName="org.flymine.dataconversion.GFF3RecordHandler">
      <fileset dir ="/shared/data/human/diseaseRegions/">        
        <include name ="*.gff"/>
      </fileset>
    </retrieve-file>

    <ant antfile="${build}/build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="genomic"/>
      <reference torefid="class.path" refid="models.class.path"/>
      <property name="os.alias" value="os.gff3-tgt-items-std"/>
    </ant>

    <ant antfile="${build}/build-model.xml" target="analyse-db" inheritRefs="true">
      <property name="db.name" value="db.common-tgt-items"/>
      <reference torefid="class.path" refid="models.class.path"/>
    </ant>
  </target>

 <target name="load-disease-regions" depends="copy-genomic-config">
    <taskdef name="load-gff3" classname="org.intermine.dataloader.ObjectStoreDataLoaderTask">
      <classpath refid="genomic.class.path"/>
    </taskdef>

    <load-gff3 integrationWriter="integration.production"
               source="os.gff3-translated-std"
               sourceName="ucsc"
               ignoreDuplicates="false"/>
  </target>

  <target name="build-disease-regions-production" 
          depends="retrieve-disease-regions, load-disease-regions"/>



</project>

