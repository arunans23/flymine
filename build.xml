<project name="flymine" default="help" basedir=".">
  <description>FlyMine build file</description>

  <!-- Property setup targets -->
  <!-- buildtime and runtime settings -->
  <property name="build.properties.local" value="${user.home}/build.properties.${ant.project.name}" />

  <property file="${build.properties.local}"/>
  <property file="build.properties"/>

  <property name="runtime.properties.local" value="${user.home}/${ant.project.name}.properties" />

  <!-- libraries and binaries -->
  <property name="lib" location="lib"/>
  <property name="buildlib" location="buildlib"/>
  <property name="weblib" location="weblib"/>
  <property name="bin" location="bin"/>

  <!-- source directories -->
  <property name="src" location="src"/>
  <property name="src.java" location="${src}/java"/>
  <property name="src.test" location="${src}/test"/>
  <property name="src.www" location="doc"/>
  <property name="src.www-internal" location="../flymine-private/doc"/>
  <property name="src.webapp" location="${src}/web"/>

  <!-- resources directory -->
  <property name="resources" location="resources"/>

  <!-- model directory -->
  <property name="model" location="model"/>

  <!-- build directories -->
  <property name="build" location="build"/>
  <property name="build.java" location="${build}/java"/>
  <property name="build.resources" location="${build}/resources"/>
  <property name="build.resources.testxml" location="${build}/resources/test"/>
  <property name="build.test" location="${build}/test"/>
  <property name="build.model" location="${build}/model" />
  <property name="build.schema" location="${build}/schema" />
  <property name="build.src.java" location="${build}/javasrc"/>
  <property name="build.src.test" location="${build}/testsrc"/>
  <property name="build.javadoc" location="${build}/api"/>
  <property name="build.www" location="${build}/www"/>
  <property name="build.www-internal" location="${build}/www/internal"/>
  <property name="build.tmp" location="${build}/tmp"/>

  <!-- tutorial directory -->
  <property name="tutorial" location="${build}/tutorial"/>

  <!-- results directories -->
  <property name="results"  location="results"/>
  <property name="results.junit"  location="${results}/junit"/>
  <property name="results.checkstyle"  location="${results}/checkstyle"/>
  <property name="results.antdoc" location="${results}/antdoc"/>

  <!-- distributable directories -->
  <property name="dist"  location="dist"/>
  <property name="dist.www"  location="${dist}/www"/>
  <property name="dist.webapp"  location="${dist}/webapp"/>
  <property name="dist.javadoc"  location="${dist.www}/api"/>

  <!-- set up library filesets -->

  <!-- Libraries that everything needs -->
  <patternset id="lib.common">
    <include name="jasper*.jar"/>
    <include name="ant*.jar"/>
    <include name="castor*xml*.jar" />
    <include name="cglib*.jar" />
    <include name="commons-collections*.jar" />
    <include name="commons-dbcp*.jar" />
    <include name="commons-lang*.jar" />
    <include name="commons-pool*.jar" />
    <include name="db-ojb*.jar" />
    <include name="libreadline-java*.jar" />
    <include name="log4j*.jar" />
    <include name="postgresql*.jar" />
    <include name="torque*.jar" />
    <include name="velocity*.jar" />
  </patternset>

  <!-- Ant tasks and unit testing stuff -->
  <patternset id="lib.build">
    <include name="AntDoc*.jar" />
    <include name="catalina-ant*.jar" />
    <include name="junit*.jar" />
    <include name="mockobjects*.jar" />
    <include name="nsuml*.jar" />
    <include name="xmlunit*.jar" />
  </patternset>

  <!-- Libraries relevant to building from UML models -->
  <patternset id="lib.uml">
    <include name="nsuml*.jar" />
  </patternset>

  <!-- Libraries relevant to building from AceDB models and data -->
  <patternset id="lib.acedb">
    <include name="acedb*.jar" />
    <include name="biojava*.jar" />
  </patternset>

  <!-- Libraries relevant to testing webapps -->
  <patternset id="lib.webapptest">
    <include name="cactus*.jar" />
    <include name="commons-httpclient*.jar" />
    <include name="commons-logging*.jar" />
    <include name="httpunit*.jar" />
    <include name="struts-test*.jar" />
  </patternset>

  <!-- Antlr library -->
  <patternset id="lib.antlr">
    <include name="antlr*.jar"/>
  </patternset>

  <!-- Checkstyle library -->
  <patternset id="lib.checkstyle">
    <include name="checkstyle*.jar"/>
  </patternset>

  <!-- Libraries that the FlyMine query webapp uses -->
  <patternset id="lib.webapp.flymine">
    <include name="aspect*.jar" />
    <include name="commons*.jar" />
    <include name="jakarta-oro*.jar" />
    <include name="jstl*.jar" />
    <include name="servlet*.jar" />
    <include name="standard*.jar" />
    <include name="struts*.jar" />
  </patternset>

  <!-- Libraries that the webservice uses -->
  <patternset id="lib.webapp.webservice">
    <include name="axis*.jar" />
    <include name="commons-discovery*.jar" />
    <include name="saaj*.jar" />
    <include name="jaxrpc*.jar" />
    <include name="wsdl*.jar" />
  </patternset>


  <!-- set the classpath for the build - basically everything in lib -->
  <path id="base.class.path">
    <pathelement path="${build.java}"/>
    <pathelement path="${build.resources}"/>
    <fileset dir="${lib}">
      <patternset refid="lib.common"/>
      <patternset refid="lib.build"/>
      <patternset refid="lib.webapp.flymine"/>
      <patternset refid="lib.webapp.webservice"/>
      <patternset refid="lib.acedb"/>
      <patternset refid="lib.uml"/>
    </fileset>
  </path>

  <path id="project.class.path">
    <path refid="base.class.path"/>
    <fileset dir="${lib}">
      <patternset refid="lib.antlr"/>
    </fileset>
  </path>

  <path id="checkstyle.class.path">
    <fileset dir="${lib}">
      <patternset refid="lib.checkstyle"/>
    </fileset>
  </path>

  <path id="test.class.path">
    <path refid="project.class.path"/>
    <pathelement location="${build.test}"/>
    <pathelement location="${build.model}/testmodel"/>
    <pathelement location="${build.model}/acedbtest"/>
  </path>

  <path id="acedbtest.class.path">
    <path refid="project.class.path"/>
    <pathelement location="${build.model}/acedbtest"/>
  </path>

  <path id="acedb.class.path">
    <path refid="project.class.path"/>
    <pathelement location="${build.model}/acedb"/>
  </path>

  <path id="webapptest.class.path">
    <path refid="test.class.path"/>
    <fileset dir="${lib}">
      <patternset refid="lib.webapptest"/>
    </fileset>
    <fileset dir="${dist.webapp}">
      <include name="flymine.war"/>
    </fileset>
  </path>

  <path id="webservice.class.path">
    <path refid="project.class.path"/>
    <fileset dir="${lib}">
      <patternset refid="lib.webapp.webservice"/>
    </fileset>
  </path>


  <!-- Initialisation targets -->

  <target name="prepare">
    <tstamp>
      <format property="YEAR" pattern="yyyy"/>
      <format property="DTSTAMP" pattern="yyyyMMddHHmm"/>
    </tstamp>
    
    <mkdir dir="${build}"/>
    <mkdir dir="${build.java}"/>
    <mkdir dir="${build.resources}"/>
    <mkdir dir="${build.resources.testxml}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${build.model}" />
    <mkdir dir="${build.schema}" />
    <mkdir dir="${build.src.java}"/>
    <mkdir dir="${build.src.test}"/>
    <mkdir dir="${build.javadoc}"/>
    <mkdir dir="${build.www}"/>
    <mkdir dir="${build.www-internal}"/>
    <mkdir dir="${build.tmp}"/>

    <mkdir dir="${results}"/>
    <mkdir dir="${results.junit}"/>
    <mkdir dir="${results.checkstyle}"/>
    <mkdir dir="${results.antdoc}"/>

    <mkdir dir="${tutorial}"/>
    <mkdir dir="${tutorial}/lib"/>
    <mkdir dir="${tutorial}/model"/>
    <mkdir dir="${tutorial}/resources"/>
    <mkdir dir="${tutorial}/src/java/org/flymine/tutorial"/>

    <copy file="${runtime.properties.local}" tofile="${build.resources}/flymine.properties"/>
    <copy todir="${build.resources}">
      <fileset dir="${resources}/runtime" />
    </copy>
    <copy todir="${build.resources.testxml}">
      <fileset dir="${resources}/test/xml" />
    </copy>
    <copy todir="${build.resources.testxml}">
      <fileset dir="${resources}/test/">
        <include name="*.xml"/>
      </fileset>
    </copy>

  </target>

  <target name="prepare-dist">
    <mkdir dir="${dist}"/>
    <mkdir dir="${dist.www}"/>
    <mkdir dir="${dist.webapp}"/>
    <mkdir dir="${dist.javadoc}"/>
  </target>

  <!-- Help -->
  <target name="help" description="Displays user targets">
    <echo message=""/>
    <echo message="FlyMine build file - available targets are:"/>
    <echo message=""/>
    <echo message="compile-main           --> compiles the source code"/>
    <echo message="build-testmodel        --> generate testmodel class and mapping files"/>
    <echo message="build-db-testmodel     --> create the testmodel database tables"/>
    <echo message="insert-data-testmodel  --> store testmodel test data"/>
    <echo message="test-main              --> runs the unit tests"/>
    <echo message="clean                  --> cleans up the directory"/>
    <echo message="jar                    --> builds the FlyMine jar"/>
    <echo message=""/>
    <echo message="See 'ant -projecthelp' for full target list"/>
  </target>



  <!-- Compilation targets -->

  <!-- main java source -->
  <target name="compile-main" depends="prepare"
          description="compile the java source" >
    <copy todir="${build.src.java}">
      <fileset dir="${src.java}">
        <include name="**/*.java"/>
        <exclude name="**/tutorial/*"/>
      </fileset>
    </copy>
    <antlr target="${src.java}/org/flymine/sql/query/flymine_sql.g"
        outputdirectory="${build.src.java}/org/flymine/sql/query">
      <classpath refid="project.class.path"/>
    </antlr>
    <antlr target="${src.java}/org/flymine/objectstore/query/fql/flymine_fql.g"
        outputdirectory="${build.src.java}/org/flymine/objectstore/query/fql">
      <classpath refid="project.class.path"/>
    </antlr>
    <javac destdir="${build.java}" listfiles="yes">
      <classpath refid="project.class.path"/>
      <src path="${build.src.java}" />
    </javac>
  </target>




  <!-- Models to build -->

  <!-- Testmodel -->
  <target name="build-testmodel" depends="compile-main" >
    <ant antfile="build-model.xml" target="build-model-from-zargo">
      <property name="model.name" value="testmodel"/>
      <property name="model.src" value="${model}/uml"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="build-db-testmodel" depends="build-testmodel">
    <ant antfile="build-model.xml" target="build-db">
      <property name="model.name" value="testmodel"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="db.name" value="db.unittest"/>
    </ant>
  </target>
  
  <!-- insert the testmodel data into the database -->
  <target name="insert-data-testmodel" depends="build-db-testmodel">
    <taskdef
      name="insert-xml-data"
      classname="org.flymine.task.InsertXmlDataTask">
      <classpath refid="project.class.path"/>
    </taskdef>

    <insert-xml-data integrationWriter="integration.unittest" file="${build.resources.testxml}/testmodel_data.xml">
      <classpath refid="test.class.path"/>
    </insert-xml-data>
  </target>


  <!-- Acedb test build targets -->
  
  <!-- generate acedbtest model from .wrm file -->
  <target name="build-acedbtest" depends="compile-main" >
    <ant antfile="build-model.xml" target="build-model-from-ace">
      <property name="model.name" value="acedbtest"/>
      <property name="model.src" value="${model}/acedb/acedbtest.wrm"/>
      <reference torefid="class.path" refid="acedbtest.class.path"/>
    </ant>
  </target>

  <!-- copy original .wrm file to model directory for acedataloadertest -->
  <target name="copy-model-acedbtest" depends="build-acedbtest">
    <copy todir="${build.model}/acedbtest" file="${model}/acedb/acedbtest.wrm"/>
  </target>


  <!-- Stress build targets (currently uses ace model) -->
  
  <!-- generate acedb model from acemodel file -->
  <target name="build-acedb" depends="compile-main">
    <ant antfile="build-model.xml" target="build-model-from-ace">
      <property name="model.name" value="acedb"/>
      <property name="model.src" value="${model}/acedb/acedb.wrm"/>
      <reference torefid="class.path" refid="acedb.class.path"/>
    </ant>
  </target> 


  <target name="build-db-acedb" depends="build-acedb">
    <ant antfile="build-model.xml" target="build-db">
      <property name="model.name" value="acedb"/>
      <reference torefid="class.path" refid="acedb.class.path"/>
      <property name="db.name" value="db.acedb"/>
    </ant>
  </target>
  
  <!-- insert the ace data into the database -->
   <target name="insert-data-acedb" depends="build-db-acedb">
    <taskdef
          name="insert-ace-data"
          classname="org.flymine.task.InsertAceDataTask">
      <classpath refid="acedb.class.path"/>
    </taskdef>

    <insert-ace-data integrationWriter="integration.acedb" user="${acedb.user}" password="${acedb.password}" host="${acedb.host}" port="${acedb.port}">
      <classpath refid="acedb.class.path"/>
    </insert-ace-data>
  </target>

  <!-- test target to put the ace data into the database without deleting what's already there-->
  <target name="insert-only-acedb-data">
    <taskdef
          name="insert-ace-data"
          classname="org.flymine.task.InsertAceDataTask">
      <classpath refid="acedb.class.path"/>
    </taskdef>

    <insert-ace-data integrationWriter="integration.acedb" user="${acedb.user}" password="${acedb.password}" host="${acedb.host}" port="${acedb.port}">
      <classpath refid="acedb.class.path"/>
    </insert-ace-data>
  </target>

  <!-- build acedb system -->
  <target name="build-stresstest" depends ="insert-data-acedb"
          description="build the production FlyMine system with acedb model" >
  </target>


  <!-- Production build targets (currently uses testmodel) -->
  
  <!-- generate production model -->
  <target name="build-productionmodel" depends="compile-main">
    <ant antfile="build-model.xml" target="build-model-from-zargo">
      <property name="model.name" value="testmodel"/>
      <property name="model.src" value="${model}/uml"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target> 


  <target name="build-db-productionmodel" depends="build-productionmodel">
    <ant antfile="build-model.xml" target="build-db">
      <property name="model.name" value="testmodel"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="db.name" value="db.production"/>
    </ant>
  </target>
  
  <!-- insert the production data into the database -->
   <target name="insert-data-productionmodel" depends="build-db-productionmodel">
    <taskdef
      name="insert-xml-data"
      classname="org.flymine.task.InsertXmlDataTask">
      <classpath refid="project.class.path"/>
    </taskdef>

    <insert-xml-data integrationWriter="integration.production" file="${build.resources.testxml}/testmodel_data.xml">
      <classpath refid="test.class.path"/>
    </insert-xml-data>
  </target>

  <!-- build production system -->
  <target name="build-production" depends ="insert-data-productionmodel"
          description="build the production FlyMine system with acedb model" >
  </target>


  <!-- Unit test targets -->

  <!-- compile the tests -->
  <target name="compile-test" depends="build-testmodel, build-acedbtest"
          description="compile the java test source" >
    <copy todir="${build.src.test}">
      <fileset dir="${src.test}">
        <include name="**/*.java"/>
      </fileset>
    </copy>
    <javac destdir="${build.test}" listfiles="yes">
      <classpath refid="test.class.path"/>
      <src path="${build.src.test}" />
    </javac>
  </target>

  <!-- run the tests -->
  <target name="test-main" depends="compile-test, build-db-testmodel, copy-model-acedbtest"
          description="perform JUnit tests on main source code" >

    <!-- this will cause every test to be re-run if any java file changes -->
    <dependset>
      <srcfileset dir="${build.java}" includes="**/*.class" />
      <targetfileset dir="${results.junit}" includes="TEST-*.xml" />
    </dependset>

    <junit printsummary="yes" haltonfailure="no" failureproperty="junit.failure">
      <classpath refid="test.class.path"/>
      <formatter type="xml" />
      <batchtest fork="no" todir="${results.junit}">
        <fileset dir="${build.test}" includes="**/*Test.class">
          <depend targetdir="${results.junit}">
            <mapper type="package" from="*.class" to="TEST-*.xml" />
          </depend>
          <exclude name="org/flymine/web/**" />
          <exclude name="org/flymine/objectstore/webservice/**" />
        </fileset>
      </batchtest>
    </junit>

    <antcall target="test-report"/>
  </target>

  <target name="test-webapp" depends="compile-test, build-db-testmodel, build-testable-webapp, release-webapp"
          description="perform JUnit tests on web application" >
   <junit printsummary="yes" haltonfailure="no" failureproperty="junit.failure">
      <classpath refid="webapptest.class.path"/>
      <formatter type="xml" />
      <batchtest fork="no" todir="${results.junit}">
        <fileset dir="${build.test}">
         <include name="org/flymine/web/**/*Test.class" />
        </fileset>
      </batchtest>
    </junit>

    <antcall target="remove-webapp"/>
    <antcall target="test-report"/>
  </target>

  <target name="test-webservice" depends="compile-test, build-db-testmodel, build-testable-webservice, release-webservice"
          description="perform JUnit tests on web service" >
   <junit printsummary="yes" haltonfailure="no" failureproperty="junit.failure">
      <classpath refid="webapptest.class.path"/>
      <formatter type="xml" />
      <batchtest fork="no" todir="${results.junit}">
        <fileset dir="${build.test}">
         <include name="org/flymine/objectstore/webservice/**/*Test.class" />
        </fileset>
      </batchtest>
    </junit>

    <antcall target="remove-webservice"/>
    <antcall target="test-report"/>
  </target>

  <!-- force all the unit tests to be redone -->
  <target name="junit-clean" depends="prepare">
    <delete>
      <fileset dir="${results.junit}" includes="TEST-*.xml"/>
    </delete>
  </target>

  <target name="fulltest" depends="prepare,junit-clean,clean-code,test-main,test-webapp,test-webservice,test-tutorial,checkstyle"
          description="do a full test and fail if there are any errors">
    <fail message="Some unit tests have failed" if="junit.failure"/>
    <fail message="Some files violate FlyMine coding standards" if="checkstyle.failure"/>
  </target>

  <target name="test-report" depends="prepare"
          description="generate a test report for all the unit tests" >
    <junitreport todir="${results.junit}">
      <fileset dir="${results.junit}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${results.junit}"/>
    </junitreport>
  </target>


  <!-- Functional tests -->

  <!-- System tests -->

  <!-- Java checkstyle targets -->

  <target name="checkstyle" depends="prepare"
          description="checks the coding style of all the java files in the project">
    <taskdef resource="checkstyletask.properties">
      <classpath refid="checkstyle.class.path"/>
    </taskdef>
    <checkstyle config="${resources}/checkstyle-config.xml"
                failureProperty="checkstyle.failure"
                failOnViolation="false">
      <classpath refid="base.class.path"/>
      <formatter type="xml" tofile="${results.checkstyle}/checkstyle_report.xml" />
      <fileset dir="${src.java}">
        <include name="**/*.java" />
      </fileset>
      <property key="checkstyle.header.file" value="${resources}/copyright_header.txt"/>
    </checkstyle>

    <style in="${results.checkstyle}/checkstyle_report.xml"
           out="${results.checkstyle}/checkstyle_report.html"
           style="${resources}/checkstyle-frames.xsl" />

  </target>

  <!-- Javadoc targets -->

  <target name="javadoc" depends="prepare"
          description="generate the javadoc">
    <javadoc destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="FlyMine API" additionalparam="-breakiterator">
      <classpath refid="project.class.path"/>
      <fileset dir="${src.java}" defaultexcludes="yes" />
      <doctitle><![CDATA[<h1>FlyMine</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; ${YEAR} FlyMine. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>


  <!-- Web targets -->

  <target name="build-www" depends="prepare"
          description="build the static website" >

    <available file="${src.www-internal}" type="dir" property="www-internal.present"/>

    <antcall target="www-external" />
    <antcall target="www-internal" />

  </target>

    <!-- main web site -->
  <target name="www-external" depends="prepare">

    <!-- make sure files dependent on sidebar are handled correctly -->
    <dependset>
      <srcfilelist dir="${src.www}" files="sidebar.xml,flymine.xsl" />
      <targetfileset dir="${build.www}" includes="**/*.html" />
    </dependset>

    <dependset>
      <srcfilelist dir="${bin}" files="diatopng,pstopng,buildpngfromdia,pnmscalealpha" />
      <targetfileset dir="${build.www}" includes="**/*.png" />
    </dependset>

    <dependset>
      <srcfilelist dir="${bin}" files="buildgiffrompng" />
      <targetfileset dir="${build.www}" includes="**/*.gif" />
    </dependset>

    <copy todir="${build.www}">
      <fileset dir="${src.www}">
        <exclude name="**/*.xml" />
        <exclude name="**/*.xsl" />
        <exclude name="**/*.dia" />
      </fileset>
    </copy>

    <style basedir="${src.www}" destdir="${build.www}" extension=".html"
      style="${src.www}/flymine.xsl" includes="**/*.xml">
      <classpath refid="project.class.path"/>
      <param name="basedir" expression="${www.location}" />
    </style>

    <apply executable="bin/buildpngfromdia" parallel="false" dest="${build.www}">
      <fileset dir="${src.www}">
        <include name="**/*.dia" />
      </fileset>
      <mapper type="glob" from="*.dia" to="*.png" />
      <srcfile />
      <targetfile />
    </apply>

    <apply executable="bin/buildgiffrompng" parallel="false" dest="${build.www}">
      <fileset dir="${build.www}">
        <include name="**/*.png" />
      </fileset>
      <mapper type="glob" from="*.png" to="*.gif" />
      <srcfile />
      <targetfile />
    </apply>
  </target>

    <!-- internal web site -->
  <target name="www-internal" depends="prepare"
          if="www-internal.present" >
    <copy todir="${build.www-internal}">
      <fileset dir="${src.www-internal}">
        <exclude name="**/*.xml" />
        <exclude name="**/*.xsl" />
        <exclude name="**/*.dia" />
      </fileset>
    </copy>

    <style basedir="${src.www-internal}" destdir="${build.www-internal}" extension=".html"
      style="${src.www}/flymine.xsl" includes="**/*.xml">
      <classpath refid="project.class.path"/>
      <param name="basedir" expression="${www.location}" />
    </style>

    <apply executable="bin/buildpngfromdia" parallel="false" dest="${build.www-internal}">
      <fileset dir="${src.www-internal}">
        <include name="**/*.dia" />
      </fileset>
      <mapper type="glob" from="*.dia" to="*.png" />
      <srcfile />
      <targetfile />
    </apply>
    <apply executable="bin/buildgiffrompng" parallel="false" dest="${build.www-internal}">
      <fileset dir="${build.www-internal}">
        <include name="**/*.png" />
      </fileset>
      <mapper type="glob" from="*.png" to="*.gif" />
      <srcfile />
      <targetfile />
    </apply>

  </target>


  <!-- Webapp targets -->

  <target name="build-webapp" depends="prepare,prepare-dist,jar"
    description="Build the FlyMine web application">
    <war destfile="${dist.webapp}/flymine.war" webxml="${resources}/webapps/flymine/web.xml">
      <lib dir="${lib}">
        <patternset refid="lib.common"/>
        <patternset refid="lib.antlr"/>
        <patternset refid="lib.webapp.flymine"/>
      </lib>
      <lib dir="${dist}" includes="flymine*.jar"/>
      <classes dir="${resources}/webapps/flymine" includes="FlyMineWebApp*.properties"/>
      <webinf dir="${resources}/webapps/flymine" excludes="web.xml FlyMineWebApp*.properties"/>
      <fileset dir="${src.webapp}"/>
      <fileset dir="${src.www}" includes="flymine.css"/>
    </war>
  </target>

  <target name="build-testable-webapp" depends="build-webapp,jar-testmodel"
    description="Build a FlyMine webapp including the test classes and libraries">
    <war destfile="${dist.webapp}/flymine.war" update="true">
      <lib dir="${dist}" includes="flymine-testmodel.jar"/>
      <lib dir="${lib}">
        <patternset refid="lib.webapptest"/>
      </lib>
      <fileset dir="${resources}/webapps/flymine" includes="FlyMineWebApp*.properties"/>
    </war>
  </target>

  <!-- Webservice targets -->
 
  <target name="build-webservice" depends="prepare,prepare-dist,jar"
    description="Build the FlyMine webservice">
    <war destfile="${dist.webapp}/webservice.war" webxml="${resources}/webapps/webservice/web.xml">
      <lib dir="${lib}">
        <patternset refid="lib.common"/>
        <patternset refid="lib.antlr"/>
        <patternset refid="lib.webapp.webservice"/>
      </lib>
      <lib dir="${dist}" includes="flymine*.jar"/>
      <webinf dir="${resources}/webapps/webservice" excludes="web.xml"/>
    </war>
  </target>

  <target name="build-testable-webservice" depends="build-webservice,jar-testmodel"
    description="Build the FlyMine webservice including the test classes and libraries">
    <war destfile="${dist.webapp}/webservice.war" update="true">
      <lib dir="${dist}" includes="flymine-testmodel.jar" />
      <lib dir="${lib}">
        <patternset refid="lib.webapptest" />
      </lib>
    </war>
  </target>


  <!-- Packaging/distribution targets -->

  <target name="dist-www" depends="prepare-dist,build-www"
          description="makes the static website available for distribution">
    <copy todir="${dist.www}">
      <fileset dir="${build.www}">
      </fileset>
    </copy>

    <chmod perm="a+r" type="file">
      <fileset dir="${dist.www}">
        <include name="**/**" />
      </fileset>
    </chmod>
    <chmod perm="a+rx" type="dir">
      <fileset dir="${dist.www}">
        <include name="**/**" />
      </fileset>
    </chmod>
  </target>

  <target name="dist-javadoc" depends="prepare-dist,javadoc"
          description="makes the javadoc available for distribution">
     <copy todir="${dist.javadoc}">
      <fileset dir="${build.javadoc}">
      </fileset>
    </copy>
  </target>   


  <target name="jar" depends="prepare-dist, compile-main"
    description="Makes a JAR file of all the classes and configuration files">
    <condition property="version" value="${DTSTAMP}">
      <not>
        <isset property="version" />
      </not>
    </condition>

    <echo message="Creating jar file version ${version}" />
    <manifest file="${build}/MANIFEST.MF">
      <attribute name="Built-By" value="${user.name}"/>
      <attribute name="Specification-Title" value="FlyMine"/>
      <attribute name="Specification-Version" value="${version}"/>
      <attribute name="Specification-Vendor" value="FlyMine"/>
      <attribute name="Implementation-Title" value="FlyMine"/>
      <attribute name="Implementation-Version" value="${version}"/> 
      <attribute name="Implementation-Vendor" value="FlyMine"/>
    </manifest>

    <jar destfile="${dist}/flymine.jar" manifest="${build}/MANIFEST.MF">
      <fileset dir="${build.java}" />
      <fileset dir="${build.resources}"/>
    </jar>

  </target>

  <target name="jar-testmodel" depends="prepare-dist, build-testmodel"
          description="create a jar of the testmodel">
    <ant antfile="build-model.xml" target="jar">
      <property name="model.name" value="testmodel"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="model.src" value="${model}/uml"/>
    </ant>    
  </target>

  <target name="build-tutorial" depends="jar"
          description="build the tutorial tree">
    <!-- root dir -->
    <copy todir="${tutorial}">
      <fileset dir="${resources}/tutorial">
        <include name="build.xml"/>
        <include name="flymine.properties"/>
      </fileset>
      <fileset dir="." includes="build-model.xml"/>
    </copy>
    <!-- lib dir -->
    <copy todir="${tutorial}/lib">
      <fileset dir="${lib}">
        <patternset refid="lib.common"/>
        <patternset refid="lib.antlr"/>
      </fileset>
      <fileset dir="${dist}" includes="flymine.jar"/>
    </copy>
    <!-- model dir -->
    <copy todir="${tutorial}/model" file="${resources}/tutorial/tutorial_model.xml"/>
    <!-- resources dir -->
    <copy todir="${tutorial}/resources">
      <fileset dir="${resources}/runtime">
        <include name="repository.xml"/>
        <include name="repository_internal.xml"/>
        <include name="castor_xml_include.xml"/>
        <include name="ojbcore-schema.xml"/>
      </fileset>
      <fileset dir="${resources}/tutorial" includes="tutorial_data.xml"/>
    </copy>
    <!-- src dir -->
    <copy todir="${tutorial}/src/java/org/flymine/tutorial">
      <fileset dir="${src.java}/org/flymine/tutorial"/>
    </copy>
  </target>

  <target name="compile-tutorial" depends="build-tutorial">
    <ant dir="${tutorial}" target="compile" inheritAll="false">
    </ant>        
  </target>

  <target name="test-tutorial" depends="compile-tutorial">
    <!-- Currently the only test for the tutorial is that it compiles. -->
    <!-- This may change at a later date. -->
  </target>

  <!-- Releasing targets -->

  <!-- website -->
  <target name="release-www" depends="dist-javadoc, dist-www"
    description="releases the static website to the webserver">
    <exec executable="rsync">
      <arg line="-e ssh -Cavz --delete ${dist.www}/ ${www.serverlocation}/" />
    </exec>
  </target>

  <!-- webapp -->
  <target name="release-webapp" depends="build-webapp"
    description="releases the FlyMine web application to the server">
 
    <taskdef name="tomcat-deploy" classname="org.apache.catalina.ant.DeployTask">
      <classpath refid="project.class.path"/>
    </taskdef>

    <tomcat-deploy 
      url="${webapp.baseurl}/manager"
      username="${webapp.manager}" 
      password="${webapp.password}"
      path="${webapp.path}" 
      war="file://${dist.webapp}/flymine.war"/> 
  </target>

  <target name="remove-webapp"
    description="remove the web application from the server">
    <taskdef name="tomcat-undeploy" 
      classname="org.apache.catalina.ant.UndeployTask">
      <classpath refid="project.class.path"/>
    </taskdef>
    <tomcat-undeploy
      url="${webapp.baseurl}/manager"
      username="${webapp.manager}" 
      password="${webapp.password}"
      path="${webapp.path}"/>
  </target>
  
  <!-- webservice -->
  <target name="release-webservice" depends="build-webservice"
    description="releases the webservice application to the webserver">
    
    <taskdef name="tomcat-deploy" classname="org.apache.catalina.ant.DeployTask">
      <classpath refid="project.class.path"/>
    </taskdef>
    
    <tomcat-deploy
      url="${webservice.baseurl}/manager" 
      username="${webservice.manager}"
      password="${webservice.password}" 
      path="${webservice.path}"
      war="file://${dist.webapp}/webservice.war"/> 
    
    <ant antfile="build-model.xml" target="generate-wsdd">
      <property name="model.name" value="testmodel"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
    
    <!-- This should probably be a waitfor task -->
    <java classname="org.apache.axis.client.AdminClient" fork="true">
      <classpath refid="webservice.class.path" />
      <arg value="-l ${webservice.baseurl}/${webservice.path}/servlet/AxisServlet" />
      <arg value="${build.tmp}/deploy-ObjectStore.wsdd" />
    </java>
  </target>
  
  <target name="remove-webservice"
    description="remove the webservice application from the server">
    <taskdef name="tomcat-undeploy" 
      classname="org.apache.catalina.ant.UndeployTask">
      <classpath refid="project.class.path"/>
    </taskdef>
    <tomcat-undeploy
      url="${webservice.baseurl}/manager"
      username="${webservice.manager}"
      password="${webservice.password}"
      path="${webservice.path}"/>
  </target>
  
  <!-- Cleaning-up targets -->

  <target name="clean"
          description="clean up generated files">
    <delete dir="${build}"/>
    <delete dir="${results}"/>
    <delete>
      <fileset dir=".">
        <include name="junit*.properties"/>
        <include name="velocity.log*"/>
        <include name="flymine.log*"/>
      </fileset>
    </delete>
  </target>

  <target name="clean-code"
          description="clean up all generated and compiled code">
    <delete dir="${build.java}"/>
    <delete dir="${build.src.java}"/>
    <delete dir="${build.test}"/>
    <delete dir="${build.src.test}"/>
    <delete dir="${build.resources}"/>
    <delete dir="${build.schema}"/>
    <delete>
    <fileset dir=".">
      <include name="velocity.log*"/>
      <include name="flymine.log*"/>
    </fileset>
    </delete>
    <delete file="flymine.log" />
    <delete file="${build}/testmodel_.xmi" />
    <antcall target="prepare" />
  </target>
  
  <target name="distclean" depends="clean"
          description="clean up all distribution files">
    <delete dir="${dist}"/>
  </target>

  <!-- AntDoc target -->

  <taskdef
	name="AntDoc"
	classname="org.ed.pack.ant.AntDoc">
        <classpath refid="project.class.path"/>
  </taskdef>

   <target name="ant-doc"> 
     <AntDoc
	destination="${results.antdoc}"
	buildfile="${ant.file}"
      />
    </target>

</project>
